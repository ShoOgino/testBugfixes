{"path":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"/dev/null","sourceNew":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":null,"sourceOld":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"/dev/null","sourceNew":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be38a703c871957da90985efa821b44e1c05ad2c","date":1269362485,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n    \n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 ); \n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM'sx\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06389e6752ed5c525a831166a4bf86a798ed15f3","date":1282923428,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foobar\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a","date":1293241159,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"false\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add overwritePending=\\\"true\\\" overwriteCommitted=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\" overwriteCommitted=\\\"false\\\" overwritePending=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add allowDups=\\\"true\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // trigger output of custom value test\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"values\",\n                                    \"test\", 0, 10, args);\n    assertQ(req\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9001fdb834e467ef899e41c747c42b27b4d45099","date":1296775304,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_i\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i asc,b_i desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i asc  , b_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i top, b_i bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c76c72faecc7c9b683ad67e99240c975ee37b3","date":1301109514,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(\"version\",\"2.0\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//int[@name='gack_i'][.='51778']  \"\n            ,\"//str[@name='t_name'][.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//str[@name='t_name' and .='cats']\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[@name='xaa'][.='mystr']  \"\n            ,\"//int[@name='xaaa'][.='12321']\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']  \"\n            ,\"//doc[5]/int[.='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1001']  \"\n            ,\"//doc[3]/int[.='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/int[.='1002']\"\n            ,\"//doc[2]/int[.='1000']  \"\n            ,\"//doc[3]/int[.='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"version\",\"2.0\");\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00aaee1492907b0fd5421b6cf854a9eee5cd1326","date":1306664843,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:bar-foo\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foo/bar\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","pathOld":"solr/src/test/org/apache/solr/ConvertedLegacyTest#testABunchOfConvertedStuff().mjava","sourceNew":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testABunchOfConvertedStuff() {\n    // these may be reused by things that need a special query\n    SolrQueryRequest req = null;\n    Map<String,String> args = new HashMap<String,String>();\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    lrf.args.put(\"defType\",\"lucenePlusSort\");\n\n    // compact the index, keep things from getting out of hand\n\n    assertU(\"<optimize/>\");\n\n    // test query\n\n    assertQ(req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">aa;bb</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:42 AND val_s:\\\"aa\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n\n\n\n    // test allowDups default of false\n\n    assertU(\"<delete><id>42</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">AAA</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">BBB</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">CCC</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"val_s\\\">DDD</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='DDD']\"\n            );\n    assertU(\"<delete><id>42</id></delete>\");\n\n    // test deletes\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<add  overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">105</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">102</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">103</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"true\\\"><doc><field name=\\\"id\\\">101</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(\"<delete><id>102</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(\"<delete><query>id:105</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test range\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s1\\\">apple</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">banana</field><field name=\\\"val_s1\\\">banana</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">pear</field><field name=\\\"val_s1\\\">pear</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[a TO z]\")\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=3] \"\n            ,\"//*[@start='0']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 2, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='pear'] \"\n            ,\"//*[@start='2']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 25, 5 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='apple']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 2 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=2] \"\n            ,\"*//doc[2]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=1] \"\n            ,\"*//doc[1]/str[.='banana']\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 3, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 4, 1 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 1, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z]\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 asc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"val_s:[a TO z];val_s1 desc\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//*[@numFound='3'] \"\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"val_s:[a TO b]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:[a TO cat]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[apple TO pear]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[bear TO boar]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[a TO a]\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"val_s:[apple TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{apple TO pear}\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"val_s:{a TO z}\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:{* TO *}\")\n            ,\"//*[@numFound='3']\"\n            );\n    // test rangequery within a boolean query\n\n    assertQ(req(\"id:44 AND val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"id:44 OR val_s:[a TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:[a TO b] OR val_s:[b TO z]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"+val_s:[a TO b] -val_s:[b TO z]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"-val_s:[a TO b] +val_s:[b TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[apple TO z]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertQ(req(\"val_s:[a TO c] AND val_s:[a TO apple]\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:44 AND (val_s:[a TO c] AND val_s:[a TO apple])\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] OR val_s:[a TO c]) AND (val_s:[b TO c] OR val_s:[b TO b])\")\n            ,\"//*[@numFound='1'] \"\n            ,\"//str[.='banana']\"\n            );\n    assertQ(req(\"(val_s:[apple TO apple] AND val_s:[a TO c]) OR (val_s:[p TO z] AND val_s:[a TO z])\")\n            ,\"//*[@numFound='2'] \"\n            ,\"//str[.='apple'] \"\n            ,\"//str[.='pear']\"\n            );\n\n    // check for docs that appear more than once in a range\n\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"val_s\\\">apple</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"val_s:[* TO *] OR  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *] AND  val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertQ(req(\"val_s:[* TO *]\")\n            ,\"//*[@numFound='4']\"\n            );\n\n\n    // <delete><id>44</id></delete>\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND ride\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44 AND blue\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // allow duplicates\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">red riding hood</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"text\\\">big bad wolf</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='2']\"\n            );\n    assertQ(req(\"id:44 AND red\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:44 AND wolf\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"+id:44 red wolf\")\n            ,\"//@numFound[.='2']\"\n            );\n\n    // test removal of multiples w/o adding anything else\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // untokenized string type\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"ssto\\\">and a 10.4 ?</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//str[.='and a 10.4 ?']\"\n            );\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sind\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sind:abc123\")\n            ,\"//@numFound[.='1'] \"\n            ,\"*[count(//@name[.='sind'])=0] \"\n            ,\"*[count(//@name[.='id'])=1]\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"sindsto\\\">abc123</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // TODO: how to search for something with spaces....\n\n    assertQ(req(\"sindsto:abc123\")\n            ,\"//str[.='abc123']\"\n            );\n\n    // test output of multivalued fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"title\\\">yonik3</field><field name=\\\"title\\\" boost=\\\"2\\\">yonik4</field></doc></add>\");\n    assertU(\"<commit></commit>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='title'][./str='yonik3' and ./str='yonik4'] \"\n            ,\"*[count(//@name[.='title'])=1]\"\n            );\n    assertQ(req(\"title:yonik3\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik4\")\n            ,\"//@numFound[.>'0']\"\n            );\n    assertQ(req(\"title:yonik5\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<delete><query>title:yonik4</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n\n\n    // not visible until commit\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<commit/>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field></doc></add>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//@numFound[.='1']\"\n            );\n\n    // test configurable stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"teststop\\\">world stopworda view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +teststop:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"teststop:stopworda\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test ignoreCase stop words\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"stopfilt\\\">world AnD view</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +stopfilt:world\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"stopfilt:\\\"and\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AND\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n    assertQ(req(\"stopfilt:\\\"AnD\\\"\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test dynamic field types\n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"gack_i\\\">51778</field><field name=\\\"t_name\\\">cats</field></doc></add>\");\n    assertU(\"<commit/>\");\n    // test if the dyn fields got added\n\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc/*)>=3]  \"\n            ,\"//arr[@name='gack_i']/int[.='51778']  \"\n            ,\"//arr[@name='t_name']/str[.='cats']\"\n            );\n    // now test if we can query by a dynamic field (requires analyzer support)\n\n    assertQ(req(\"t_name:cat\")\n            ,\"//arr[@name='t_name' and .='cats']/str\"\n            );\n    // check that deleteByQuery works for dynamic fields\n\n    assertU(\"<delete><query>t_name:cat</query></delete>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"t_name:cat\")\n            ,\"//@numFound[.='0']\"\n            );\n\n    // test that longest dynamic field match happens first\n\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"xaa\\\">mystr</field><field name=\\\"xaaa\\\">12321</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//arr[@name='xaa'][.='mystr']/str  \"\n            ,\"//arr[@name='xaaa'][.='12321']/int\"\n            );\n\n\n    // test integer ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">2147483647</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">-2147483648</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:2147483647\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//int[.='2147483647']\"\n            );\n    assertQ(req(\"num_i1:\\\"-2147483648\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//int[.='-2147483648']\"\n            );\n    assertQ(req(\"id:44;num_i1 asc;\")\n            ,\"//doc[1]/int[.='-2147483648'] \"\n            ,\"//doc[last()]/int[.='2147483647']\"\n            );\n    assertQ(req(\"id:44;num_i1 desc;\")\n            ,\"//doc[1]/int[.='2147483647'] \"\n            ,\"//doc[last()]/int[.='-2147483648']\"\n            );\n    assertQ(req(\"num_i1:[0 TO 9]\")\n            ,\"*[count(//doc)=3]\"\n            );\n    assertQ(req(\"num_i1:[-2147483648 TO 2147483647]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_i1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test long ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1234567890</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">9223372036854775807</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">-9223372036854775808</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_l1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:9223372036854775807\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"num_l1:\\\"-9223372036854775808\\\"\")\n            ,\"//@numFound[.='1'] \"\n            ,\"//long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"id:44;num_l1 asc;\")\n            ,\"//doc[1]/long[.='-9223372036854775808'] \"\n            ,\"//doc[last()]/long[.='9223372036854775807']\"\n            );\n    assertQ(req(\"id:44;num_l1 desc;\")\n            ,\"//doc[1]/long[.='9223372036854775807'] \"\n            ,\"//doc[last()]/long[.='-9223372036854775808']\"\n            );\n    assertQ(req(\"num_l1:[-1 TO 9]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_l1:[-9223372036854775808 TO 9223372036854775807]\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_l1:[-10 TO -1]\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test binary float ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-987654321</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">-1e20</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sf1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sf1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//float[.='NaN']\"\n            );\n    assertQ(req(\"num_sf1:\\\"-1e20\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sf1 asc;\")\n            ,\"//doc[1]/float[.='-Infinity'] \"\n            ,\"//doc[last()]/float[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sf1 desc;\")\n            ,\"//doc[1]/float[.='NaN'] \"\n            ,\"//doc[last()]/float[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sf1:[-1 TO 2]\")\n            ,\"*[count(//doc)=4]\"\n            );\n    assertQ(req(\"num_sf1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n\n    // test binary double ranges and sorting\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1.4142135</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-Infinity</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">NaN</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">2</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">1e-100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-999999.99</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">-1e100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"num_sd1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=10]\"\n            );\n    assertQ(req(\"num_sd1:Infinity\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-Infinity\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:\\\"NaN\\\"\")\n            ,\"//@numFound[.='1']  \"\n            ,\"//double[.='NaN']\"\n            );\n    assertQ(req(\"num_sd1:\\\"-1e100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"num_sd1:\\\"1e-100\\\"\")\n            ,\"//@numFound[.='1']\"\n            );\n    assertQ(req(\"id:44;num_sd1 asc;\")\n            ,\"//doc[1]/double[.='-Infinity'] \"\n            ,\"//doc[last()]/double[.='NaN']\"\n            );\n    assertQ(req(\"id:44;num_sd1 desc;\")\n            ,\"//doc[1]/double[.='NaN'] \"\n            ,\"//doc[last()]/double[.='-Infinity']\"\n            );\n    assertQ(req(\"num_sd1:[-1 TO 2]\")\n            ,\"*[count(//doc)=5]\"\n            );\n    assertQ(req(\"num_sd1:[-Infinity TO Infinity]\")\n            ,\"*[count(//doc)=9]\"\n            );\n\n\n    // test sorting on multiple fields\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">10</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_i1\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id\\\">44</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"*[count(//doc)=6]\"\n            );\n\n    assertQ(req(\"id:44; a_i1 asc,b_i1 desc\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='100'] \"\n            ,\"//doc[4]/int[.='50']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc  , b_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44;a_i1 asc , score top;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[1]/int[.='-1'] \"\n            ,\"//doc[last()]/int[.='15']\"\n            );\n    assertQ(req(\"id:44; score top , a_i1 top, b_i1 bottom ;\")\n            ,\"*[count(//doc)=6] \"\n            ,\"//doc[last()]/int[.='-1'] \"\n            ,\"//doc[1]/int[.='15'] \"\n            ,\"//doc[3]/int[.='50'] \"\n            ,\"//doc[4]/int[.='100']\"\n            );\n\n\n    // test sorting  with some docs missing the sort field\n\n    assertU(\"<delete><query>id_i:[1000 TO 1010]</query></delete>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1000</field><field name=\\\"a_i1\\\">1</field><field name=\\\"nullfirst\\\">Z</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1001</field><field name=\\\"a_i1\\\">10</field><field name=\\\"nullfirst\\\">A</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1002</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">100</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1003</field><field name=\\\"a_i1\\\">-1</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1004</field><field name=\\\"a_i1\\\">15</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1005</field><field name=\\\"a_i1\\\">1</field><field name=\\\"b_si\\\">50</field></doc></add>\");\n    assertU(\"<add overwrite=\\\"false\\\"><doc><field name=\\\"id_i\\\">1006</field><field name=\\\"a_i1\\\">0</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id_i:[1000 TO 1010]\")\n            ,\"*[count(//doc)=7]\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='50'] \"\n            ,\"//doc[2]/int[.='100']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[1]/int[.='100'] \"\n            ,\"//doc[2]/int[.='50']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si desc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='100'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='50']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1010]; a_i1 asc,b_si asc\")\n            ,\"*[count(//doc)=7] \"\n            ,\"//doc[3]/int[@name='b_si' and .='50'] \"\n            ,\"//doc[4]/int[@name='b_si' and .='100']  \"\n            ,\"//doc[5]/arr[@name='id_i' and .='1000']\"\n            );\n    // nullfirst tests\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst asc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1001']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1000']\"\n            );\n    assertQ(req(\"id_i:[1000 TO 1002]; nullfirst desc\")\n            ,\"*[count(//doc)=3] \"\n            ,\"//doc[1]/arr[@name='id_i' and .='1002']\"\n            ,\"//doc[2]/arr[@name='id_i' and .='1000']  \"\n            ,\"//doc[3]/arr[@name='id_i' and .='1001']\"\n            );\n\n    ignoreException(\"shouldbeunindexed\");\n    ignoreException(\"nullfirst\");\n    ignoreException(\"abcde12345\");\n    ignoreException(\"aaa\");\n\n    // Sort parsing exception tests.  (SOLR-6, SOLR-99)\n    assertQEx( \"can not sort unindexed fields\",\n        req( \"id_i:1000; shouldbeunindexed asc\" ), 400 );\n    \n    assertQEx( \"invalid query format\",\n        req( \"id_i:1000; nullfirst\" ), 400 );\n\n    assertQEx( \"unknown sort field\",\n        req( \"id_i:1000; abcde12345 asc\" ), 400 ); \n\n    assertQEx( \"unknown sort order\",\n        req( \"id_i:1000; nullfirst aaa\" ), 400 );\n\n    resetExceptionIgnores();\n\n        \n    // test prefix query\n\n    assertU(\"<delete><query>val_s:[* TO *]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">100</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">101</field><field name=\\\"val_s\\\">banana</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">102</field><field name=\\\"val_s\\\">apple</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">103</field><field name=\\\"val_s\\\">pearing</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">104</field><field name=\\\"val_s\\\">pear</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">105</field><field name=\\\"val_s\\\">appalling</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">106</field><field name=\\\"val_s\\\">pearson</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">107</field><field name=\\\"val_s\\\">port</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    assertQ(req(\"val_s:a*\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertQ(req(\"val_s:p*\")\n            ,\"//*[@numFound='4']\"\n            );\n    // val_s:* %//*[@numFound=\"8\"]\n\n    // test wildcard query\n    assertQ(req(\"val_s:a*p*\") ,\"//*[@numFound='3']\");\n    assertQ(req(\"val_s:p?a*\") ,\"//*[@numFound='3']\");\n\n    assertU(\"<delete><query>id:[100 TO 110]</query></delete>\");\n\n    // test copyField functionality\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"title\\\">How Now4 brown Cows</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND title:Now\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_lettertok:Now\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND title:cow\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND title_stemmed:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:cow\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // test copyField functionality with a pattern.\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"copy_t\\\">Copy me to the text field pretty please.</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    assertQ(req(\"id:42 AND copy_t:pretty\")\n        ,\"*[count(//doc)=1]\"\n        );\n    \n    // test slop\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"text\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND text:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND text:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n\n    // intra-word delimiter testing (WordDelimiterFilter)\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">foo-bar</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"foo bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"bar foo\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"foo/bar\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:foobar\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Canon PowerShot SD500 7MP</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"power-shot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"power shot sd 500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"powershot\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD-500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"SD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"PowerShotSD500-7MP\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Wi-Fi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:wifi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:wi+=fi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:WiFi\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"wi fi\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">'I.B.M' A's,B's,C's</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:\\\"'I.B.M.'\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I.B.M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:I--B--M\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"I B M\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:IBM's\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"IBM'sx\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n\n    // this one fails since IBM and ABC are separated by two tokens\n\n    // id:42 AND subword:IBM's-ABC's  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"IBM's-ABC's\\\"~2\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"A's B's-C's\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Sony KDF-E50A10</field></doc></add>\");\n    assertU(\"<commit/>\");\n\n    // check for exact match:\n\n    //  Sony KDF E/KDFE 50 A 10  (this is how it's indexed)\n\n    //  Sony KDF E      50 A 10  (and how it's queried)\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF-E50A10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:10\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:Sony\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    // this one fails without slop since Sony and KDFE have a token inbetween\n\n    // id:42 AND subword:SonyKDFE50A10  %*[count(//doc)=1]\n\n    assertQ(req(\"id:42 AND subword:\\\"SonyKDFE50A10\\\"~10\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertQ(req(\"id:42 AND subword:\\\"Sony KDF E-50-A-10\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">http://www.yahoo.com</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:yahoo\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:http\\\\://www.yahoo.com\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">--Q 1-- W2 E-3 Ok xY 4R 5-T *6-Y- 7-8-- 10A-B</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:42 AND subword:Q\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:1\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"w 2\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"e 3\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"o k\\\"\")\n            ,\"*[count(//doc)=0]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"ok\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"x y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"xy\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"4 r\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"5 t\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"6 y\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"7 8\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"78\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n    assertQ(req(\"id:42 AND subword:\\\"10 A+B\\\"\")\n            ,\"*[count(//doc)=1]\"\n            );\n\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBarBaz</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">FooBar10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10FooBar</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">BAZ</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">10</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">42</field><field name=\\\"subword\\\">Mark, I found what's the problem! It turns to be from the latest schema. I found tons of exceptions in the resin.stdout that prevented the builder from performing. It's all coming from the WordDelimiterFilter which was just added to the latest schema: [2005-08-29 15:11:38.375] java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 673804 [2005-08-29 15:11:38.375]  at java.util.ArrayList.RangeCheck(ArrayList.java:547) 673805 [2005-08-29 15:11:38.375]  at java.util.ArrayList.get(ArrayList.java:322) 673806 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.addCombos(WordDelimiterFilter.java:349) 673807 [2005-08-29 15:11:38.375]  at solr.analysis.WordDelimiterFilter.next(WordDelimiterFilter.java:325) 673808 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.LowerCaseFilter.next(LowerCaseFilter.java:32) 673809 [2005-08-29 15:11:38.375]  at org.apache.lucene.analysis.StopFilter.next(StopFilter.java:98) 673810 [2005-08-29 15:11:38.375]  at solr.EnglishPorterFilter.next(TokenizerFactory.java:163) 673811 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.invertDocument(DocumentWriter.java:143) 673812 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.DocumentWriter.addDocument(DocumentWriter.java:81) 673813 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:307) 673814 [2005-08-29 15:11:38.375]  at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:294) 673815 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.doAdd(DirectUpdateHandler2.java:170) 673816 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.overwriteBoth(DirectUpdateHandler2.java:317) 673817 [2005-08-29 15:11:38.375]  at solr.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:191) 673818 [2005-08-29 15:11:38.375]  at solr.SolrCore.update(SolrCore.java:795) 673819 [2005-08-29 15:11:38.375]  at solrserver.SolrServlet.doPost(SolrServlet.java:71) 673820 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:154) 673821 [2005-08-29 15:11:38.375]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:92) 673822 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletFilterChain.doFilter(ServletFilterChain.java:99) 673823 [2005-08-29 15:11:38.375]  at com.caucho.server.cache.CacheFilterChain.doFilter(CacheFilterChain.java:188) 673824 [2005-08-29 15:11:38.375]  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:163) 673825 [2005-08-29 15:11:38.375]  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:208) 673826 [2005-08-29 15:11:38.375]  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:259) 673827 [2005-08-29 15:11:38.375]  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:363) 673828 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.runTasks(ThreadPool.java:490) 673829 [2005-08-29 15:11:38.375]  at com.caucho.util.ThreadPool.run(ThreadPool.java:423) 673830 [2005-08-29 15:11:38.375]  at java.lang.Thread.run(Thread.java:595) With the previous schema I'm able to perform a successful full build: http://c12-ssa-dev40-so-mas1.cnet.com:5078/select/?stylesheet=q=docTypeversion=2.0start=0rows=10indent=on Do you want to rollback to the previous schema version</field></doc></add>\");\n\n\n    // \n\n    assertU(\"<delete fromPending=\\\"true\\\" fromCommitted=\\\"true\\\"><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"fname_s\\\">Yonik</field><field name=\\\"here_b\\\">true</field><field name=\\\"iq_l\\\">10000000000</field><field name=\\\"description_t\\\">software engineer</field><field name=\\\"ego_d\\\">1e100</field><field name=\\\"pi_f\\\">3.1415962</field><field name=\\\"when_dt\\\">2005-03-18T01:14:34Z</field><field name=\\\"arr_f\\\">1.414213562</field><field name=\\\"arr_f\\\">.999</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,arr_f  \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"fname_s,score\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']\"\n            ,\"//float[.='2.9459102']\"\n            );\n\n    // test addition of score field\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"*,score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"//float[@name='score'] \"\n            ,\"*[count(//doc/*)>=13]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"* \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//str[.='Yonik']  \"\n            ,\"//float[.='1.4142135'] \"\n            ,\"*[count(//doc/*)>=12]\"\n            );\n\n    // test maxScore\n\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score \");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 10, args);\n    assertQ(req\n            ,\"//@maxScore = //doc/float[@name='score']\"\n            );\n    args = new HashMap<String,String>();\n    args.put(\"fl\",\"score\");\n    args.put(\"defType\",\"lucenePlusSort\");\n    req = new LocalSolrQueryRequest(h.getCore(), \"id:44;id desc;\",\n                                    \"standard\", 0, 0 , args);\n    assertQ(req\n            ,\"//result[@maxScore>0]\"\n            );\n\n\n    //  test schema field attribute inheritance and overriding\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbestored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbestored']\"\n            );\n    assertQ(req(\"+id:44 +shouldbestored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunstored\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"not(//*[@name='shouldbeunstored'])\"\n            );\n    assertQ(req(\"+id:44 +shouldbeunstored:hi\")\n            ,\"//*[@numFound='1']\"\n            );\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"shouldbeunindexed\\\">hi</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:44\")\n            ,\"//*[@name='shouldbeunindexed']\"\n            );\n    //  this should result in an error... how to check for that?\n\n    // +id:44 +shouldbeunindexed:hi %//*[@numFound=\"0\"]\n\n\n    // test spaces between XML elements because that can introduce extra XML events that\n\n    // can mess up parsing (and it has in the past)\n\n    assertU(\"  <delete>  <id>44</id>  </delete>\");\n    assertU(\"  <add>  <doc>  <field name=\\\"id\\\">44</field>  <field name=\\\"shouldbestored\\\">hi</field>  </doc>  </add>\");\n    assertU(\"  <commit />\");\n\n    // test adding multiple docs per add command\n\n    // assertU(\"<delete><query>id:[0 TO 99]</query></delete>\");\n    // assertU(\"<add><doc><field name=\\\"id\\\">1</field></doc><doc><field name=\\\"id\\\">2</field></doc></add>\");\n    // assertU(\"<commit/>\");\n    // assertQ(req(\"id:[0 TO 99]\")\n    // ,\"//*[@numFound='2']\"\n    // );\n\n    // test synonym filter\n\n    assertU(\"<delete><query>id:[10 TO 100]</query></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">10</field><field name=\\\"syn\\\">a</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">11</field><field name=\\\"syn\\\">b</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">12</field><field name=\\\"syn\\\">c</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">13</field><field name=\\\"syn\\\">foo</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"id:10 AND syn:a\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:10 AND syn:aa\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:11 AND syn:b2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c1\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:12 AND syn:c2\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:foo\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:bar\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"id:13 AND syn:baz\")\n            ,\"//*[@numFound='1']\"\n            );\n\n\n    // test position increment gaps between field values\n\n    assertU(\"<delete><id>44</id></delete>\");\n    assertU(\"<delete><id>45</id></delete>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">44</field><field name=\\\"textgap\\\">aa bb cc</field><field name=\\\"textgap\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<add><doc><field name=\\\"id\\\">45</field><field name=\\\"text\\\">aa bb cc</field><field name=\\\"text\\\">dd ee ff</field></doc></add>\");\n    assertU(\"<commit/>\");\n    assertQ(req(\"+id:44 +textgap:\\\"aa bb cc\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"dd ee ff\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"cc dd\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~90\")\n            ,\"//*[@numFound='0']\"\n            );\n    assertQ(req(\"+id:44 +textgap:\\\"bb cc dd ee\\\"~100\")\n            ,\"//*[@numFound='1']\"\n            );\n    assertQ(req(\"+id:45 +text:\\\"cc dd\\\"\")\n            ,\"//*[@numFound='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["00aaee1492907b0fd5421b6cf854a9eee5cd1326","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["be38a703c871957da90985efa821b44e1c05ad2c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","06389e6752ed5c525a831166a4bf86a798ed15f3"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c1c76c72faecc7c9b683ad67e99240c975ee37b3","00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"b5653af107efef582afd0bc6aff175972359fdd6":["2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","9001fdb834e467ef899e41c747c42b27b4d45099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a":["06389e6752ed5c525a831166a4bf86a798ed15f3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","9001fdb834e467ef899e41c747c42b27b4d45099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"70ad682703b8585f5d0a637efec044d57ec05efb":["06389e6752ed5c525a831166a4bf86a798ed15f3","b5653af107efef582afd0bc6aff175972359fdd6"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06389e6752ed5c525a831166a4bf86a798ed15f3":["432127b09840b2b70209e404d242e7029421ef0a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["9001fdb834e467ef899e41c747c42b27b4d45099"],"5f4e87790277826a2aea119328600dfb07761f32":["be38a703c871957da90985efa821b44e1c05ad2c","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"432127b09840b2b70209e404d242e7029421ef0a":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"be38a703c871957da90985efa821b44e1c05ad2c":["1da8d55113b689b06716246649de6f62430f15c0"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b5653af107efef582afd0bc6aff175972359fdd6"],"00aaee1492907b0fd5421b6cf854a9eee5cd1326":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"9001fdb834e467ef899e41c747c42b27b4d45099":["b5653af107efef582afd0bc6aff175972359fdd6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1c76c72faecc7c9b683ad67e99240c975ee37b3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","00aaee1492907b0fd5421b6cf854a9eee5cd1326","d619839baa8ce5503e496b94a9e42ad6f079293f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["5f4e87790277826a2aea119328600dfb07761f32","432127b09840b2b70209e404d242e7029421ef0a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["be38a703c871957da90985efa821b44e1c05ad2c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b5653af107efef582afd0bc6aff175972359fdd6":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","9001fdb834e467ef899e41c747c42b27b4d45099"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a":["b5653af107efef582afd0bc6aff175972359fdd6"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"06389e6752ed5c525a831166a4bf86a798ed15f3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2c5b41c4c1cb769262a6793a8d940bc9ab7a7e9a","70ad682703b8585f5d0a637efec044d57ec05efb"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["c1c76c72faecc7c9b683ad67e99240c975ee37b3"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"432127b09840b2b70209e404d242e7029421ef0a":["06389e6752ed5c525a831166a4bf86a798ed15f3"],"be38a703c871957da90985efa821b44e1c05ad2c":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","5f4e87790277826a2aea119328600dfb07761f32"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"00aaee1492907b0fd5421b6cf854a9eee5cd1326":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"9001fdb834e467ef899e41c747c42b27b4d45099":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","2e10cb22a8bdb44339e282925a29182bb2f3174d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}