{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#PhraseQuery(int,Term[],int[]).mjava","commits":[{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#PhraseQuery(int,Term[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  private PhraseQuery(int slop, Term[] terms, int[] positions) {\n    if (terms.length != positions.length) {\n      throw new IllegalArgumentException(\"Must have as many terms as positions\");\n    }\n    if (slop < 0) {\n      throw new IllegalArgumentException(\"Slop must be >= 0, got \" + slop);\n    }\n    for (int i = 1; i < terms.length; ++i) {\n      if (terms[i-1].field().equals(terms[i].field()) == false) {\n        throw new IllegalArgumentException(\"All terms should have the same field\");\n      }\n    }\n    for (int position : positions) {\n      if (position < 0) {\n        throw new IllegalArgumentException(\"Positions must be >= 0, got \" + position);\n      }\n    }\n    for (int i = 1; i < positions.length; ++i) {\n      if (positions[i] < positions[i - 1]) {\n        throw new IllegalArgumentException(\"Positions should not go backwards, got \"\n            + positions[i-1] + \" before \" + positions[i]);\n      }\n    }\n    this.slop = slop;\n    this.terms = terms;\n    this.positions = positions;\n    this.field = terms.length == 0 ? null : terms[0].field();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e5512a32a3267c2258d80b01e5bca0e88f00b23","date":1563441036,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#PhraseQuery(int,Term[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#PhraseQuery(int,Term[],int[]).mjava","sourceNew":"  private PhraseQuery(int slop, Term[] terms, int[] positions) {\n    if (terms.length != positions.length) {\n      throw new IllegalArgumentException(\"Must have as many terms as positions\");\n    }\n    if (slop < 0) {\n      throw new IllegalArgumentException(\"Slop must be >= 0, got \" + slop);\n    }\n    for (Term term : terms) {\n      Objects.requireNonNull(term, \"Cannot add a null term to PhraseQuery\");\n    }\n    for (int i = 1; i < terms.length; ++i) {\n      if (terms[i-1].field().equals(terms[i].field()) == false) {\n        throw new IllegalArgumentException(\"All terms should have the same field\");\n      }\n    }\n    for (int position : positions) {\n      if (position < 0) {\n        throw new IllegalArgumentException(\"Positions must be >= 0, got \" + position);\n      }\n    }\n    for (int i = 1; i < positions.length; ++i) {\n      if (positions[i] < positions[i - 1]) {\n        throw new IllegalArgumentException(\"Positions should not go backwards, got \"\n            + positions[i-1] + \" before \" + positions[i]);\n      }\n    }\n    this.slop = slop;\n    this.terms = terms;\n    this.positions = positions;\n    this.field = terms.length == 0 ? null : terms[0].field();\n  }\n\n","sourceOld":"  private PhraseQuery(int slop, Term[] terms, int[] positions) {\n    if (terms.length != positions.length) {\n      throw new IllegalArgumentException(\"Must have as many terms as positions\");\n    }\n    if (slop < 0) {\n      throw new IllegalArgumentException(\"Slop must be >= 0, got \" + slop);\n    }\n    for (int i = 1; i < terms.length; ++i) {\n      if (terms[i-1].field().equals(terms[i].field()) == false) {\n        throw new IllegalArgumentException(\"All terms should have the same field\");\n      }\n    }\n    for (int position : positions) {\n      if (position < 0) {\n        throw new IllegalArgumentException(\"Positions must be >= 0, got \" + position);\n      }\n    }\n    for (int i = 1; i < positions.length; ++i) {\n      if (positions[i] < positions[i - 1]) {\n        throw new IllegalArgumentException(\"Positions should not go backwards, got \"\n            + positions[i-1] + \" before \" + positions[i]);\n      }\n    }\n    this.slop = slop;\n    this.terms = terms;\n    this.positions = positions;\n    this.field = terms.length == 0 ? null : terms[0].field();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e5512a32a3267c2258d80b01e5bca0e88f00b23":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e5512a32a3267c2258d80b01e5bca0e88f00b23"]},"commit2Childs":{"2e5512a32a3267c2258d80b01e5bca0e88f00b23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e1499c5d26c936238506df90a3c02c76707722":["2e5512a32a3267c2258d80b01e5bca0e88f00b23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}