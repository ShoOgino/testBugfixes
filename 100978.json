{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed50c8be6f41a006d8f93268765de9ad91908419","date":1340353054,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d","date":1405005344,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField[] fields = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        StoredDocument d = ir.document(docNum);\n        StorableField[] fields = d.getFields(fieldName);\n        for (StorableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {\n    Map<String, Map<String, Int>> field2termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField[] fields = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), field2termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(field2termFreqMap, vector, fieldName);\n      }\n    }\n\n    return createQueue(field2termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField[] fields = d.getFields(fieldName);\n        for (IndexableField field : fields) {\n          final String stringValue = field.stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e141595402370bee958745de8b1c9de1fa182581","a783b442a82f3411d699e27aad4986f29e73aa43"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["ed50c8be6f41a006d8f93268765de9ad91908419","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ed50c8be6f41a006d8f93268765de9ad91908419":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ed50c8be6f41a006d8f93268765de9ad91908419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e562682007e295029696e354ac6947531b083c79":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["ed50c8be6f41a006d8f93268765de9ad91908419"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e562682007e295029696e354ac6947531b083c79"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ed50c8be6f41a006d8f93268765de9ad91908419","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ed50c8be6f41a006d8f93268765de9ad91908419":["1d028314cced5858683a1bb4741423d0f934257b","fe33227f6805edab2036cbb80645cc4e2d1fa424","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"e562682007e295029696e354ac6947531b083c79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e562682007e295029696e354ac6947531b083c79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}