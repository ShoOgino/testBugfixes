{"path":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","commits":[{"id":"025721dff6f9cdee2edd999c6f0680d82fd736e2","date":1503371271,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FailoverZKtest#testRestartZkWhenClusterDown().mjava","sourceNew":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      ChaosMonkey.stop(runner);\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          ChaosMonkey.start(runner);\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 1));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","sourceOld":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      ChaosMonkey.stop(runner);\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          ChaosMonkey.start(runner);\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 1));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","pathOld":"/dev/null","sourceNew":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      ChaosMonkey.stop(runner);\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          ChaosMonkey.start(runner);\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 1));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","sourceNew":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(coll, 2, 2);\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      runner.stop();\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          runner.start();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run(false);\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 2));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","sourceOld":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      ChaosMonkey.stop(runner);\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          ChaosMonkey.start(runner);\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 1));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","bugFix":["a73a633911940a9a6b39b4da22b965b33efe8ed6"],"bugIntro":["1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936","date":1600966684,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkFailoverTest#testRestartZkWhenClusterDown().mjava","sourceNew":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(coll, 2, 2);\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    zkTestServer = cluster.getZkServer();\n\n    // This attempt will fail since it will timeout after 1 second\n    System.setProperty(\"waitForZk\", \"1\");\n    restartSolrAndZk();\n    waitForLiveNodes(0);\n\n    // This attempt will succeed since there will be enough time to connect\n    System.setProperty(\"waitForZk\", \"20\");\n    restartSolrAndZk();\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 2));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","sourceOld":"  public void testRestartZkWhenClusterDown() throws Exception {\n    String coll = \"coll1\";\n    CollectionAdminRequest.createCollection(coll, 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(coll, 2, 2);\n    cluster.getSolrClient().add(coll, new SolrInputDocument(\"id\", \"1\"));\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      runner.stop();\n    }\n    ZkTestServer zkTestServer = cluster.getZkServer();\n    zkTestServer.shutdown();\n    Thread[] threads = new Thread[cluster.getJettySolrRunners().size()];\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      final JettySolrRunner runner = cluster.getJettySolrRunner(i);\n      threads[i] = new Thread(() -> {\n        try {\n          runner.start();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n        });\n      threads[i].start();\n    }\n    Thread.sleep(5000);\n    zkTestServer = new ZkTestServer(zkTestServer.getZkDir(), zkTestServer.getPort());\n    zkTestServer.run(false);\n    for (Thread thread : threads) {\n      thread.join();\n    }\n    waitForLiveNodes(2);\n    waitForState(\"Timeout waiting for \" + coll, coll, clusterShape(2, 2));\n    QueryResponse rsp = new QueryRequest(new SolrQuery(\"*:*\")).process(cluster.getSolrClient(), coll);\n    assertEquals(1, rsp.getResults().getNumFound());\n    zkTestServer.shutdown();\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a73a633911940a9a6b39b4da22b965b33efe8ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"025721dff6f9cdee2edd999c6f0680d82fd736e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","025721dff6f9cdee2edd999c6f0680d82fd736e2"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["025721dff6f9cdee2edd999c6f0680d82fd736e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936"]},"commit2Childs":{"025721dff6f9cdee2edd999c6f0680d82fd736e2":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["025721dff6f9cdee2edd999c6f0680d82fd736e2","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"1c588f16cab976d98d9c0f04dbc6b8cdd8c9d936":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}