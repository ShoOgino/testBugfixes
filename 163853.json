{"path":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","commits":[{"id":"56b81df095c14686efbc8ec09364a4a2d5f7db03","date":1458138880,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}.\n   *  @see PointValues#getDocCount(String) */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      if (values != null) {\n        count += values.getDocCount(field);\n      }\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b05a409e5eb9e8760959992d595ca2c67cc9638","date":1461750064,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","sourceNew":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}. Leaves that do not have points for the\n   * given field are ignored.\n   *  @see PointValues#getDocCount(String) */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      count += values.getDocCount(field);\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}.\n   *  @see PointValues#getDocCount(String) */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      if (values != null) {\n        count += values.getDocCount(field);\n      }\n    }\n    return count;\n  }\n\n","bugFix":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","sourceNew":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}. Leaves that do not have points for the\n   * given field are ignored.\n   *  @see PointValues#getDocCount() */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values != null) {\n        count += values.getDocCount();\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}. Leaves that do not have points for the\n   * given field are ignored.\n   *  @see PointValues#getDocCount(String) */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      count += values.getDocCount(field);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValues#getDocCount(IndexReader,String).mjava","sourceNew":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}. Leaves that do not have points for the\n   * given field are ignored.\n   *  @see PointValues#getDocCount() */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      PointValues values = ctx.reader().getPointValues(field);\n      if (values != null) {\n        count += values.getDocCount();\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Return the cumulated number of docs that have points across all leaves\n   * of the given {@link IndexReader}. Leaves that do not have points for the\n   * given field are ignored.\n   *  @see PointValues#getDocCount(String) */\n  public static int getDocCount(IndexReader reader, String field) throws IOException {\n    int count = 0;\n    for (LeafReaderContext ctx : reader.leaves()) {\n      FieldInfo info = ctx.reader().getFieldInfos().fieldInfo(field);\n      if (info == null || info.getPointDimensionCount() == 0) {\n        continue;\n      }\n      PointValues values = ctx.reader().getPointValues();\n      count += values.getDocCount(field);\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2b05a409e5eb9e8760959992d595ca2c67cc9638","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["56b81df095c14686efbc8ec09364a4a2d5f7db03"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["2b05a409e5eb9e8760959992d595ca2c67cc9638"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2b05a409e5eb9e8760959992d595ca2c67cc9638":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}