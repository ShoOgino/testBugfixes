{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testSplitShard().mjava","sourceNew":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n    \n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n    \n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n    \n  }\n\n","sourceOld":"  protected void testSplitShard() throws Exception {\n    String collectionName = \"solrj_test_splitshard\";\n    cloudClient.setDefaultCollection(collectionName);\n    \n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setConfigName(\"conf1\")\n            .setNumShards(2)\n            .setCollectionName(collectionName);\n    createCollectionRequest.process(cloudClient);\n    \n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\");\n    CollectionAdminResponse response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    // Test splitting using split.key\n    splitShardRequest = new CollectionAdminRequest.SplitShard()\n            .setCollectionName(collectionName)\n            .setSplitKey(\"b!\");\n    response = splitShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    waitForThingsToLevelOut(10);\n    \n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    assertEquals(\"ClusterState: \"+ clusterState.getActiveSlices(collectionName), 5, slices.size());  \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n    \n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_0\" , Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_1\" , Replica.Type.NRT, 1)).get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_0\" , Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_1\" , Replica.Type.NRT, 1)).get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shard1_1_replica1\").get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n    \n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    int shard10 = 0;\n    int shard11 = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"_shard1_0\")) shard10++;\n      else shard11++;\n    }\n    assertEquals(1, shard10);\n    assertEquals(1, shard11);\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_0\" , Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_1\" , Replica.Type.NRT, 1)).get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    int shard10 = 0;\n    int shard11 = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"_shard1_0\")) shard10++;\n      else shard11++;\n    }\n    assertEquals(1, shard10);\n    assertEquals(1, shard11);\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_0\" , Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_1\" , Replica.Type.NRT, 1)).get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    int shard10 = 0;\n    int shard11 = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"_shard1_0\")) shard10++;\n      else shard11++;\n    }\n    assertEquals(1, shard10);\n    assertEquals(1, shard11);\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_0\" , Replica.Type.NRT, 1)).get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(Assign.buildCoreName(collectionName, \"shard1_1\" , Replica.Type.NRT, 1)).get(\"status\"));\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testSplitShard().mjava","sourceNew":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    \n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    int shard10 = 0;\n    int shard11 = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"_shard1_0\")) shard10++;\n      else shard11++;\n    }\n    assertEquals(1, shard10);\n    assertEquals(1, shard11);\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShard() throws Exception {\n\n    final String collectionName = \"solrj_test_splitshard\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    int shard10 = 0;\n    int shard11 = 0;\n    for (String coreName : coresStatus.keySet()) {\n      assertEquals(0, (int) coresStatus.get(coreName).get(\"status\"));\n      if (coreName.contains(\"_shard1_0\")) shard10++;\n      else shard11++;\n    }\n    assertEquals(1, shard10);\n    assertEquals(1, shard11);\n\n    waitForState(\"Expected all shards to be active and parent shard to be removed\", collectionName, (n, c) -> {\n      if (c.getSlice(\"shard1\").getState() == Slice.State.ACTIVE)\n        return false;\n      for (Replica r : c.getReplicas()) {\n        if (r.isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // Test splitting using split.key\n    response = CollectionAdminRequest.splitShard(collectionName)\n        .setSplitKey(\"b!\")\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected 5 slices to be active\", collectionName, (n, c) -> c.getActiveSlices().size() == 5);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e021e73178a0be1b0ff15a0894796c23f0556144"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","61c45e99cf6676da48f19d7511c73712ad39402b"],"a52341299179de5479672f7cf518bf4b173f34b3":["61c45e99cf6676da48f19d7511c73712ad39402b","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"e021e73178a0be1b0ff15a0894796c23f0556144":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"61c45e99cf6676da48f19d7511c73712ad39402b":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"922ddd897402a6df25c766ea8300443be5e82b3d":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144"],"e021e73178a0be1b0ff15a0894796c23f0556144":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}