{"path":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","commits":[{"id":"27540936a0520bb54b2173565e1d0b473602e47f","date":1342641911,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    int iter = atLeast(20);\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      // TODO: randomly do a reload\n      // but the test currently fails without this!\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    int iter = atLeast(20);\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      // TODO: randomly do a reload\n      // but the test currently fails without this!\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9767265f21f7d1246b13dd7e73e8a4ad88b4384","date":1342986300,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertU(commit(\"softCommit\",\"true\"));   // should cause a RTG searcher to be opened\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    h.reload();\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    Random rand = random();\n    int iter = atLeast(20);\n\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! add\");\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          // System.out.println(\"!!! flush\");\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          boolean softCommit = rand.nextBoolean();\n          System.out.println(\"!!! softCommit\" + softCommit);\n          // assertU(commit(\"softCommit\", \"\"+softCommit));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        // System.out.println(\"!!! rtg\");\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        // System.out.println(\"!!! q\");\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! reload\");\n        h.reload();\n      }\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    int iter = atLeast(20);\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      // TODO: randomly do a reload\n      // but the test currently fails without this!\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","bugFix":["27540936a0520bb54b2173565e1d0b473602e47f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertU(commit(\"softCommit\",\"true\"));   // should cause a RTG searcher to be opened\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    h.reload();\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    Random rand = random();\n    int iter = atLeast(20);\n\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! add\");\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          // System.out.println(\"!!! flush\");\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          boolean softCommit = rand.nextBoolean();\n          System.out.println(\"!!! softCommit\" + softCommit);\n          // assertU(commit(\"softCommit\", \"\"+softCommit));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        // System.out.println(\"!!! rtg\");\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        // System.out.println(\"!!! q\");\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! reload\");\n        h.reload();\n      }\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n   //  h.getCoreContainer().reload(h.getCore().getName());\n\n    assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened\n\n    // should also use the RTG searcher (commit should have cleared the translog cache)\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    h.getCoreContainer().reload(h.getCore().getName());\n\n    Random rand = random();\n    int iter = atLeast(20);\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          assertU(commit(\"softCommit\", \"\"+rand.nextBoolean()));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      // TODO: randomly do a reload\n      // but the test currently fails without this!\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertU(commit(\"softCommit\",\"true\"));   // should cause a RTG searcher to be opened\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    h.reload();\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    Random rand = random();\n    int iter = atLeast(20);\n\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! add\");\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          // System.out.println(\"!!! flush\");\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          boolean softCommit = rand.nextBoolean();\n          System.out.println(\"!!! softCommit\" + softCommit);\n          // assertU(commit(\"softCommit\", \"\"+softCommit));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        // System.out.println(\"!!! rtg\");\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        // System.out.println(\"!!! q\");\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! reload\");\n        h.reload();\n      }\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestReload#testGetRealtimeReload().mjava","sourceNew":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertU(commit(\"softCommit\",\"true\"));   // should cause a RTG searcher to be opened\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\", \"id,_version_\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    h.reload();\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\", \"id,_version_\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    Random rand = random();\n    int iter = atLeast(20);\n\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! add\");\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          // System.out.println(\"!!! flush\");\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          boolean softCommit = rand.nextBoolean();\n          System.out.println(\"!!! softCommit\" + softCommit);\n          // assertU(commit(\"softCommit\", \"\"+softCommit));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        // System.out.println(\"!!! rtg\");\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\", \"fl\", \"id,_version_\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        // System.out.println(\"!!! q\");\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! reload\");\n        h.reload();\n      }\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","sourceOld":"  @Test\n  public void testGetRealtimeReload() throws Exception {\n    clearIndex();\n    assertU(commit());\n    long version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n\n    assertU(commit(\"softCommit\",\"true\"));   // should cause a RTG searcher to be opened\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    h.reload();\n\n    assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n        ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n    );\n\n    assertU(commit(\"softCommit\",\"true\"));   // open a normal (caching) NRT searcher\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n\n    Random rand = random();\n    int iter = atLeast(20);\n\n    for (int i=0; i<iter; i++) {\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! add\");\n        version = addAndGetVersion(sdoc(\"id\",\"1\") , null);\n      }\n\n      if (rand.nextBoolean()) {\n        if (rand.nextBoolean()) {\n          // System.out.println(\"!!! flush\");\n          assertU(commit(\"openSearcher\",\"false\"));   // should cause a RTG searcher to be opened as well\n        } else {\n          boolean softCommit = rand.nextBoolean();\n          System.out.println(\"!!! softCommit\" + softCommit);\n          // assertU(commit(\"softCommit\", \"\"+softCommit));\n        }\n      }\n\n      if (rand.nextBoolean()) {\n        // RTG should always be able to see the last version\n        // System.out.println(\"!!! rtg\");\n        assertJQ(req(\"qt\",\"/get\",\"id\",\"1\")\n            ,\"=={'doc':{'id':'1','_version_':\" + version + \"}}\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // a normal search should always find 1 doc\n        // System.out.println(\"!!! q\");\n        assertJQ(req(\"q\",\"id:1\")\n            ,\"/response/numFound==1\"\n        );\n      }\n\n      if (rand.nextBoolean()) {\n        // System.out.println(\"!!! reload\");\n        h.reload();\n      }\n    }\n\n    // test framework should ensure that all searchers opened have been closed.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27540936a0520bb54b2173565e1d0b473602e47f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27540936a0520bb54b2173565e1d0b473602e47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["27540936a0520bb54b2173565e1d0b473602e47f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"]},"commit2Childs":{"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","27540936a0520bb54b2173565e1d0b473602e47f"],"27540936a0520bb54b2173565e1d0b473602e47f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["aa4f44656c8081bbc63325a83abdb025eafd5a2b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}