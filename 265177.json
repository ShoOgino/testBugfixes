{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\r\n   * \r\n   * @param terms\r\n   *          Map to place created WeightedSpanTerms in\r\n   * @param spanQuery\r\n   *          SpanQuery to extract Terms from\r\n   * @throws IOException\r\n   */\r\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\r\n    Set nonWeightedTerms = new HashSet();\r\n    spanQuery.extractTerms(nonWeightedTerms);\r\n\r\n    Set fieldNames;\r\n\r\n    if (fieldName == null) {\r\n      fieldNames = new HashSet();\r\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n        Term queryTerm = (Term) iter.next();\r\n        fieldNames.add(queryTerm.field());\r\n      }\r\n    } else {\r\n      fieldNames = new HashSet(1);\r\n      fieldNames.add(fieldName);\r\n    }\r\n    // To support the use of the default field name\r\n    if (defaultField != null) {\r\n      fieldNames.add(defaultField);\r\n    }\r\n\r\n    Iterator it = fieldNames.iterator();\r\n    List spanPositions = new ArrayList();\r\n\r\n    while (it.hasNext()) {\r\n      String field = (String) it.next();\r\n\r\n      IndexReader reader = getReaderForField(field);\r\n      Spans spans = spanQuery.getSpans(reader);\r\n\r\n      // collect span positions\r\n      while (spans.next()) {\r\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\r\n      }\r\n\r\n      cachedTokenFilter.reset();\r\n    }\r\n\r\n    if (spanPositions.size() == 0) {\r\n      // no spans found\r\n      return;\r\n    }\r\n\r\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n      Term queryTerm = (Term) iter.next();\r\n\r\n      if (fieldNameComparator(queryTerm.field())) {\r\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\r\n\r\n        if (weightedSpanTerm == null) {\r\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\r\n          weightedSpanTerm.addPositionSpans(spanPositions);\r\n          weightedSpanTerm.positionSensitive = true;\r\n          terms.put(queryTerm.text(), weightedSpanTerm);\r\n        } else {\r\n          if (spanPositions.size() > 0) {\r\n            weightedSpanTerm.addPositionSpans(spanPositions);\r\n            weightedSpanTerm.positionSensitive = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f","date":1211715535,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet();\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n        Term queryTerm = (Term) iter.next();\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    Iterator it = fieldNames.iterator();\n    List spanPositions = new ArrayList();\n\n    while (it.hasNext()) {\n      String field = (String) it.next();\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n\n      cachedTokenFilter.reset();\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\r\n   * \r\n   * @param terms\r\n   *          Map to place created WeightedSpanTerms in\r\n   * @param spanQuery\r\n   *          SpanQuery to extract Terms from\r\n   * @throws IOException\r\n   */\r\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\r\n    Set nonWeightedTerms = new HashSet();\r\n    spanQuery.extractTerms(nonWeightedTerms);\r\n\r\n    Set fieldNames;\r\n\r\n    if (fieldName == null) {\r\n      fieldNames = new HashSet();\r\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n        Term queryTerm = (Term) iter.next();\r\n        fieldNames.add(queryTerm.field());\r\n      }\r\n    } else {\r\n      fieldNames = new HashSet(1);\r\n      fieldNames.add(fieldName);\r\n    }\r\n    // To support the use of the default field name\r\n    if (defaultField != null) {\r\n      fieldNames.add(defaultField);\r\n    }\r\n\r\n    Iterator it = fieldNames.iterator();\r\n    List spanPositions = new ArrayList();\r\n\r\n    while (it.hasNext()) {\r\n      String field = (String) it.next();\r\n\r\n      IndexReader reader = getReaderForField(field);\r\n      Spans spans = spanQuery.getSpans(reader);\r\n\r\n      // collect span positions\r\n      while (spans.next()) {\r\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\r\n      }\r\n\r\n      cachedTokenFilter.reset();\r\n    }\r\n\r\n    if (spanPositions.size() == 0) {\r\n      // no spans found\r\n      return;\r\n    }\r\n\r\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n      Term queryTerm = (Term) iter.next();\r\n\r\n      if (fieldNameComparator(queryTerm.field())) {\r\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\r\n\r\n        if (weightedSpanTerm == null) {\r\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\r\n          weightedSpanTerm.addPositionSpans(spanPositions);\r\n          weightedSpanTerm.positionSensitive = true;\r\n          terms.put(queryTerm.text(), weightedSpanTerm);\r\n        } else {\r\n          if (spanPositions.size() > 0) {\r\n            weightedSpanTerm.addPositionSpans(spanPositions);\r\n            weightedSpanTerm.positionSensitive = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":["296b8b38a87feb478921f77834a2302dfe77641c"],"bugIntro":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet();\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n        Term queryTerm = (Term) iter.next();\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    Iterator it = fieldNames.iterator();\n    List spanPositions = new ArrayList();\n\n    while (it.hasNext()) {\n      String field = (String) it.next();\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet();\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n        Term queryTerm = (Term) iter.next();\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    Iterator it = fieldNames.iterator();\n    List spanPositions = new ArrayList();\n\n    while (it.hasNext()) {\n      String field = (String) it.next();\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n\n      cachedTokenFilter.reset();\n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      for (final Term queryTerm : nonWeightedTerms) {\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet();\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n        Term queryTerm = (Term) iter.next();\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    Iterator it = fieldNames.iterator();\n    List spanPositions = new ArrayList();\n\n    while (it.hasNext()) {\n      String field = (String) it.next();\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f":["296b8b38a87feb478921f77834a2302dfe77641c"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"296b8b38a87feb478921f77834a2302dfe77641c":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}