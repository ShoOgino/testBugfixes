{"path":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","commits":[{"id":"4507f887015ed704dfc72ce14e0b23ce086865e0","date":1224523169,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile, String comment) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","sourceNew":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile, String comment) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet getWordSet(File wordfile, String comment) throws IOException {\n    HashSet result = new HashSet();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","sourceNew":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile, String comment) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile, String comment) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      result = getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(File,String).mjava","sourceNew":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile, String comment) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a text file and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the file should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param wordfile File containing the wordlist\n   * @param comment The comment string to ignore\n   * @return A HashSet with the file's words\n   */\n  public static HashSet<String> getWordSet(File wordfile, String comment) throws IOException {\n    FileReader reader = null;\n    try {\n      reader = new FileReader(wordfile);\n      return getWordSet(reader, comment);\n    }\n    finally {\n      if (reader != null)\n        reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["4507f887015ed704dfc72ce14e0b23ce086865e0"],"ddc5fbfd4c64963aba52713a4496522540294d69":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"4507f887015ed704dfc72ce14e0b23ce086865e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ddc5fbfd4c64963aba52713a4496522540294d69"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4507f887015ed704dfc72ce14e0b23ce086865e0"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["ddc5fbfd4c64963aba52713a4496522540294d69"],"ddc5fbfd4c64963aba52713a4496522540294d69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4507f887015ed704dfc72ce14e0b23ce086865e0":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}