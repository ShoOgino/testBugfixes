{"path":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":null,"sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#processWord(char[],int,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":"  private void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    \n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    \n    if (length < minWordLength) {\n      return;\n    }\n    \n    if (okPrefix != null) {\n      for (char[] prefix : okPrefix) {\n        if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n          boolean match = true;\n          for (int i = 0; i < prefix.length; i++) {\n            if (prefix[i] != buffer[offset + i]) {\n              match = false;\n              break;\n            }\n          }\n          if (match == true) {\n            return;\n          }\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#processWord(char[],int,int,int).mjava","sourceNew":null,"sourceOld":"  public void processWord(char[] buffer, int offset, int length, int wordCount) {\n    if (length < 1) {\n      return;\n    }\n    if (onlyFirstWord && wordCount > 0) {\n      for (int i = 0; i < length; i++) {\n        buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n\n      }\n      return;\n    }\n\n    if (keep != null && keep.contains(buffer, offset, length)) {\n      if (wordCount == 0 && forceFirstLetter) {\n        buffer[offset] = Character.toUpperCase(buffer[offset]);\n      }\n      return;\n    }\n    if (length < minWordLength) {\n      return;\n    }\n    for (char[] prefix : okPrefix) {\n      if (length >= prefix.length) { //don't bother checking if the buffer length is less than the prefix\n        boolean match = true;\n        for (int i = 0; i < prefix.length; i++) {\n          if (prefix[i] != buffer[offset + i]) {\n            match = false;\n            break;\n          }\n        }\n        if (match == true) {\n          return;\n        }\n      }\n    }\n\n    // We know it has at least one character\n    /*char[] chars = w.toCharArray();\n    StringBuilder word = new StringBuilder( w.length() );\n    word.append( Character.toUpperCase( chars[0] ) );*/\n    buffer[offset] = Character.toUpperCase(buffer[offset]);\n\n    for (int i = 1; i < length; i++) {\n      buffer[offset + i] = Character.toLowerCase(buffer[offset + i]);\n    }\n    //return word.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}