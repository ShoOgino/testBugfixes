{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","pathOld":"/dev/null","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":null,"sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}