{"path":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final int payloadLength = postingsEnum.getPayloadLength();\n          final BytesRef payload;\n          if (payloadLength > 0) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c4531fadbecf73a7716fdf5cd742463e866e84e","date":1273851662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final int payloadLength = postingsEnum.getPayloadLength();\n          final BytesRef payload;\n          if (payloadLength > 0) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n        totTF++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","bugFix":null,"bugIntro":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n        totTF++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n        totTF++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public int merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return df;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.omitTermFreqAndPositions) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        this.startDoc(doc, postings.freq());\n        this.finishDoc();\n        df++;\n        totTF++;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["5c4531fadbecf73a7716fdf5cd742463e866e84e","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["5c4531fadbecf73a7716fdf5cd742463e866e84e","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"16843358872ed92ba92888ab99df297550b9a36a":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}