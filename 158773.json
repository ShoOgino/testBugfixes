{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String,boolean,boolean,boolean).mjava","commits":[{"id":"7a2ab9c07b4811bae96e992c901398ae4d50bc9e","date":1557972913,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testRptWithGeometryField(String fieldName, boolean testCache, boolean testHeatmap, boolean testPolygon) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    if (testCache) {\n      // The tricky thing is verifying the cache works correctly...\n\n      MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n      assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      // Repeat the query earlier\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      assertEquals(\"1 segment\",\n          1, getSearcher().getRawReader().leaves().size());\n      // Get key of first leaf reader -- this one contains the match for sure.\n      Object leafKey1 = getFirstLeafReaderKey();\n\n      // add new segment\n      assertU(adoc(\"id\", \"3\"));\n\n      assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n      // can still find the same document\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n      // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n      // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n      Object leafKey2 = getFirstLeafReaderKey();\n      assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n    }\n\n    if (testHeatmap) {\n      // Now try to see if heatmaps work:\n      assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n          \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n    }\n\n    if (testPolygon) {\n      String polygonWKT = \"POLYGON((-11 12, -11 11, 10.5 12, -11 12))\"; //right-angle triangle.  Counter-clockwise order\n      assertJQ(req(\n          \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(\" + polygonWKT + \")\",\n          \"sort\", \"id asc\"), \"/response/numFound==2\");\n\n      assertU(adoc(\"id\", \"9\",\n          fieldName, \"POLYGON((\" + // rectangle. Counter-clockwise order.\n              \"-118.080201721669 54.5864541583249,\" +\n              \"-118.080078279314 54.5864541583249,\" +\n              \"-118.080078279314 54.5865258517606,\" +\n              \"-118.080201721669 54.5865258517606,\" +\n              \"-118.080201721669 54.5864541583249))\" ));\n      assertU(commit());\n      // should NOT match\n      assertJQ(req(\"q\", fieldName+\":[55.0260828,-115.5085624 TO 55.02646,-115.507337]\"),\n          \"/response/numFound==0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String,boolean,boolean,boolean).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName, boolean testCache, boolean testHeatmap, boolean testPolygon) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    if (testCache) {\n      // The tricky thing is verifying the cache works correctly...\n\n      MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n      assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      // Repeat the query earlier\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      assertEquals(\"1 segment\",\n          1, getSearcher().getRawReader().leaves().size());\n      // Get key of first leaf reader -- this one contains the match for sure.\n      Object leafKey1 = getFirstLeafReaderKey();\n\n      // add new segment\n      assertU(adoc(\"id\", \"3\"));\n\n      assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n      // can still find the same document\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n      // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n      // (i.e. the cache instance is new but it should've been regenerated from the old one).\n      // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n      Object leafKey2 = getFirstLeafReaderKey();\n      // get the current instance of metrics - the old one may not represent the current cache instance\n      cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n      assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n    }\n\n    if (testHeatmap) {\n      // Now try to see if heatmaps work:\n      assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n          \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n    }\n\n    if (testPolygon) {\n      String polygonWKT = \"POLYGON((-11 12, -11 11, 10.5 12, -11 12))\"; //right-angle triangle.  Counter-clockwise order\n      assertJQ(req(\n          \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(\" + polygonWKT + \")\",\n          \"sort\", \"id asc\"), \"/response/numFound==2\");\n\n      assertU(adoc(\"id\", \"9\",\n          fieldName, \"POLYGON((\" + // rectangle. Counter-clockwise order.\n              \"-118.080201721669 54.5864541583249,\" +\n              \"-118.080078279314 54.5864541583249,\" +\n              \"-118.080078279314 54.5865258517606,\" +\n              \"-118.080201721669 54.5865258517606,\" +\n              \"-118.080201721669 54.5864541583249))\" ));\n      assertU(commit());\n      // should NOT match\n      assertJQ(req(\"q\", fieldName+\":[55.0260828,-115.5085624 TO 55.02646,-115.507337]\"),\n          \"/response/numFound==0\");\n    }\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName, boolean testCache, boolean testHeatmap, boolean testPolygon) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    if (testCache) {\n      // The tricky thing is verifying the cache works correctly...\n\n      MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n      assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      // Repeat the query earlier\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n      assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n      assertEquals(\"1 segment\",\n          1, getSearcher().getRawReader().leaves().size());\n      // Get key of first leaf reader -- this one contains the match for sure.\n      Object leafKey1 = getFirstLeafReaderKey();\n\n      // add new segment\n      assertU(adoc(\"id\", \"3\"));\n\n      assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n      // can still find the same document\n      assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n      // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n      // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n      Object leafKey2 = getFirstLeafReaderKey();\n      assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n    }\n\n    if (testHeatmap) {\n      // Now try to see if heatmaps work:\n      assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n          \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n    }\n\n    if (testPolygon) {\n      String polygonWKT = \"POLYGON((-11 12, -11 11, 10.5 12, -11 12))\"; //right-angle triangle.  Counter-clockwise order\n      assertJQ(req(\n          \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(\" + polygonWKT + \")\",\n          \"sort\", \"id asc\"), \"/response/numFound==2\");\n\n      assertU(adoc(\"id\", \"9\",\n          fieldName, \"POLYGON((\" + // rectangle. Counter-clockwise order.\n              \"-118.080201721669 54.5864541583249,\" +\n              \"-118.080078279314 54.5864541583249,\" +\n              \"-118.080078279314 54.5865258517606,\" +\n              \"-118.080201721669 54.5865258517606,\" +\n              \"-118.080201721669 54.5864541583249))\" ));\n      assertU(commit());\n      // should NOT match\n      assertJQ(req(\"q\", fieldName+\":[55.0260828,-115.5085624 TO 55.02646,-115.507337]\"),\n          \"/response/numFound==0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["7a2ab9c07b4811bae96e992c901398ae4d50bc9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a2ab9c07b4811bae96e992c901398ae4d50bc9e"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}