{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e74546db799fc6f708fb74c45693c303e8a1812a","date":1398178381,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        @SuppressWarnings(\"resource\") // silly, both directories are closed in the end\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        @SuppressWarnings(\"resource\") // silly, both directories are closed in the end\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testOpen().mjava","sourceNew":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        @SuppressWarnings(\"resource\") // silly, both directories are closed in the end\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.close();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOpen() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      for (Entry<String,List<RevisionFile>> e : rev.getSourceFiles().entrySet()) {\n        String source = e.getKey();\n        @SuppressWarnings(\"resource\") // silly, both directories are closed in the end\n        Directory dir = source.equals(IndexAndTaxonomyRevision.INDEX_SOURCE) ? indexDir : taxoDir;\n        for (RevisionFile file : e.getValue()) {\n          IndexInput src = dir.openInput(file.fileName, IOContext.READONCE);\n          InputStream in = rev.open(source, file.fileName);\n          assertEquals(src.length(), in.available());\n          byte[] srcBytes = new byte[(int) src.length()];\n          byte[] inBytes = new byte[(int) src.length()];\n          int offset = 0;\n          if (random().nextBoolean()) {\n            int skip = random().nextInt(10);\n            if (skip >= src.length()) {\n              skip = 0;\n            }\n            in.skip(skip);\n            src.seek(skip);\n            offset = skip;\n          }\n          src.readBytes(srcBytes, offset, srcBytes.length - offset);\n          in.read(inBytes, offset, inBytes.length - offset);\n          assertArrayEquals(srcBytes, inBytes);\n          IOUtils.close(src, in);\n        }\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","e74546db799fc6f708fb74c45693c303e8a1812a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e74546db799fc6f708fb74c45693c303e8a1812a"],"e74546db799fc6f708fb74c45693c303e8a1812a":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"e74546db799fc6f708fb74c45693c303e8a1812a":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","e74546db799fc6f708fb74c45693c303e8a1812a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}