{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","sourceNew":"  public LruTaxonomyWriterCache(int cacheSize) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    this(cacheSize, LRUType.LRU_HASHED);\n  }\n\n","sourceOld":"  public LruTaxonomyWriterCache(int cacheSize) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    this(cacheSize, LRUType.LRU_HASHED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","sourceNew":"  public LruTaxonomyWriterCache(int cacheSize) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    this(cacheSize, LRUType.LRU_HASHED);\n  }\n\n","sourceOld":"  public LruTaxonomyWriterCache(int cacheSize) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    this(cacheSize, LRUType.LRU_HASHED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int).mjava","sourceNew":null,"sourceOld":"  public LruTaxonomyWriterCache(int cacheSize) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    this(cacheSize, LRUType.LRU_HASHED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}