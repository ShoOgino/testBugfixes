{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":null,"sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.STRING, true));\n\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, new WhitespaceAnalyzer());\n    Query query = queryParser.parse(\"Document\");\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n    searcher.close();\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}