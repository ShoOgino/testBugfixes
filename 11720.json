{"path":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/writer/GOMXmlWriter#escapeCharacters(char[],int,int).mjava","commits":[{"id":"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212","date":1166013594,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/writer/GOMXmlWriter#escapeCharacters(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"\t/*\n\t * The default implementation escapes all xml chars in the writeCharacters\n\t * method. This is not expected for xhtml blobs. To make it easier to write\n\t * xhtml blobs the writeCharacters(String) mehtod will be reimplemented for\n\t * internal use.\n\t */\n\tprivate void escapeCharacters(char chars[], int start, int length)\n\t\t\tthrows XMLStreamException {\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tfinal char c = chars[i + start];\n\n\t\t\tif (c < 32) {\n\t\t\t\tif ((c != '\\t' && c != '\\n')) {\n\t\t\t\t\twrite(\"&#\");\n\t\t\t\t\twrite(Integer.toString(c));\n\t\t\t\t\twrite(';');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (c > 127 && encoder != null && !encoder.canEncode(c)) {\n\t\t\t\twrite(\"&#\");\n\t\t\t\twrite(Integer.toString(c));\n\t\t\t\twrite(';');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\twrite(c);\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/writer/GOMXmlWriter#escapeCharacters(char[],int,int).mjava","pathOld":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/writer/GOMXmlWriter#escapeCharacters(char[],int,int).mjava","sourceNew":"\t/*\n\t * The default implementation escapes all xml chars in the writeCharacters\n\t * method. This is not expected for xhtml blobs. To make it easier to write\n\t * xhtml blobs the writeCharacters(String) mehtod will be reimplemented for\n\t * internal use.\n\t */\n\tprivate void escapeCharacters(char chars[], int start, int length)\n\t\t\tthrows XMLStreamException {\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tfinal char c = chars[i + start];\n\n\t\t\tif (c < 32) {\n\t\t\t\tif ((c != '\\t' && c != '\\n')) {\n\t\t\t\t\twrite(\"&#\");\n\t\t\t\t\twrite(Integer.toString(c));\n\t\t\t\t\twrite(';');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (c > 127 && encoder != null && !encoder.canEncode(c)) {\n\t\t\t\twrite(\"&#\");\n\t\t\t\twrite(Integer.toString(c));\n\t\t\t\twrite(';');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\twrite(c);\n\t\t}\n\t}\n\n","sourceOld":"\t/*\n\t * The default implementation escapes all xml chars in the writeCharacters\n\t * method. This is not expected for xhtml blobs. To make it easier to write\n\t * xhtml blobs the writeCharacters(String) mehtod will be reimplemented for\n\t * internal use.\n\t */\n\tprivate void escapeCharacters(char chars[], int start, int length)\n\t\t\tthrows XMLStreamException {\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tfinal char c = chars[i + start];\n\n\t\t\tif (c < 32) {\n\t\t\t\tif ((c != '\\t' && c != '\\n')) {\n\t\t\t\t\twrite(\"&#\");\n\t\t\t\t\twrite(Integer.toString(c));\n\t\t\t\t\twrite(';');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (c > 127 && encoder != null && !encoder.canEncode(c)) {\n\t\t\t\twrite(\"&#\");\n\t\t\t\twrite(Integer.toString(c));\n\t\t\t\twrite(';');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\twrite(c);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}