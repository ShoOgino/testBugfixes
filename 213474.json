{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","commits":[{"id":"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a","date":1363558184,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","pathOld":"/dev/null","sourceNew":"  public void testConsumeAllTokens() throws IOException {\n    LimitTokenPositionFilterFactory factory = new LimitTokenPositionFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LimitTokenPositionFilterFactory.MAX_TOKEN_POSITION_KEY, \"3\");\n    args.put(LimitTokenPositionFilterFactory.CONSUME_ALL_TOKENS_KEY, \"true\");\n    factory.init(args);\n    String test = \"A1 B2 C3 D4 E5 F6\";\n    MockTokenizer tok = new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tok);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","sourceNew":"  public void testConsumeAllTokens() throws Exception {\n    Reader reader = new StringReader(\"A1 B2 C3 D4 E5 F6\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"LimitTokenPosition\",\n        \"maxTokenPosition\", \"3\",\n        \"consumeAllTokens\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","sourceOld":"  public void testConsumeAllTokens() throws IOException {\n    LimitTokenPositionFilterFactory factory = new LimitTokenPositionFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(LimitTokenPositionFilterFactory.MAX_TOKEN_POSITION_KEY, \"3\");\n    args.put(LimitTokenPositionFilterFactory.CONSUME_ALL_TOKENS_KEY, \"true\");\n    factory.init(args);\n    String test = \"A1 B2 C3 D4 E5 F6\";\n    MockTokenizer tok = new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tok);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","sourceNew":"  public void testConsumeAllTokens() throws Exception {\n    Reader reader = new StringReader(\"A1 B2 C3 D4 E5 F6\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"LimitTokenPosition\",\n        \"maxTokenPosition\", \"3\",\n        \"consumeAllTokens\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","sourceOld":"  public void testConsumeAllTokens() throws Exception {\n    Reader reader = new StringReader(\"A1 B2 C3 D4 E5 F6\");\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = tokenFilterFactory(\"LimitTokenPosition\",\n        \"maxTokenPosition\", \"3\",\n        \"consumeAllTokens\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43acd3a99a12a5bec9c72097de0e294c80cb6daa","date":1396327381,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","sourceNew":null,"sourceOld":"  public void testConsumeAllTokens() throws Exception {\n    Reader reader = new StringReader(\"A1 B2 C3 D4 E5 F6\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"LimitTokenPosition\",\n        \"maxTokenPosition\", \"3\",\n        \"consumeAllTokens\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestLimitTokenPositionFilterFactory#testConsumeAllTokens().mjava","sourceNew":null,"sourceOld":"  public void testConsumeAllTokens() throws Exception {\n    Reader reader = new StringReader(\"A1 B2 C3 D4 E5 F6\");\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = tokenFilterFactory(\"LimitTokenPosition\",\n        \"maxTokenPosition\", \"3\",\n        \"consumeAllTokens\", \"true\").create(stream);\n    assertTokenStreamContents(stream, new String[] { \"A1\", \"B2\", \"C3\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43acd3a99a12a5bec9c72097de0e294c80cb6daa"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["5eb2511ababf862ea11e10761c70ee560cd84510","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdd61b10b980a6d0b8a8d63baf7e8f5e19e8437a"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}