{"path":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicIndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicIndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(IndexReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(IndexReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#verify(AtomicReader,int[][],BytesRef[],BytesRef).mjava","sourceNew":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verify(AtomicReader r, int[][] idToOrds, BytesRef[] termsArray, BytesRef prefixRef) throws Exception {\n\n    final DocTermOrds dto = new DocTermOrds(r,\n                                            \"field\",\n                                            prefixRef,\n                                            Integer.MAX_VALUE,\n                                            _TestUtil.nextInt(random, 2, 10));\n                                            \n\n    final int[] docIDToID = FieldCache.DEFAULT.getInts(r, \"id\", false);\n    /*\n      for(int docID=0;docID<subR.maxDoc();docID++) {\n      System.out.println(\"  docID=\" + docID + \" id=\" + docIDToID[docID]);\n      }\n    */\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify prefix=\" + (prefixRef==null ? \"null\" : prefixRef.utf8ToString()));\n      System.out.println(\"TEST: all TERMS:\");\n      TermsEnum allTE = MultiFields.getTerms(r, \"field\").iterator(null);\n      int ord = 0;\n      while(allTE.next() != null) {\n        System.out.println(\"  ord=\" + (ord++) + \" term=\" + allTE.term().utf8ToString());\n      }\n    }\n\n    //final TermsEnum te = subR.fields().terms(\"field\").iterator();\n    final TermsEnum te = dto.getOrdTermsEnum(r);\n    if (te == null) {\n      if (prefixRef == null) {\n        assertNull(MultiFields.getTerms(r, \"field\"));\n      } else {\n        Terms terms = MultiFields.getTerms(r, \"field\");\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator(null);\n          TermsEnum.SeekStatus result = termsEnum.seekCeil(prefixRef, false);\n          if (result != TermsEnum.SeekStatus.END) {\n            assertFalse(\"term=\" + termsEnum.term().utf8ToString() + \" matches prefix=\" + prefixRef.utf8ToString(), StringHelper.startsWith(termsEnum.term(), prefixRef));\n          } else {\n            // ok\n          }\n        } else {\n          // ok\n        }\n      }\n      return;\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: TERMS:\");\n      te.seekExact(0);\n      while(true) {\n        System.out.println(\"  ord=\" + te.ord() + \" term=\" + te.term().utf8ToString());\n        if (te.next() == null) {\n          break;\n        }\n      }\n    }\n\n    TermOrdsIterator iter = null;\n    final int[] buffer = new int[5];\n    for(int docID=0;docID<r.maxDoc();docID++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: docID=\" + docID + \" of \" + r.maxDoc() + \" (id=\" + docIDToID[docID] + \")\");\n      }\n      iter = dto.lookup(docID, iter);\n      final int[] answers = idToOrds[docIDToID[docID]];\n      int upto = 0;\n      while(true) {\n        final int chunk = iter.read(buffer);\n        for(int idx=0;idx<chunk;idx++) {\n          te.seekExact((long) buffer[idx]);\n          final BytesRef expected = termsArray[answers[upto++]];\n          if (VERBOSE) {\n            System.out.println(\"  exp=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString());\n          }\n          assertEquals(\"expected=\" + expected.utf8ToString() + \" actual=\" + te.term().utf8ToString() + \" ord=\" + buffer[idx], expected, te.term());\n        }\n        \n        if (chunk < buffer.length) {\n          assertEquals(answers.length, upto);\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}