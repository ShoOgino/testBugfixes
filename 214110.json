{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(ByteBuffer[],long,long).mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(ByteBuffer[],long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a sliced view from a set of already-existing buffers: \n   *  the last buffer's limit() will be correct, but\n   *  you must deal with offset separately (the first buffer will not be adjusted) */\n  private ByteBuffer[] buildSlice(ByteBuffer[] buffers, long offset, long length) {\n    final long sliceEnd = offset + length;\n    \n    final int startIndex = (int) (offset >>> chunkSizePower);\n    final int endIndex = (int) (sliceEnd >>> chunkSizePower);\n\n    // we always allocate one more slice, the last one may be a 0 byte one\n    final ByteBuffer slices[] = new ByteBuffer[endIndex - startIndex + 1];\n    \n    for (int i = 0; i < slices.length; i++) {\n      slices[i] = buffers[startIndex + i].duplicate();\n    }\n\n    // set the last buffer's limit for the sliced view.\n    slices[slices.length - 1].limit((int) (sliceEnd & chunkSizeMask));\n    \n    return slices;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}