{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"5a6a338194ed0a2e9eef3247ffe4a535203aac09","date":1377222156,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    TempPostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new TempSepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new TempPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new TempPulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new TempBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new TempBlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    TempPostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new TempSepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new TempPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new TempPulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new TempBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new TempBlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a6a338194ed0a2e9eef3247ffe4a535203aac09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["5a6a338194ed0a2e9eef3247ffe4a535203aac09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a6a338194ed0a2e9eef3247ffe4a535203aac09","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a6a338194ed0a2e9eef3247ffe4a535203aac09":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}