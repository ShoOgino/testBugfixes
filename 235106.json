{"path":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07eeba66d4090af0095b50cbd1795a3d6182c1d","date":1538797239,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n    FieldInfos fieldInfos = leafReader.getFieldInfos();\n    LeafReader originalLeafReader = ((UninvertingReader)leafReader).getDelegate();\n\n    assertNotSame(originalLeafReader.getFieldInfos(), fieldInfos);\n    assertSame(\"do not rebuild FieldInfo for unaffected fields\",\n        originalLeafReader.getFieldInfos().fieldInfo(\"id\"), fieldInfos.fieldInfo(\"id\"));\n\n    FieldInfo intFInfo = fieldInfos.fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = fieldInfos.fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = fieldInfos.fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = fieldInfos.fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n    FieldInfos fieldInfos = leafReader.getFieldInfos();\n    LeafReader originalLeafReader = ((UninvertingReader)leafReader).getDelegate();\n\n    assertNotSame(originalLeafReader.getFieldInfos(), fieldInfos);\n    assertSame(\"do not rebuild FieldInfo for unaffected fields\",\n        originalLeafReader.getFieldInfos().fieldInfo(\"id\"), fieldInfos.fieldInfo(\"id\"));\n\n    FieldInfo intFInfo = fieldInfos.fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDataDimensionCount());\n    assertEquals(0, intFInfo.getPointIndexDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = fieldInfos.fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDataDimensionCount());\n    assertEquals(1, dintFInfo.getPointIndexDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = fieldInfos.fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = fieldInfos.fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n    FieldInfos fieldInfos = leafReader.getFieldInfos();\n    LeafReader originalLeafReader = ((UninvertingReader)leafReader).getDelegate();\n\n    assertNotSame(originalLeafReader.getFieldInfos(), fieldInfos);\n    assertSame(\"do not rebuild FieldInfo for unaffected fields\",\n        originalLeafReader.getFieldInfos().fieldInfo(\"id\"), fieldInfos.fieldInfo(\"id\"));\n\n    FieldInfo intFInfo = fieldInfos.fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = fieldInfos.fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = fieldInfos.fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = fieldInfos.fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n    FieldInfos fieldInfos = leafReader.getFieldInfos();\n    LeafReader originalLeafReader = ((UninvertingReader)leafReader).getDelegate();\n\n    assertNotSame(originalLeafReader.getFieldInfos(), fieldInfos);\n    assertSame(\"do not rebuild FieldInfo for unaffected fields\",\n        originalLeafReader.getFieldInfos().fieldInfo(\"id\"), fieldInfos.fieldInfo(\"id\"));\n\n    FieldInfo intFInfo = fieldInfos.fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointIndexDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = fieldInfos.fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(1, dintFInfo.getPointIndexDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = fieldInfos.fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = fieldInfos.fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n    FieldInfos fieldInfos = leafReader.getFieldInfos();\n    LeafReader originalLeafReader = ((UninvertingReader)leafReader).getDelegate();\n\n    assertNotSame(originalLeafReader.getFieldInfos(), fieldInfos);\n    assertSame(\"do not rebuild FieldInfo for unaffected fields\",\n        originalLeafReader.getFieldInfos().fieldInfo(\"id\"), fieldInfos.fieldInfo(\"id\"));\n\n    FieldInfo intFInfo = fieldInfos.fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDataDimensionCount());\n    assertEquals(0, intFInfo.getPointIndexDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = fieldInfos.fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDataDimensionCount());\n    assertEquals(1, dintFInfo.getPointIndexDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = fieldInfos.fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = fieldInfos.fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a07eeba66d4090af0095b50cbd1795a3d6182c1d","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["f6652c943595e92c187ee904c382863013eae28f"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}