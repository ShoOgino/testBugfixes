{"path":"lucene/core/src/test/org/apache/lucene/util/TestBitUtil#tstPerfNlz().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBitUtil#tstPerfNlz().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitUtil#tstPerfNlz().mjava","sourceNew":"  public void tstPerfNlz() { // See LUCENE-3197, prefer to use Long.numberOfLeadingZeros() over BitUtil.nlz().\n    final long measureMilliSecs = 2000;\n    final int basicIters = 100000;\n    long startTime;\n    long endTime;\n    long curTime;\n    long dummy = 0; // avoid optimizing away\n\n    dummy = 0;\n    int bitUtilLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzBitUtilBasicLoop(basicIters);\n      bitUtilLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int bitUtilPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) bitUtilLoops));\n    System.out.println(\"BitUtil nlz time: \" + (bitUtilPsTime/1) + \" picosec/call, dummy: \" + dummy);\n\n\n    dummy = 0;\n    int longLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzLongBasicLoop(basicIters);\n      longLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int longPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) longLoops));\n    System.out.println(\"Long    nlz time: \" + longPsTime + \" picosec/call, dummy: \" + dummy);\n  }\n\n","sourceOld":"  public void tstPerfNlz() { // See LUCENE-3197, prefer to use Long.numberOfLeadingZeros() over BitUtil.nlz().\n    final long measureMilliSecs = 2000;\n    final int basicIters = 100000;\n    long startTime;\n    long endTime;\n    long curTime;\n    long dummy = 0; // avoid optimizing away\n\n    dummy = 0;\n    int bitUtilLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzBitUtilBasicLoop(basicIters);\n      bitUtilLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int bitUtilPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) bitUtilLoops));\n    System.out.println(\"BitUtil nlz time: \" + (bitUtilPsTime/1) + \" picosec/call, dummy: \" + dummy);\n\n\n    dummy = 0;\n    int longLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzLongBasicLoop(basicIters);\n      longLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int longPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) longLoops));\n    System.out.println(\"Long    nlz time: \" + longPsTime + \" picosec/call, dummy: \" + dummy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f83654246556082000bded885bde27a521bb31","date":1353427179,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBitUtil#tstPerfNlz().mjava","sourceNew":null,"sourceOld":"  public void tstPerfNlz() { // See LUCENE-3197, prefer to use Long.numberOfLeadingZeros() over BitUtil.nlz().\n    final long measureMilliSecs = 2000;\n    final int basicIters = 100000;\n    long startTime;\n    long endTime;\n    long curTime;\n    long dummy = 0; // avoid optimizing away\n\n    dummy = 0;\n    int bitUtilLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzBitUtilBasicLoop(basicIters);\n      bitUtilLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int bitUtilPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) bitUtilLoops));\n    System.out.println(\"BitUtil nlz time: \" + (bitUtilPsTime/1) + \" picosec/call, dummy: \" + dummy);\n\n\n    dummy = 0;\n    int longLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzLongBasicLoop(basicIters);\n      longLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int longPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) longLoops));\n    System.out.println(\"Long    nlz time: \" + longPsTime + \" picosec/call, dummy: \" + dummy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBitUtil#tstPerfNlz().mjava","sourceNew":null,"sourceOld":"  public void tstPerfNlz() { // See LUCENE-3197, prefer to use Long.numberOfLeadingZeros() over BitUtil.nlz().\n    final long measureMilliSecs = 2000;\n    final int basicIters = 100000;\n    long startTime;\n    long endTime;\n    long curTime;\n    long dummy = 0; // avoid optimizing away\n\n    dummy = 0;\n    int bitUtilLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzBitUtilBasicLoop(basicIters);\n      bitUtilLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int bitUtilPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) bitUtilLoops));\n    System.out.println(\"BitUtil nlz time: \" + (bitUtilPsTime/1) + \" picosec/call, dummy: \" + dummy);\n\n\n    dummy = 0;\n    int longLoops = 0;\n    startTime = System.currentTimeMillis();\n    endTime = startTime + measureMilliSecs;\n    do {\n      dummy += nlzLongBasicLoop(basicIters);\n      longLoops++;\n      curTime = System.currentTimeMillis();\n    } while (curTime < endTime);\n    int longPsTime = (int) (1000000000 * (curTime - startTime) / (basicIters * 5 * 63 * (float) longLoops));\n    System.out.println(\"Long    nlz time: \" + longPsTime + \" picosec/call, dummy: \" + dummy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f83654246556082000bded885bde27a521bb31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","95f83654246556082000bded885bde27a521bb31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95f83654246556082000bded885bde27a521bb31"]},"commit2Childs":{"95f83654246556082000bded885bde27a521bb31":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f83654246556082000bded885bde27a521bb31","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}