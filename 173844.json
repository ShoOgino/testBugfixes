{"path":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","commits":[{"id":"1ae591a475987e7881466e33771fee7c47e1305f","date":1483794433,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) {\n        return Explanation.match((float) value, \"constant(\" + value + \")\");\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) {\n        return Explanation.match((float) value, \"constant(\" + value + \")\");\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new ConstantValuesSource(value);\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) {\n        return Explanation.match((float) value, \"constant(\" + value + \")\");\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new ConstantValuesSource(value);\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) {\n        return Explanation.match((float) value, \"constant(\" + value + \")\");\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#constant(double).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new ConstantValuesSource(value);\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that always returns a constant value\n   */\n  public static DoubleValuesSource constant(double value) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return true;\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) {\n        return Explanation.match((float) value, \"constant(\" + value + \")\");\n      }\n\n      @Override\n      public String toString() {\n        return \"constant(\" + value + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","501fdb8d708778ae5368dd5c44879e1d46487e43"],"1ae591a475987e7881466e33771fee7c47e1305f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ae591a475987e7881466e33771fee7c47e1305f"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["1ae591a475987e7881466e33771fee7c47e1305f"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"1ae591a475987e7881466e33771fee7c47e1305f":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ae591a475987e7881466e33771fee7c47e1305f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["507e7decdf00981d09a74632ea30299a4ce6ba72"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}