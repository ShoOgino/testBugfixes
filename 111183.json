{"path":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","commits":[{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#setUp().mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":null,"sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":null,"sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":null,"sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.  \n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random);\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random, 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir, iwc);\n    iw.w.setInfoStream(VERBOSE ? System.out : null);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp optimize\");\n      }\n      iw.optimize();\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0762b640e0d0d12b6edb96db68986e13145c3484"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0762b640e0d0d12b6edb96db68986e13145c3484"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0762b640e0d0d12b6edb96db68986e13145c3484","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}