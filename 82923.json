{"path":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, -1, -1);\n        }\n        this.finishDoc();\n        df++;\n      }\n    } else {\n      assert mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload, postingsEnum.startOffset(), postingsEnum.endOffset());\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}