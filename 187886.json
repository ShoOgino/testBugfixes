{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc17dc53660d8859b336b5110d741adaf68686f6","date":1505134847,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#orderPoints(List[GeoPoint]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#orderPoints(List[GeoPoint]).mjava","sourceNew":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Method that orders a lit of points anti-clock-wise to prevent crossing edges.\n   *\n   * @param originalPoints The points to order.\n   * @return The list of ordered points anti-clockwise.\n   */\n  private List<GeoPoint> orderPoints(List<GeoPoint> originalPoints){\n    List<GeoPoint> points = new ArrayList<>(originalPoints.size());\n    points.addAll(originalPoints); //make a copy\n    GeoPoint lPoint = getPointLefLon(points);\n    points.remove(lPoint);\n    GeoPoint rPoint = getPointRigthLon(points);\n    points.remove(rPoint);\n    List<GeoPoint> APoints = getPointsBelowAndSort(points, lPoint);\n    List<GeoPoint> BPoints = getPointsAboveAndsort(points, lPoint);\n    List<GeoPoint> result = new ArrayList<>();\n    result.add(lPoint);\n    result.addAll(APoints);\n    result.add(rPoint);\n    result.addAll(BPoints);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc17dc53660d8859b336b5110d741adaf68686f6":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc17dc53660d8859b336b5110d741adaf68686f6"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"cc17dc53660d8859b336b5110d741adaf68686f6":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}