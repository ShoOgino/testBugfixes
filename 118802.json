{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","commits":[{"id":"b77dee084743b07be452cf7c07c992a225b11146","date":1315532213,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313aa53a0b138beaae780203df1cde577ddb40ab","date":1316047785,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    List<Query> flatQueries = new ArrayList<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14942f0002b0e2aff803c994b3cc8a5d9b2575df","date":1327888973,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    List<Query> flatQueries = new ArrayList<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":["313aa53a0b138beaae780203df1cde577ddb40ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ed537de0f5011f66d563092bca474c50e51135f","date":1327937245,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    List<Query> flatQueries = new ArrayList<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    List<Query> flatQueries = new ArrayList<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#FieldQuery(Query,IndexReader,boolean,boolean).mjava","sourceNew":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  FieldQuery( Query query, IndexReader reader, boolean phraseHighlight, boolean fieldMatch ) throws IOException {\n    this.fieldMatch = fieldMatch;\n    Set<Query> flatQueries = new LinkedHashSet<Query>();\n    flatten( query, reader, flatQueries );\n    saveTerms( flatQueries, reader );\n    Collection<Query> expandQueries = expand( flatQueries );\n\n    for( Query flatQuery : expandQueries ){\n      QueryPhraseMap rootMap = getRootMap( flatQuery );\n      rootMap.add( flatQuery, reader );\n      if( !phraseHighlight && flatQuery instanceof PhraseQuery ){\n        PhraseQuery pq = (PhraseQuery)flatQuery;\n        if( pq.getTerms().length > 1 ){\n          for( Term term : pq.getTerms() )\n            rootMap.addTerm( term, flatQuery.getBoost() );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"b77dee084743b07be452cf7c07c992a225b11146":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ed537de0f5011f66d563092bca474c50e51135f":["313aa53a0b138beaae780203df1cde577ddb40ab","14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"14942f0002b0e2aff803c994b3cc8a5d9b2575df":["313aa53a0b138beaae780203df1cde577ddb40ab"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["313aa53a0b138beaae780203df1cde577ddb40ab","14942f0002b0e2aff803c994b3cc8a5d9b2575df"],"313aa53a0b138beaae780203df1cde577ddb40ab":["b77dee084743b07be452cf7c07c992a225b11146"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b77dee084743b07be452cf7c07c992a225b11146":["313aa53a0b138beaae780203df1cde577ddb40ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77dee084743b07be452cf7c07c992a225b11146"],"6ed537de0f5011f66d563092bca474c50e51135f":[],"14942f0002b0e2aff803c994b3cc8a5d9b2575df":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6ed537de0f5011f66d563092bca474c50e51135f","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"313aa53a0b138beaae780203df1cde577ddb40ab":["6ed537de0f5011f66d563092bca474c50e51135f","14942f0002b0e2aff803c994b3cc8a5d9b2575df","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6ed537de0f5011f66d563092bca474c50e51135f","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}