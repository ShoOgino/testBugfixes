{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","sourceOld":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00baa0cad99f9a7efd382b1e817c2f6b9384220a","date":1140555918,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQueryParser parser=new QueryParser(\"bookid\",analyzer);\n\t\tQuery query = parser.parse(srchkey);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","sourceOld":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQuery query = QueryParser.parse(srchkey, \"bookid\", analyzer);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(\"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"\t// tests a \"complex\" analyzer that produces multiple \n\t// overlapping tokens \n\tpublic void testOverlapAnalyzer() throws Exception\n\t{\n\t\tHashMap synonyms = new HashMap();\n\t\tsynonyms.put(\"football\", \"soccer,footie\");\n\t\tAnalyzer analyzer = new SynonymAnalyzer(synonyms);\n\t\tString srchkey = \"football\";\n\n\t\tString s = \"football-soccer in the euro 2004 footie competition\";\n\t\tQueryParser parser=new QueryParser(\"bookid\",analyzer);\n\t\tQuery query = parser.parse(srchkey);\n\n\t\tHighlighter highlighter = new Highlighter(new QueryScorer(query));\n\t\tTokenStream tokenStream =\n\t\t\tanalyzer.tokenStream(null, new StringReader(s));\n\t\t// Get 3 best fragments and seperate with a \"...\"\n\t\tString result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n\t\tString expectedResult=\"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n\t\tassertTrue(\"overlapping analyzer should handle highlights OK\",expectedResult.equals(result));\n\t}\n\n","bugFix":null,"bugIntro":["7602e63987582091a0e432f8d8f7619d2206fab7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(\"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(\"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(\"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap synonyms = new HashMap();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testOverlapAnalyzer().mjava","sourceNew":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  // tests a \"complex\" analyzer that produces multiple\n  // overlapping tokens\n  public void testOverlapAnalyzer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        HashMap<String,String> synonyms = new HashMap<String,String>();\n        synonyms.put(\"football\", \"soccer,footie\");\n        Analyzer analyzer = new SynonymAnalyzer(synonyms);\n        String srchkey = \"football\";\n\n        String s = \"football-soccer in the euro 2004 footie competition\";\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"bookid\", analyzer);\n        Query query = parser.parse(srchkey);\n\n        TokenStream tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        Highlighter highlighter = getHighlighter(query, null, tokenStream, HighlighterTest.this);\n\n        // Get 3 best fragments and seperate with a \"...\"\n        tokenStream = analyzer.tokenStream(null, new StringReader(s));\n\n        String result = highlighter.getBestFragments(tokenStream, s, 3, \"...\");\n        String expectedResult = \"<B>football</B>-<B>soccer</B> in the euro 2004 <B>footie</B> competition\";\n        assertTrue(\"overlapping analyzer should handle highlights OK, expected:\" + expectedResult\n            + \" actual:\" + result, expectedResult.equals(result));\n      }\n\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"ba1116b3450a9c1642c89445d131b37344055245":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"296b8b38a87feb478921f77834a2302dfe77641c":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["296b8b38a87feb478921f77834a2302dfe77641c"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"464a71190fd7694704427cd763d7c957c10e935b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["ba1116b3450a9c1642c89445d131b37344055245"],"296b8b38a87feb478921f77834a2302dfe77641c":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}