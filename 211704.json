{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream = analyzer.tokenStream(fieldName, \n    \t\tnew StringReader(text));\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream = analyzer.tokenStream(fieldName, \n    \t\tnew StringReader(text));\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00746ad002a54281629e3b6f3eb39833a33f093e","date":1305306799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream = analyzer.tokenStream(fieldName, \n    \t\tnew StringReader(text));\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream = analyzer.tokenStream(fieldName, \n    \t\tnew StringReader(text));\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream = analyzer.tokenStream(fieldName, \n    \t\tnew StringReader(text));\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is tokenized, not stored,\n   * termVectorStored with positions (or termVectorStored with positions and offsets),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is\n   * {@link org.apache.lucene.document.Field.Index#ANALYZED tokenized},\n   * {@link org.apache.lucene.document.Field.Store#NO not stored},\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions} (or\n   * {@link org.apache.lucene.document.Field.TermVector#WITH_POSITIONS termVectorStored with positions and offsets}),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is tokenized, not stored,\n   * termVectorStored with positions (or termVectorStored with positions and offsets),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.tokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is tokenized, not stored,\n   * termVectorStored with positions (or termVectorStored with positions and offsets),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#addField(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is tokenized, not stored,\n   * termVectorStored with positions (or termVectorStored with positions and offsets),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.tokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","sourceOld":"  /**\n   * Convenience method; Tokenizes the given field text and adds the resulting\n   * terms to the index; Equivalent to adding an indexed non-keyword Lucene\n   * {@link org.apache.lucene.document.Field} that is tokenized, not stored,\n   * termVectorStored with positions (or termVectorStored with positions and offsets),\n   * \n   * @param fieldName\n   *            a name to be associated with the text\n   * @param text\n   *            the text to tokenize and index.\n   * @param analyzer\n   *            the analyzer to use for tokenization\n   */\n  public void addField(String fieldName, String text, Analyzer analyzer) {\n    if (fieldName == null)\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    if (text == null)\n      throw new IllegalArgumentException(\"text must not be null\");\n    if (analyzer == null)\n      throw new IllegalArgumentException(\"analyzer must not be null\");\n    \n    TokenStream stream;\n    try {\n      stream = analyzer.tokenStream(fieldName, new StringReader(text));\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n\n    addField(fieldName, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["9454a6510e2db155fb01faa5c049b06ece95fab9","00746ad002a54281629e3b6f3eb39833a33f093e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","00746ad002a54281629e3b6f3eb39833a33f093e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["00746ad002a54281629e3b6f3eb39833a33f093e"],"00746ad002a54281629e3b6f3eb39833a33f093e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"00746ad002a54281629e3b6f3eb39833a33f093e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","00746ad002a54281629e3b6f3eb39833a33f093e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}