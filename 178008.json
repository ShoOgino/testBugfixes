{"path":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  /**\n\t * @inheritDoc\n\t * @see org.apache.lucene.analysis.TokenStream#next()\n\t */\n\tpublic final Token next(Token in) throws IOException {\n\t\tStringBuilder termText = new StringBuilder(25);\n\t\tint startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;\n\t\tToken lastToken = null;\n\t\tfor (Token token = input.next(in); token != null; token = input.next()) {\n\t\t\ttermText.append(token.termBuffer(), 0, token.termLength());\n\t\t\t//current token ends with hyphen -> grab the next token and glue them together\n\t\t\tif (termText.charAt(termText.length() - 1) == '-') {\n\t\t\t\twordsMerged++;\n\t\t\t\t//remove the hyphen\n\t\t\t\ttermText.setLength(termText.length()-1);\n\t\t\t\tif (startOffset == -1) {\n\t\t\t\t\tstartOffset = token.startOffset();\n\t\t\t\t\tfirstPositionIncrement = token.getPositionIncrement();\n\t\t\t\t}\n\t\t\t\tlastToken = token;\n\t\t\t} else {\n\t\t\t\t//shortcut returns token\n\t\t\t\tif (wordsMerged == 0)\n\t\t\t\t\treturn token;\n\t\t\t\tToken mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());\n\t\t\t\tmergedToken.setPositionIncrement(firstPositionIncrement);\n\t\t\t\treturn mergedToken;\n\t\t\t}\n\t\t}\n\t\t//last token ending with hyphen? - we know that we have only one token in\n\t\t//this situation, so we can safely return firstToken\n\t\tif (startOffset != -1)\n\t\t\treturn lastToken;\n\t\telse\n\t\t\treturn null; //end of token stream\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /**\n\t * @inheritDoc\n\t * @see org.apache.lucene.analysis.TokenStream#next()\n\t */\n\tpublic final Token next(Token in) throws IOException {\n\t\tStringBuilder termText = new StringBuilder(25);\n\t\tint startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;\n\t\tToken lastToken = null;\n\t\tfor (Token token = input.next(in); token != null; token = input.next()) {\n\t\t\ttermText.append(token.termBuffer(), 0, token.termLength());\n\t\t\t//current token ends with hyphen -> grab the next token and glue them together\n\t\t\tif (termText.charAt(termText.length() - 1) == '-') {\n\t\t\t\twordsMerged++;\n\t\t\t\t//remove the hyphen\n\t\t\t\ttermText.setLength(termText.length()-1);\n\t\t\t\tif (startOffset == -1) {\n\t\t\t\t\tstartOffset = token.startOffset();\n\t\t\t\t\tfirstPositionIncrement = token.getPositionIncrement();\n\t\t\t\t}\n\t\t\t\tlastToken = token;\n\t\t\t} else {\n\t\t\t\t//shortcut returns token\n\t\t\t\tif (wordsMerged == 0)\n\t\t\t\t\treturn token;\n\t\t\t\tToken mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());\n\t\t\t\tmergedToken.setPositionIncrement(firstPositionIncrement);\n\t\t\t\treturn mergedToken;\n\t\t\t}\n\t\t}\n\t\t//last token ending with hyphen? - we know that we have only one token in\n\t\t//this situation, so we can safely return firstToken\n\t\tif (startOffset != -1)\n\t\t\treturn lastToken;\n\t\telse\n\t\t\treturn null; //end of token stream\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}