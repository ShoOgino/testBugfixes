{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Ints arr = cache.getInts(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = arr.get(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + strVal(doc);\n      }\n\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = arr.get(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}