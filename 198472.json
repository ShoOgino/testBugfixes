{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null);\n    ZkNodeProps props = new ZkNodeProps();\n    \n    if(data != null) {\n      props.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException, IOException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.get(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config value\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * @param collection\n   * @return config value\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#readConfigName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":"  /**\n   * Returns config value\n   * @param collection\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n\n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["98d973ccf5ad4c9eafd96ff8e6a9dc750b976c3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#readConfigName(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns config value\n   */\n  public String readConfigName(String collection) throws KeeperException,\n      InterruptedException {\n\n    String configName = null;\n\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      log.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Specified config does not exist in ZooKeeper:\" + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1dca57049fb75fd60d90723d142769094a0402be":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","1dca57049fb75fd60d90723d142769094a0402be"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1dca57049fb75fd60d90723d142769094a0402be"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"fa64435b5902ce266c23755a4a00691a3285dab8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1dca57049fb75fd60d90723d142769094a0402be":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fa64435b5902ce266c23755a4a00691a3285dab8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}