{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","date":1345254460,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c801445354e017746d2c981c9b7afc6041b59405","date":1410123013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.X-Parsed-By\", \"ignored_parser\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"extractedContent\",\n          \"literal.id\", \"two\",\n          \"fmap.language\", \"extractedLanguage\",\n          \"literal.extractionLiteral\", \"one\",\n          \"literal.extractionLiteral\", \"two\",\n          \"fmap.X-Parsed-By\", \"ignored_parser\",\n          \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.X-Parsed-By\", \"ignored_parser\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"extractedContent\",\n          \"literal.id\", \"two\",\n          \"fmap.language\", \"extractedLanguage\",\n          \"literal.extractionLiteral\", \"one\",\n          \"literal.extractionLiteral\", \"two\",\n          \"fmap.X-Parsed-By\", \"ignored_parser\",\n          \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.X-Parsed-By\", \"ignored_parser\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n          \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n          \"fmap.Author\", \"extractedAuthor\",\n          \"fmap.content\", \"extractedContent\",\n          \"literal.id\", \"two\",\n          \"fmap.language\", \"extractedLanguage\",\n          \"literal.extractionLiteral\", \"one\",\n          \"literal.extractionLiteral\", \"two\",\n          \"fmap.X-Parsed-By\", \"ignored_parser\",\n          \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"uprefix\", \"ignored_\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.X-Parsed-By\", \"ignored_parser\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"extraction/version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["abd55340ba9df8b62edcd692b34e46cf0614a52e","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["abd55340ba9df8b62edcd692b34e46cf0614a52e","7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["c801445354e017746d2c981c9b7afc6041b59405"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["c801445354e017746d2c981c9b7afc6041b59405","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"c801445354e017746d2c981c9b7afc6041b59405":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c801445354e017746d2c981c9b7afc6041b59405","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c801445354e017746d2c981c9b7afc6041b59405"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"c801445354e017746d2c981c9b7afc6041b59405":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["7b17c5ac3ba3c23ec6ff14d059f827576c3ed7a9","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}