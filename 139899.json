{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter#testRanges().mjava","commits":[{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter#testRanges().mjava","pathOld":"/dev/null","sourceNew":"  /** test a bunch of random ranges */\n  public void testRanges() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      BytesRef lowerVal = new BytesRef(_TestUtil.randomUnicodeString(random()));\n      BytesRef upperVal = new BytesRef(_TestUtil.randomUnicodeString(random()));\n      if (upperVal.compareTo(lowerVal) < 0) {\n        assertSame(upperVal, lowerVal, random().nextBoolean(), random().nextBoolean());\n      } else {\n        assertSame(lowerVal, upperVal, random().nextBoolean(), random().nextBoolean());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter#testRanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter#testRanges().mjava","sourceNew":"  /** test a bunch of random ranges */\n  public void testRanges() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      BytesRef lowerVal = new BytesRef(TestUtil.randomUnicodeString(random()));\n      BytesRef upperVal = new BytesRef(TestUtil.randomUnicodeString(random()));\n      if (upperVal.compareTo(lowerVal) < 0) {\n        assertSame(upperVal, lowerVal, random().nextBoolean(), random().nextBoolean());\n      } else {\n        assertSame(lowerVal, upperVal, random().nextBoolean(), random().nextBoolean());\n      }\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random ranges */\n  public void testRanges() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      BytesRef lowerVal = new BytesRef(_TestUtil.randomUnicodeString(random()));\n      BytesRef upperVal = new BytesRef(_TestUtil.randomUnicodeString(random()));\n      if (upperVal.compareTo(lowerVal) < 0) {\n        assertSame(upperVal, lowerVal, random().nextBoolean(), random().nextBoolean());\n      } else {\n        assertSame(lowerVal, upperVal, random().nextBoolean(), random().nextBoolean());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRangeFilter#testRanges().mjava","sourceNew":null,"sourceOld":"  /** test a bunch of random ranges */\n  public void testRanges() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      BytesRef lowerVal = new BytesRef(TestUtil.randomUnicodeString(random()));\n      BytesRef upperVal = new BytesRef(TestUtil.randomUnicodeString(random()));\n      if (upperVal.compareTo(lowerVal) < 0) {\n        assertSame(upperVal, lowerVal, random().nextBoolean(), random().nextBoolean());\n      } else {\n        assertSame(lowerVal, upperVal, random().nextBoolean(), random().nextBoolean());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["484e80062d7ab2729bc82f0311d6a97dd913961a"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}