{"path":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/params/EnhancementsIndexingParamsTest#testCategoryEnhancements().mjava","commits":[{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/params/EnhancementsIndexingParamsTest#testCategoryEnhancements().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCategoryEnhancements() {\n    EnhancementsIndexingParams params = new EnhancementsIndexingParams(\n        new CategoryEnhancementDummy1(), new CategoryEnhancementDummy2());\n\n    List<CategoryEnhancement> enhancements = params.getCategoryEnhancements();\n    assertEquals(\"Wrong number of enhancements\", 2, enhancements.size());\n\n    // check order\n    assertTrue(\"Wrong first enhancement\", enhancements.get(0) instanceof CategoryEnhancementDummy1);\n    assertTrue(\"Wrong second enhancement\", enhancements.get(1) instanceof CategoryEnhancementDummy2);\n\n    // check retainable properties \n    List<CategoryProperty> retainableProps = params.getRetainableProperties();\n    assertNotNull(\"Unexpected empty retainable list\", retainableProps);\n    assertEquals(\"Unexpected size of retainable list\", 1, retainableProps.size());\n    assertSame(\"Wrong property in retainable list\", DummyProperty.INSTANCE, retainableProps.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/params/EnhancementsIndexingParamsTest#testCategoryEnhancements().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCategoryEnhancements() {\n    EnhancementsIndexingParams params = new EnhancementsIndexingParams(\n        new CategoryEnhancementDummy1(), new CategoryEnhancementDummy2());\n\n    List<CategoryEnhancement> enhancements = params.getCategoryEnhancements();\n    assertEquals(\"Wrong number of enhancements\", 2, enhancements.size());\n\n    // check order\n    assertTrue(\"Wrong first enhancement\", enhancements.get(0) instanceof CategoryEnhancementDummy1);\n    assertTrue(\"Wrong second enhancement\", enhancements.get(1) instanceof CategoryEnhancementDummy2);\n\n    // check retainable properties \n    List<CategoryProperty> retainableProps = params.getRetainableProperties();\n    assertNotNull(\"Unexpected empty retainable list\", retainableProps);\n    assertEquals(\"Unexpected size of retainable list\", 1, retainableProps.size());\n    assertSame(\"Wrong property in retainable list\", DummyProperty.INSTANCE, retainableProps.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}