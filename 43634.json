{"path":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","commits":[{"id":"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d","date":1187140494,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","pathOld":"/dev/null","sourceNew":"  protected void setUp() {\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","pathOld":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","sourceNew":"  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","sourceOld":"  protected void setUp() {\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","bugFix":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","pathOld":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","sourceOld":"  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","pathOld":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}