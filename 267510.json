{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), new Long(213123L));\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(new Double(3234.42), \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(new Double(3234.42), \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), new Long(213123L));\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(new Double(3234.42), \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(new Double(3234.42), \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), new Long(213123L));\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(new Double(3234.42), \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(new Double(3234.42), \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), new Long(213123L));\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(new Double(3234.42), \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(new Double(3234.42), \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FillMissingFunctionTest#multiValueObjectTest().mjava","sourceNew":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();\n\n    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});\n\n    // No values\n    val.setValues();\n    filler.setValues();\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Values exist\n    val.setValues(\"asdfs\");\n    filler.setValues(new Date(12312), 213123L);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues();\n    filler.setValues(3234.42d, \"replacement\");\n    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, \"replacement\").iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    filler.setValues();\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3bd4c6955956e76c96eb12dfe64108ed03522983","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["3bd4c6955956e76c96eb12dfe64108ed03522983","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["628903f37b6c442da0d390db1c6af9a0e74d41a7","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["1e4e64b7199d2f2a17be7f3926c7532553910dce","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}