{"path":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","commits":[{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#build(Field,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  /**\n   * Returns an IndexDocValuesField holding the value from\n   * the provided string field, as the specified type.  The\n   * incoming field must have a string value.  The name, {@link\n   * FieldType} and string value are carried over from the\n   * incoming Field.\n   */\n  public static IndexDocValuesField build(Field field, ValueType type) {\n    if (field instanceof IndexDocValuesField) {\n      return (IndexDocValuesField) field;\n    }\n    final IndexDocValuesField valField = new IndexDocValuesField(field.name(), field.getFieldType(), field.stringValue());\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? field.binaryValue() : new BytesRef(field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField;\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/IndexDocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","sourceNew":"  @Override\n  public String toString() {\n    final String value;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      value = \"bytes:bytes.utf8ToString();\";\n      break;\n    case VAR_INTS:\n      value = \"int:\" + longValue;\n      break;\n    case FLOAT_32:\n      value = \"float32:\" + doubleValue;\n      break;\n    case FLOAT_64:\n      value = \"float64:\" + doubleValue;\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return \"<\" + name() + \": IndexDocValuesField \" + value + \">\";\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof IndexDocValuesField)\n      return field;\n    final IndexDocValuesField valField = new IndexDocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case VAR_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["1509f151d7692d84fae414b2b799ac06ba60fcb4","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","605b061fadf71aa6458c0005eaae83a98350c403"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}