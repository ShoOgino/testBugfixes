{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplicaProp().mjava","sourceNew":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n    \n  }\n\n","sourceOld":"  private void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n    Replica replica = cloudClient.getZkStateReader().getLeaderRetry(DEFAULT_COLLECTION, SHARD1);\n    CollectionAdminResponse response = new CollectionAdminRequest.AddReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replica.getName())\n            .setPropertyName(\"preferredleader\")\n            .setPropertyValue(\"true\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(20, TimeUnit.SECONDS);\n    String propertyValue = null;\n    \n    String replicaName = replica.getName();\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      propertyValue = replica.getStr(\"property.preferredleader\"); \n      if(StringUtils.equals(\"true\", propertyValue))\n        break;\n      Thread.sleep(50);\n    }\n    \n    assertEquals(\"Replica property was not updated, Latest value: \" +\n        cloudClient.getZkStateReader().getClusterState().getReplica(DEFAULT_COLLECTION, replicaName),\n        \"true\",\n        propertyValue);\n\n    response = new CollectionAdminRequest.DeleteReplicaProp()\n            .setCollectionName(DEFAULT_COLLECTION)\n            .setShardName(SHARD1)\n            .setReplica(replicaName)\n            .setPropertyName(\"property.preferredleader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(20, TimeUnit.SECONDS);\n    boolean updated = false;\n\n    while (! timeout.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(DEFAULT_COLLECTION, replicaName);\n      updated = replica.getStr(\"property.preferredleader\") == null;\n      if(updated)\n        break;\n      Thread.sleep(50);\n    }\n\n    assertTrue(\"Replica property was not removed\", updated);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a7098b1923741f1d9887fad7cc27074c26d1f","date":1502268482,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getProperty(\"preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getProperty(\"preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getProperty(\"preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getProperty(\"preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getProperty(\"preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getProperty(\"preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getStr(\"property.preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getStr(\"property.preferredleader\") == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplicaProp().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 4);\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getProperty(\"preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getProperty(\"preferredleader\") == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplicaProp() throws InterruptedException, IOException, SolrServerException {\n\n    final String collection = \"replicaProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    final Replica replica = getCollectionState(collection).getLeader(\"shard1\");\n    CollectionAdminResponse response\n        = CollectionAdminRequest.addReplicaProperty(collection, \"shard1\", replica.getName(), \"preferredleader\", \"true\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to appear on replica \" + replica.getName(), collection,\n        (n, c) -> \"true\".equals(c.getReplica(replica.getName()).getProperty(\"preferredleader\")));\n\n    response = CollectionAdminRequest.deleteReplicaProperty(collection, \"shard1\", replica.getName(), \"property.preferredleader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting property 'preferredleader' to be removed from replica \" + replica.getName(), collection,\n        (n, c) -> c.getReplica(replica.getName()).getProperty(\"preferredleader\") == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","e021e73178a0be1b0ff15a0894796c23f0556144"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["e021e73178a0be1b0ff15a0894796c23f0556144","636a7098b1923741f1d9887fad7cc27074c26d1f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["e021e73178a0be1b0ff15a0894796c23f0556144"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["636a7098b1923741f1d9887fad7cc27074c26d1f"],"e021e73178a0be1b0ff15a0894796c23f0556144":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["e9017cf144952056066919f1ebc7897ff9bd71b1","636a7098b1923741f1d9887fad7cc27074c26d1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["58884af1f68e9d61c217c753fbd6266d86a63b14","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"922ddd897402a6df25c766ea8300443be5e82b3d":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e021e73178a0be1b0ff15a0894796c23f0556144":["e9017cf144952056066919f1ebc7897ff9bd71b1","58884af1f68e9d61c217c753fbd6266d86a63b14","636a7098b1923741f1d9887fad7cc27074c26d1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}