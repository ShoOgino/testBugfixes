{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","commits":[{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a node having the specified level, returns the distance from opposite\n   * corners. Since this might very depending on where the node is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public double getDistanceForLevel(int level) {\n    if (level < 1 || level > getMaxLevels())\n      throw new IllegalArgumentException(\"Level must be in 1 to maxLevels range\");\n    //TODO cache for each level\n    Node node = getNode(ctx.getWorldBounds().getCenter(), level);\n    Rectangle bbox = node.getShape().getBoundingBox();\n    double width = bbox.getWidth();\n    double height = bbox.getHeight();\n    //Use standard cartesian hypotenuse. For geospatial, this answer is larger\n    // than the correct one but it's okay to over-estimate.\n    return Math.sqrt(width * width + height * height);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","sourceNew":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might very depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public double getDistanceForLevel(int level) {\n    if (level < 1 || level > getMaxLevels())\n      throw new IllegalArgumentException(\"Level must be in 1 to maxLevels range\");\n    //TODO cache for each level\n    Cell cell = getCell(ctx.getWorldBounds().getCenter(), level);\n    Rectangle bbox = cell.getShape().getBoundingBox();\n    double width = bbox.getWidth();\n    double height = bbox.getHeight();\n    //Use standard cartesian hypotenuse. For geospatial, this answer is larger\n    // than the correct one but it's okay to over-estimate.\n    return Math.sqrt(width * width + height * height);\n  }\n\n","sourceOld":"  /**\n   * Given a node having the specified level, returns the distance from opposite\n   * corners. Since this might very depending on where the node is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public double getDistanceForLevel(int level) {\n    if (level < 1 || level > getMaxLevels())\n      throw new IllegalArgumentException(\"Level must be in 1 to maxLevels range\");\n    //TODO cache for each level\n    Node node = getNode(ctx.getWorldBounds().getCenter(), level);\n    Rectangle bbox = node.getShape().getBoundingBox();\n    double width = bbox.getWidth();\n    double height = bbox.getHeight();\n    //Use standard cartesian hypotenuse. For geospatial, this answer is larger\n    // than the correct one but it's okay to over-estimate.\n    return Math.sqrt(width * width + height * height);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","sourceNew":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","sourceOld":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might very depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public double getDistanceForLevel(int level) {\n    if (level < 1 || level > getMaxLevels())\n      throw new IllegalArgumentException(\"Level must be in 1 to maxLevels range\");\n    //TODO cache for each level\n    Cell cell = getCell(ctx.getWorldBounds().getCenter(), level);\n    Rectangle bbox = cell.getShape().getBoundingBox();\n    double width = bbox.getWidth();\n    double height = bbox.getHeight();\n    //Use standard cartesian hypotenuse. For geospatial, this answer is larger\n    // than the correct one but it's okay to over-estimate.\n    return Math.sqrt(width * width + height * height);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","sourceNew":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return {@code > 0}\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","sourceOld":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return > 0\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","sourceNew":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return {@code > 0}\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","sourceOld":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return {@code > 0}\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getDistanceForLevel(int).mjava","sourceNew":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return {@code > 0}\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","sourceOld":"  /**\n   * Given a cell having the specified level, returns the distance from opposite\n   * corners. Since this might vary depending on where the cell is, this method\n   * may over-estimate.\n   *\n   * @param level [1 to maxLevels]\n   * @return {@code > 0}\n   */\n  public abstract double getDistanceForLevel(int level);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"af2638813028b254a88b418ebeafb541afb49653":["b1eb427f2c6beed80d1724555fc1db003ccf3030","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["8259c159da2de2e8528524fb76b244b46cbded59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"8259c159da2de2e8528524fb76b244b46cbded59":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"8259c159da2de2e8528524fb76b244b46cbded59":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["8259c159da2de2e8528524fb76b244b46cbded59"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}