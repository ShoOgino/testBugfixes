{"path":"solr/solrj/src/java/org/apache/solr/common/util/ReflectMapWriter#writeMap(EntryWriter).mjava","commits":[{"id":"2cb4e022420f72c54eae1717b36b6778fccd3c8a","date":1571526013,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ReflectMapWriter#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"940c75fcb0bf7bc85eff175ced7f2d3e08868105","date":1593753958,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ReflectMapWriter#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ReflectMapWriter#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    Utils.reflectWrite(ew, this);\n  }\n\n","sourceOld":"  @Override\n  default void writeMap(EntryWriter ew) throws IOException {\n    for (Field field : this.getClass().getDeclaredFields()) {\n      JsonProperty prop = field.getAnnotation(JsonProperty.class);\n      if (prop == null) continue;\n      int modifiers = field.getModifiers();\n      if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers)) {\n        String fname = prop.value().isEmpty() ? field.getName() : prop.value();\n        try {\n          if (field.getType() == int.class) {\n            ew.put(fname, field.getInt(this));\n          } else if (field.getType() == float.class) {\n            ew.put(fname, field.getFloat(this));\n          } else if (field.getType() == double.class) {\n            ew.put(fname, field.getDouble(this));\n          } else if (field.getType() == boolean.class) {\n            ew.put(fname, field.getBoolean(this));\n          } else if (field.getType() == long.class) {\n            ew.put(fname, field.getLong(this));\n          } else {\n            ew.putIfNotNull(fname, field.get(this));\n          }\n        } catch (IllegalAccessException e) {\n          //it should not happen\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"940c75fcb0bf7bc85eff175ced7f2d3e08868105":["2cb4e022420f72c54eae1717b36b6778fccd3c8a"],"2cb4e022420f72c54eae1717b36b6778fccd3c8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["940c75fcb0bf7bc85eff175ced7f2d3e08868105"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2cb4e022420f72c54eae1717b36b6778fccd3c8a"],"940c75fcb0bf7bc85eff175ced7f2d3e08868105":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2cb4e022420f72c54eae1717b36b6778fccd3c8a":["940c75fcb0bf7bc85eff175ced7f2d3e08868105"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}