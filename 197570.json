{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eb61c2f9d963a72b965977387ef58e30adec4c8","date":1282919602,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset. */\n  @Override\n  protected int correct(int currentOff) {\n    if (offsets == null || currentOff < offsets[0]) {\n      return currentOff;\n    }\n    \n    int hi = size - 1;\n    if(currentOff >= offsets[hi])\n      return currentOff + diffs[hi];\n\n    int lo = 0;\n    int mid = -1;\n    \n    while (hi >= lo) {\n      mid = (lo + hi) >>> 1;\n      if (currentOff < offsets[mid])\n        hi = mid - 1;\n      else if (currentOff > offsets[mid])\n        lo = mid + 1;\n      else\n        return currentOff + diffs[mid];\n    }\n\n    if (currentOff < offsets[mid])\n      return mid == 0 ? currentOff : currentOff + diffs[mid-1];\n    else\n      return currentOff + diffs[mid];\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset. */\n  @Override\n  protected int correct(int currentOff) {\n    if (offsets == null || currentOff < offsets[0]) {\n      return currentOff;\n    }\n    \n    int hi = size - 1;\n    if(currentOff >= offsets[hi])\n      return currentOff + diffs[hi];\n\n    int lo = 0;\n    int mid = -1;\n    \n    while (hi >= lo) {\n      mid = (lo + hi) >>> 1;\n      if (currentOff < offsets[mid])\n        hi = mid - 1;\n      else if (currentOff > offsets[mid])\n        lo = mid + 1;\n      else\n        return currentOff + diffs[mid];\n    }\n\n    if (currentOff < offsets[mid])\n      return mid == 0 ? currentOff : currentOff + diffs[mid-1];\n    else\n      return currentOff + diffs[mid];\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset.  Note that this method\n   *  is slow, if you correct positions far before the most\n   *  recently added position, as it's a simple linear\n   *  search backwards through all offset corrections added\n   *  by {@link #addOffCorrectMap}. */\n  @Override\n  protected int correct(int currentOff) {\n    if (pcmList == null || pcmList.isEmpty()) {\n      return currentOff;\n    }\n    for (int i = pcmList.size() - 1; i >= 0; i--) {\n      if (currentOff >=  pcmList.get(i).off) {\n        return currentOff + pcmList.get(i).cumulativeDiff;\n      }\n    }\n    return currentOff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#correct(int).mjava","sourceNew":"  /** Retrieve the corrected offset. */\n  @Override\n  protected int correct(int currentOff) {\n    if (offsets == null || currentOff < offsets[0]) {\n      return currentOff;\n    }\n    \n    int hi = size - 1;\n    if(currentOff >= offsets[hi])\n      return currentOff + diffs[hi];\n\n    int lo = 0;\n    int mid = -1;\n    \n    while (hi >= lo) {\n      mid = (lo + hi) >>> 1;\n      if (currentOff < offsets[mid])\n        hi = mid - 1;\n      else if (currentOff > offsets[mid])\n        lo = mid + 1;\n      else\n        return currentOff + diffs[mid];\n    }\n\n    if (currentOff < offsets[mid])\n      return mid == 0 ? currentOff : currentOff + diffs[mid-1];\n    else\n      return currentOff + diffs[mid];\n  }\n\n","sourceOld":"  /** Retrieve the corrected offset. */\n  @Override\n  protected int correct(int currentOff) {\n    if (offsets == null || currentOff < offsets[0]) {\n      return currentOff;\n    }\n    \n    int hi = size - 1;\n    if(currentOff >= offsets[hi])\n      return currentOff + diffs[hi];\n\n    int lo = 0;\n    int mid = -1;\n    \n    while (hi >= lo) {\n      mid = (lo + hi) >>> 1;\n      if (currentOff < offsets[mid])\n        hi = mid - 1;\n      else if (currentOff > offsets[mid])\n        lo = mid + 1;\n      else\n        return currentOff + diffs[mid];\n    }\n\n    if (currentOff < offsets[mid])\n      return mid == 0 ? currentOff : currentOff + diffs[mid-1];\n    else\n      return currentOff + diffs[mid];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2eb61c2f9d963a72b965977387ef58e30adec4c8"],"2eb61c2f9d963a72b965977387ef58e30adec4c8":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","2eb61c2f9d963a72b965977387ef58e30adec4c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2eb61c2f9d963a72b965977387ef58e30adec4c8":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["2eb61c2f9d963a72b965977387ef58e30adec4c8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}