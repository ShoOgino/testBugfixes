{"path":"lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers#testSubclassOverridingOnlyTokenStream().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers#testSubclassOverridingOnlyTokenStream().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestAnalyzers#testSubclassOverridingOnlyTokenStream().mjava","sourceNew":"  public void testSubclassOverridingOnlyTokenStream() throws Throwable {\n    Analyzer a = new MyStandardAnalyzer();\n    TokenStream ts = a.reusableTokenStream(\"field\", new StringReader(\"the\"));\n    // StandardAnalyzer will discard \"the\" (it's a\n    // stopword), by my subclass will not:\n    assertTrue(ts.incrementToken());\n    assertFalse(ts.incrementToken());\n  }\n\n","sourceOld":"  public void testSubclassOverridingOnlyTokenStream() throws Throwable {\n    Analyzer a = new MyStandardAnalyzer();\n    TokenStream ts = a.reusableTokenStream(\"field\", new StringReader(\"the\"));\n    // StandardAnalyzer will discard \"the\" (it's a\n    // stopword), by my subclass will not:\n    assertTrue(ts.incrementToken());\n    assertFalse(ts.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/analysis/TestAnalyzers#testSubclassOverridingOnlyTokenStream().mjava","sourceNew":null,"sourceOld":"  public void testSubclassOverridingOnlyTokenStream() throws Throwable {\n    Analyzer a = new MyStandardAnalyzer();\n    TokenStream ts = a.reusableTokenStream(\"field\", new StringReader(\"the\"));\n    // StandardAnalyzer will discard \"the\" (it's a\n    // stopword), by my subclass will not:\n    assertTrue(ts.incrementToken());\n    assertFalse(ts.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a775c547c3519b47efd41c09cb47100ddb9604c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}