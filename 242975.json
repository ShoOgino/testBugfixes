{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of\n   * Rows. Only used by cache implementations.\n   *\n   * @param query\n   * @return\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1","date":1217855899,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of\n   * Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   * @return the cached row corresponding to the given query after all variables have been resolved \n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of\n   * Rows. Only used by cache implementations.\n   *\n   * @param query\n   * @return\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of\n   * Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   * @return the cached row corresponding to the given query after all variables have been resolved \n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24e46abdb8a165d56130d438a628090853799c7c","date":1229003003,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = resolver.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"24e46abdb8a165d56130d438a628090853799c7c":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["24e46abdb8a165d56130d438a628090853799c7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["24e46abdb8a165d56130d438a628090853799c7c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"24e46abdb8a165d56130d438a628090853799c7c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}