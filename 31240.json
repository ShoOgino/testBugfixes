{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","sourceNew":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","sourceNew":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","sourceNew":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.BinaryDocValuesImpl#get(int,BytesRef).mjava","sourceNew":"    @Override\n    public BytesRef get(int docID) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        term.length = 0;\n      } else {\n        bytes.fill(term, pointer);\n      }\n      return term;\n    }\n\n","sourceOld":"    @Override\n    public void get(int docID, BytesRef ret) {\n      final int pointer = (int) docToOffset.get(docID);\n      if (pointer == 0) {\n        ret.bytes = BytesRef.EMPTY_BYTES;\n        ret.offset = 0;\n        ret.length = 0;\n      } else {\n        bytes.fill(ret, pointer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}