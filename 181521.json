{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":null,"sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = new RAMDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setMaxBufferedDocs(10);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.optimize();\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}