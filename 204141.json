{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#assertColocated(DocCollection,String,DocCollection).mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#assertColocated(DocCollection,String,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that all replicas of collection are colocated with at least one\n   * replica of the withCollection and none of them should be on the given 'noneOnNode'.\n   */\n  private void assertColocated(DocCollection collection, String noneOnNode, DocCollection withCollection) {\n    // sanity check\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollection.getReplicas(replica.getNodeName()) == null\n            || withCollection.getReplicas(replica.getNodeName()).isEmpty()));\n\n    if (noneOnNode != null) {\n      assertTrue(collection.getReplicas().stream().noneMatch(\n          replica -> noneOnNode.equals(replica.getNodeName())));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#assertColocated(DocCollection,String,DocCollection).mjava","sourceNew":null,"sourceOld":"  /**\n   * Asserts that all replicas of collection are colocated with at least one\n   * replica of the withCollection and none of them should be on the given 'noneOnNode'.\n   */\n  private void assertColocated(DocCollection collection, String noneOnNode, DocCollection withCollection) {\n    // sanity check\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollection.getReplicas(replica.getNodeName()) == null\n            || withCollection.getReplicas(replica.getNodeName()).isEmpty()));\n\n    if (noneOnNode != null) {\n      assertTrue(collection.getReplicas().stream().noneMatch(\n          replica -> noneOnNode.equals(replica.getNodeName())));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}