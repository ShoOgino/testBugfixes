{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","commits":[{"id":"91711632071d3c32afb82a3e03039e89c0cc18b9","date":1286820806,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"/dev/null","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"/dev/null","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpanFirstQuery#testStartPositions().mjava","sourceNew":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStartPositions() throws Exception {\n    Directory dir = newDirectory();\n    \n    // mimic StopAnalyzer\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|a|of\").toAutomaton());\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, stopSet, true);\n    \n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, analyzer);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"the quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    Document doc2 = new Document();\n    doc2.add(newField(\"field\", \"quick brown fox\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc2);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // user queries on \"starts-with quick\"\n    SpanQuery sfq = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 1);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    // user queries on \"starts-with the quick\"\n    SpanQuery include = new SpanFirstQuery(new SpanTermQuery(new Term(\"field\", \"quick\")), 2);\n    sfq = new SpanNotQuery(include, sfq);\n    assertEquals(1, searcher.search(sfq, 10).totalHits);\n    \n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91711632071d3c32afb82a3e03039e89c0cc18b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91711632071d3c32afb82a3e03039e89c0cc18b9"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["91711632071d3c32afb82a3e03039e89c0cc18b9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["91711632071d3c32afb82a3e03039e89c0cc18b9","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"91711632071d3c32afb82a3e03039e89c0cc18b9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91711632071d3c32afb82a3e03039e89c0cc18b9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}