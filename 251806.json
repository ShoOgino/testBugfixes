{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","commits":[{"id":"0d8448be43e6bd7d69aa0227187fca146a1f2262","date":1338393518,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","pathOld":"/dev/null","sourceNew":"  private int generateBreakUpSuggestions(Term term, IndexReader ir,\n      int numberBreaks, int maxSuggestions, int useMinSuggestionFrequency,\n      SuggestWord[] prefix, Queue<SuggestWordArrayWrapper> suggestions,\n      int totalEvaluations, BreakSuggestionSortMethod sortMethod)\n      throws IOException {\n    int termLength = term.bytes().length;\n    int useMinBreakWordLength = minBreakWordLength;\n    if (useMinBreakWordLength < 1) {\n      useMinBreakWordLength = 1;\n    }\n    if (termLength <= (useMinBreakWordLength * 2)) {\n      return 0;\n    }\n    \n    int thisTimeEvaluations = 0;\n    BytesRef termBytes = term.bytes().clone();\n    for (int i = useMinBreakWordLength; i < (termLength - useMinBreakWordLength); i++) {\n      SuggestWord leftWord = generateSuggestWord(ir, termBytes, 0, i, term\n          .field());\n      \n      if (leftWord.freq >= useMinSuggestionFrequency) {\n        SuggestWord rightWord = generateSuggestWord(ir, termBytes, i,\n            termLength - i, term.field());\n        if (rightWord.freq >= useMinSuggestionFrequency) {\n          SuggestWordArrayWrapper suggestion = new SuggestWordArrayWrapper(\n              newSuggestion(prefix, leftWord, rightWord));\n          suggestions.offer(suggestion);\n          if (suggestions.size() > maxSuggestions) {\n            suggestions.poll();\n          }\n        }\n        \n        int newNumberBreaks = numberBreaks + 1;\n        if (newNumberBreaks <= maxChanges) {\n          int evaluations = generateBreakUpSuggestions(new Term(term.field(),\n              rightWord.string), ir, newNumberBreaks, maxSuggestions,\n              useMinSuggestionFrequency, newPrefix(prefix, leftWord),\n              suggestions, totalEvaluations, sortMethod);\n          totalEvaluations += evaluations;\n        }\n      }\n      thisTimeEvaluations++;\n      totalEvaluations++;\n      if (totalEvaluations >= maxEvaluations) {\n        break;\n      }\n    }\n    return thisTimeEvaluations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","date":1354906497,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","sourceNew":"  private int generateBreakUpSuggestions(Term term, IndexReader ir,\n      int numberBreaks, int maxSuggestions, int useMinSuggestionFrequency,\n      SuggestWord[] prefix, Queue<SuggestWordArrayWrapper> suggestions,\n      int totalEvaluations, BreakSuggestionSortMethod sortMethod)\n      throws IOException {\n    String termText = term.text();\n    int termLength = termText.codePointCount(0, termText.length());\n    int useMinBreakWordLength = minBreakWordLength;\n    if (useMinBreakWordLength < 1) {\n      useMinBreakWordLength = 1;\n    }\n    if (termLength < (useMinBreakWordLength * 2)) {\n      return 0;\n    }    \n    \n    int thisTimeEvaluations = 0;\n    for (int i = useMinBreakWordLength; i <= (termLength - useMinBreakWordLength); i++) {\n      int end = termText.offsetByCodePoints(0, i);\n      String leftText = termText.substring(0, end);\n      String rightText = termText.substring(end);\n      SuggestWord leftWord = generateSuggestWord(ir, term.field(), leftText);\n      \n      if (leftWord.freq >= useMinSuggestionFrequency) {\n        SuggestWord rightWord = generateSuggestWord(ir, term.field(), rightText);\n        if (rightWord.freq >= useMinSuggestionFrequency) {\n          SuggestWordArrayWrapper suggestion = new SuggestWordArrayWrapper(\n              newSuggestion(prefix, leftWord, rightWord));\n          suggestions.offer(suggestion);\n          if (suggestions.size() > maxSuggestions) {\n            suggestions.poll();\n          }\n        }        \n        int newNumberBreaks = numberBreaks + 1;\n        if (newNumberBreaks <= maxChanges) {\n          int evaluations = generateBreakUpSuggestions(new Term(term.field(),\n              rightWord.string), ir, newNumberBreaks, maxSuggestions,\n              useMinSuggestionFrequency, newPrefix(prefix, leftWord),\n              suggestions, totalEvaluations, sortMethod);\n          totalEvaluations += evaluations;\n        }\n      }\n      \n      thisTimeEvaluations++;\n      totalEvaluations++;\n      if (totalEvaluations >= maxEvaluations) {\n        break;\n      }\n    }\n    return thisTimeEvaluations;\n  }\n\n","sourceOld":"  private int generateBreakUpSuggestions(Term term, IndexReader ir,\n      int numberBreaks, int maxSuggestions, int useMinSuggestionFrequency,\n      SuggestWord[] prefix, Queue<SuggestWordArrayWrapper> suggestions,\n      int totalEvaluations, BreakSuggestionSortMethod sortMethod)\n      throws IOException {\n    int termLength = term.bytes().length;\n    int useMinBreakWordLength = minBreakWordLength;\n    if (useMinBreakWordLength < 1) {\n      useMinBreakWordLength = 1;\n    }\n    if (termLength <= (useMinBreakWordLength * 2)) {\n      return 0;\n    }\n    \n    int thisTimeEvaluations = 0;\n    BytesRef termBytes = term.bytes().clone();\n    for (int i = useMinBreakWordLength; i < (termLength - useMinBreakWordLength); i++) {\n      SuggestWord leftWord = generateSuggestWord(ir, termBytes, 0, i, term\n          .field());\n      \n      if (leftWord.freq >= useMinSuggestionFrequency) {\n        SuggestWord rightWord = generateSuggestWord(ir, termBytes, i,\n            termLength - i, term.field());\n        if (rightWord.freq >= useMinSuggestionFrequency) {\n          SuggestWordArrayWrapper suggestion = new SuggestWordArrayWrapper(\n              newSuggestion(prefix, leftWord, rightWord));\n          suggestions.offer(suggestion);\n          if (suggestions.size() > maxSuggestions) {\n            suggestions.poll();\n          }\n        }\n        \n        int newNumberBreaks = numberBreaks + 1;\n        if (newNumberBreaks <= maxChanges) {\n          int evaluations = generateBreakUpSuggestions(new Term(term.field(),\n              rightWord.string), ir, newNumberBreaks, maxSuggestions,\n              useMinSuggestionFrequency, newPrefix(prefix, leftWord),\n              suggestions, totalEvaluations, sortMethod);\n          totalEvaluations += evaluations;\n        }\n      }\n      thisTimeEvaluations++;\n      totalEvaluations++;\n      if (totalEvaluations >= maxEvaluations) {\n        break;\n      }\n    }\n    return thisTimeEvaluations;\n  }\n\n","bugFix":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker#generateBreakUpSuggestions(Term,IndexReader,int,int,int,SuggestWord[],Queue[SuggestWordArrayWrapper],int,BreakSuggestionSortMethod).mjava","sourceNew":"  private int generateBreakUpSuggestions(Term term, IndexReader ir,\n      int numberBreaks, int maxSuggestions, int useMinSuggestionFrequency,\n      SuggestWord[] prefix, Queue<SuggestWordArrayWrapper> suggestions,\n      int totalEvaluations, BreakSuggestionSortMethod sortMethod)\n      throws IOException {\n    String termText = term.text();\n    int termLength = termText.codePointCount(0, termText.length());\n    int useMinBreakWordLength = minBreakWordLength;\n    if (useMinBreakWordLength < 1) {\n      useMinBreakWordLength = 1;\n    }\n    if (termLength < (useMinBreakWordLength * 2)) {\n      return 0;\n    }    \n    \n    int thisTimeEvaluations = 0;\n    for (int i = useMinBreakWordLength; i <= (termLength - useMinBreakWordLength); i++) {\n      int end = termText.offsetByCodePoints(0, i);\n      String leftText = termText.substring(0, end);\n      String rightText = termText.substring(end);\n      SuggestWord leftWord = generateSuggestWord(ir, term.field(), leftText);\n      \n      if (leftWord.freq >= useMinSuggestionFrequency) {\n        SuggestWord rightWord = generateSuggestWord(ir, term.field(), rightText);\n        if (rightWord.freq >= useMinSuggestionFrequency) {\n          SuggestWordArrayWrapper suggestion = new SuggestWordArrayWrapper(\n              newSuggestion(prefix, leftWord, rightWord));\n          suggestions.offer(suggestion);\n          if (suggestions.size() > maxSuggestions) {\n            suggestions.poll();\n          }\n        }        \n        int newNumberBreaks = numberBreaks + 1;\n        if (newNumberBreaks <= maxChanges) {\n          int evaluations = generateBreakUpSuggestions(new Term(term.field(),\n              rightWord.string), ir, newNumberBreaks, maxSuggestions,\n              useMinSuggestionFrequency, newPrefix(prefix, leftWord),\n              suggestions, totalEvaluations, sortMethod);\n          totalEvaluations += evaluations;\n        }\n      }\n      \n      thisTimeEvaluations++;\n      totalEvaluations++;\n      if (totalEvaluations >= maxEvaluations) {\n        break;\n      }\n    }\n    return thisTimeEvaluations;\n  }\n\n","sourceOld":"  private int generateBreakUpSuggestions(Term term, IndexReader ir,\n      int numberBreaks, int maxSuggestions, int useMinSuggestionFrequency,\n      SuggestWord[] prefix, Queue<SuggestWordArrayWrapper> suggestions,\n      int totalEvaluations, BreakSuggestionSortMethod sortMethod)\n      throws IOException {\n    int termLength = term.bytes().length;\n    int useMinBreakWordLength = minBreakWordLength;\n    if (useMinBreakWordLength < 1) {\n      useMinBreakWordLength = 1;\n    }\n    if (termLength <= (useMinBreakWordLength * 2)) {\n      return 0;\n    }\n    \n    int thisTimeEvaluations = 0;\n    BytesRef termBytes = term.bytes().clone();\n    for (int i = useMinBreakWordLength; i < (termLength - useMinBreakWordLength); i++) {\n      SuggestWord leftWord = generateSuggestWord(ir, termBytes, 0, i, term\n          .field());\n      \n      if (leftWord.freq >= useMinSuggestionFrequency) {\n        SuggestWord rightWord = generateSuggestWord(ir, termBytes, i,\n            termLength - i, term.field());\n        if (rightWord.freq >= useMinSuggestionFrequency) {\n          SuggestWordArrayWrapper suggestion = new SuggestWordArrayWrapper(\n              newSuggestion(prefix, leftWord, rightWord));\n          suggestions.offer(suggestion);\n          if (suggestions.size() > maxSuggestions) {\n            suggestions.poll();\n          }\n        }\n        \n        int newNumberBreaks = numberBreaks + 1;\n        if (newNumberBreaks <= maxChanges) {\n          int evaluations = generateBreakUpSuggestions(new Term(term.field(),\n              rightWord.string), ir, newNumberBreaks, maxSuggestions,\n              useMinSuggestionFrequency, newPrefix(prefix, leftWord),\n              suggestions, totalEvaluations, sortMethod);\n          totalEvaluations += evaluations;\n        }\n      }\n      thisTimeEvaluations++;\n      totalEvaluations++;\n      if (totalEvaluations >= maxEvaluations) {\n        break;\n      }\n    }\n    return thisTimeEvaluations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0d8448be43e6bd7d69aa0227187fca146a1f2262","efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0"]},"commit2Childs":{"0d8448be43e6bd7d69aa0227187fca146a1f2262":["efb805b23fcd6a1644c8bb2f14edb45b1afd97a0","407687e67faf6e1f02a211ca078d8e3eed631027"],"efb805b23fcd6a1644c8bb2f14edb45b1afd97a0":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d8448be43e6bd7d69aa0227187fca146a1f2262"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}