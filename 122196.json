{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}