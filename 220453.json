{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","commits":[{"id":"e460f059c59ca6be827d6de9a0e26f526b9414c0","date":1456270863,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           });\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           });\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12b53ecc8c96eda774de891182d2275d981caf78","date":1456536351,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           });\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           });\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new PointInSetQuery.Stream() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","bugFix":["e460f059c59ca6be827d6de9a0e26f526b9414c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new PointInSetQuery.Stream() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testInvalidPointInSetQuery().mjava","sourceNew":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new PointInSetQuery.Stream() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testInvalidPointInSetQuery() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,\n                                                     () -> {\n                                                       new PointInSetQuery(\"foo\", 3, 4,\n                                                                           new BytesRefIterator() {\n                                                                             @Override\n                                                                             public BytesRef next() {\n                                                                               return new BytesRef(new byte[3]);\n                                                                             }\n                                                                           }) {\n                                                         @Override\n                                                         protected String toString(byte[] point) {\n                                                           return Arrays.toString(point);\n                                                         }\n                                                       };\n                                                     });\n    assertEquals(\"packed point length should be 12 but got 3; field=\\\"foo\\\" numDims=3 bytesPerDim=4\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","12b53ecc8c96eda774de891182d2275d981caf78"],"e460f059c59ca6be827d6de9a0e26f526b9414c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e460f059c59ca6be827d6de9a0e26f526b9414c0"],"12b53ecc8c96eda774de891182d2275d981caf78":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["12b53ecc8c96eda774de891182d2275d981caf78","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["12b53ecc8c96eda774de891182d2275d981caf78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e460f059c59ca6be827d6de9a0e26f526b9414c0":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["af2638813028b254a88b418ebeafb541afb49653","12b53ecc8c96eda774de891182d2275d981caf78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e460f059c59ca6be827d6de9a0e26f526b9414c0","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"12b53ecc8c96eda774de891182d2275d981caf78":["af2638813028b254a88b418ebeafb541afb49653","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}