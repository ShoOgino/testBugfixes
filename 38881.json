{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c518d12136e15c9de6fa3d2c4bf5add07311a685","date":1313718511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getTimeUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getTimeUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.docsUpperBound > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.docsUpperBound);\n    }\n    if (commitTracker.timeUpperBound > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.autoCommitCount);\n    if (softCommitTracker.docsUpperBound > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.docsUpperBound);\n    }\n    if (softCommitTracker.timeUpperBound > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.timeUpperBound + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.autoCommitCount);\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41032ffdc1e5e20825db9131923960a0a10f9282","date":1315578024,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getTimeUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getTimeUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getTimeUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a9f706b24fca795a360a7221beb9a17a999079","date":1317684140,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getTimeUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71cebd10a262917aafafd5c4b659ca31b632f1db","date":1384452445,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n    lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cd111b29d107a78697acf7b35600d50be2d7018","date":1384476488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n    lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n    lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.longValue());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.longValue());\n    lst.add(\"rollbacks\", rollbackCommands.longValue());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.longValue());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.longValue());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.longValue());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.longValue());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.longValue());\n    lst.add(\"rollbacks\", rollbackCommands.longValue());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.longValue());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.longValue());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.longValue());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.longValue());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.longValue());\n    lst.add(\"rollbacks\", rollbackCommands.longValue());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.longValue());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.longValue());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.longValue());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.get());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.get());\n    lst.add(\"rollbacks\", rollbackCommands.get());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.get());\n    lst.add(\"docsPending\", numDocsPending.get());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.get());\n    lst.add(\"deletesById\", deleteByIdCommands.get());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.get());\n    lst.add(\"errors\", numErrors.get());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.get());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.get());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.get());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.get());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.getCount());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.getCount());\n    lst.add(\"rollbacks\", rollbackCommands.getCount());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.getCount());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.getCount());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.getCount());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.longValue());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.longValue());\n    lst.add(\"rollbacks\", rollbackCommands.longValue());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.longValue());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.longValue());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.longValue());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.longValue());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.getCount());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.getCount());\n    lst.add(\"rollbacks\", rollbackCommands.getCount());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.getCount());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.getCount());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.getCount());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList lst = new SimpleOrderedMap();\n    lst.add(\"commits\", commitCommands.getCount());\n    if (commitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"autocommit maxDocs\", commitTracker.getDocsUpperBound());\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"autocommit maxTime\", \"\" + commitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"autocommits\", commitTracker.getCommitCount());\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      lst.add(\"soft autocommit maxDocs\", softCommitTracker.getDocsUpperBound());\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      lst.add(\"soft autocommit maxTime\", \"\" + softCommitTracker.getTimeUpperBound() + \"ms\");\n    }\n    lst.add(\"soft autocommits\", softCommitTracker.getCommitCount());\n    lst.add(\"optimizes\", optimizeCommands.getCount());\n    lst.add(\"rollbacks\", rollbackCommands.getCount());\n    lst.add(\"expungeDeletes\", expungeDeleteCommands.getCount());\n    lst.add(\"docsPending\", numDocsPending.longValue());\n    // pset.size() not synchronized, but it should be fine to access.\n    // lst.add(\"deletesPending\", pset.size());\n    lst.add(\"adds\", addCommands.longValue());\n    lst.add(\"deletesById\", deleteByIdCommands.longValue());\n    lst.add(\"deletesByQuery\", deleteByQueryCommands.longValue());\n    lst.add(\"errors\", numErrors.longValue());\n    lst.add(\"cumulative_adds\", addCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesById\", deleteByIdCommandsCumulative.getCount());\n    lst.add(\"cumulative_deletesByQuery\", deleteByQueryCommandsCumulative.getCount());\n    lst.add(\"cumulative_errors\", numErrorsCumulative.getCount());\n    if (this.ulog != null) {\n      lst.add(\"transaction_logs_total_size\", ulog.getTotalLogsSize());\n      lst.add(\"transaction_logs_total_number\", ulog.getTotalLogsNumber());\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71cebd10a262917aafafd5c4b659ca31b632f1db":["7530de27b87b961b51f01bd1299b7004d46e8823"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["28a9f706b24fca795a360a7221beb9a17a999079","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["8cd111b29d107a78697acf7b35600d50be2d7018"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8cd111b29d107a78697acf7b35600d50be2d7018","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"8cd111b29d107a78697acf7b35600d50be2d7018":["71cebd10a262917aafafd5c4b659ca31b632f1db"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28a9f706b24fca795a360a7221beb9a17a999079":["41032ffdc1e5e20825db9131923960a0a10f9282"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["71cebd10a262917aafafd5c4b659ca31b632f1db","8cd111b29d107a78697acf7b35600d50be2d7018"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["c26f00b574427b55127e869b935845554afde1fa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["28a9f706b24fca795a360a7221beb9a17a999079"],"41032ffdc1e5e20825db9131923960a0a10f9282":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["8cd111b29d107a78697acf7b35600d50be2d7018","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"71cebd10a262917aafafd5c4b659ca31b632f1db":["8cd111b29d107a78697acf7b35600d50be2d7018","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c21eddb989aed5815d30ea4c8abf481ace8ad","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8cd111b29d107a78697acf7b35600d50be2d7018":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"28a9f706b24fca795a360a7221beb9a17a999079":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["41032ffdc1e5e20825db9131923960a0a10f9282"],"7530de27b87b961b51f01bd1299b7004d46e8823":["71cebd10a262917aafafd5c4b659ca31b632f1db","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"41032ffdc1e5e20825db9131923960a0a10f9282":["28a9f706b24fca795a360a7221beb9a17a999079"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}