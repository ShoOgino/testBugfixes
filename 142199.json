{"path":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCatTime() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    CreateTimeRoutedAlias TRA_Dim = createTimeRoutedAlias(getAlias(), \"2019-07-01T00:00:00Z\", \"+1DAY\",\n        getTimeField(), null);\n    CreateCategoryRoutedAlias CRA_Dim = createCategoryRoutedAlias(null, getCatField(), 20, null);\n\n    CollectionAdminRequest.DimensionalRoutedAlias dra = CollectionAdminRequest.createDimensionalRoutedAlias(getAlias(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(2), CRA_Dim, TRA_Dim);\n\n    SolrParams params = dra.getParams();\n    assertEquals(\"Dimensional[CATEGORY,TIME]\", params.get(CollectionAdminRequest.RoutedAliasAdminRequest.ROUTER_TYPE_NAME));\n    System.out.println(params);\n    assertEquals(\"20\", params.get(\"router.0.maxCardinality\"));\n    assertEquals(\"2019-07-01T00:00:00Z\", params.get(\"router.1.start\"));\n\n    dra.process(solrClient);\n\n    String firstCol = catTimeDraColFor(CategoryRoutedAlias.UNINITIALIZED, \"2019-07-01\");\n    cluster.waitForActiveCollection(firstCol, 2, 4);\n\n    // cat field... har har.. get it? ... category/cat... ...oh never mind.\n    addDocsAndCommit(true, newDoc(\"tabby\", \"2019-07-02T00:00:00Z\"));\n\n    assertCatTimeInvariants(\n        ap(\n            firstCol,\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\"\n        )\n    );\n\n    addDocsAndCommit(true, newDoc(\"calico\", \"2019-07-02T00:00:00Z\"));\n\n    // initial col should be removed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    testFailedDocument(\"shorthair\",     \"2017-10-23T00:00:00Z\", \"couldn't be routed\" );\n    testFailedDocument(\"shorthair\",     \"2020-10-23T00:00:00Z\", \"too far in the future\" );\n    testFailedDocument(null,            \"2019-07-02T00:00:00Z\", \"Route value is null\");\n    testFailedDocument(\"foo__CRA__bar\", \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n    testFailedDocument(\"f贸贸CRA贸贸bar\",   \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs no new collections\n    addDocsAndCommit(true,\n        newDoc(\"calico\", \"2019-07-02T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-02T23:00:00Z\")\n    );\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs 2 new collections, in random order and maybe not using the alias\n    addDocsAndCommit(false,\n        newDoc(\"calico\", \"2019-07-04T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n            // tabby collections not filled in. No guarantee that time periods remain in sync\n            // across categories.\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with async pre-create.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.preemptiveCreateMath\", \"30MINUTE\").process(solrClient);\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // create 2 sync 1 async\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")     // does not create\n    );\n\n    waitColAndAlias(getAlias(), \"\", CRA + \"shorthair\" + TRA + \"2019-07-03\", 2);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // should be no change\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    /*\n     Here we need to be testing that something that should not be created (extra preemptive async collections)\n     didn't get created (a bug that actually got killed during development, and caused later asserts to\n     fail due to wrong number of collections). There's no way to set a watch for something that doesn't and\n     should never exist... Thus, the only choice is to sleep and make sure nothing appeared while we were asleep.\n    */\n    Thread.sleep(5000);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with auto-delete.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.autoDeleteAge\", \"/DAY-5DAY\").process(solrClient);\n\n    // this one should not yet cause deletion\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-05T23:00:00Z\")     // create 1\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-06T00:00:00Z\")     // create July 6, delete July 1\n    );\n    waitCoreCount(getAlias() + CRA + \"calico\" + TRA + \"2019-07-01\", 0);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"calico\", \"2019-07-06\"),\n            // note that other categories are unaffected\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // verify that all the documents ended up in the right collections.\n    QueryResponse resp = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"100\",\n        \"fl\",\"*,[shard]\",\n        \"sort\", \"id asc\"\n    ));\n    SolrDocumentList results = resp.getResults();\n    assertEquals(18, results.getNumFound());\n    for (SolrDocument result : results) {\n      String shard = String.valueOf(result.getFieldValue(\"[shard]\"));\n      String cat = String.valueOf(result.getFieldValue(\"cat_s\"));\n      Date date = (Date) result.getFieldValue(\"timestamp_dt\");\n      String day = date.toInstant().toString().split(\"T\")[0];\n      assertTrue(shard.contains(cat));\n      assertTrue(shard.contains(day));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8db1a29062b0caba93a26cd92a479ce55d58183f","date":1563544853,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","sourceNew":"  @Test\n  public void testCatTime() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    CreateTimeRoutedAlias TRA_Dim = createTimeRoutedAlias(getAlias(), \"2019-07-01T00:00:00Z\", \"+1DAY\",\n        getTimeField(), null);\n    CreateCategoryRoutedAlias CRA_Dim = createCategoryRoutedAlias(null, getCatField(), 20, null);\n\n    CollectionAdminRequest.DimensionalRoutedAlias dra = CollectionAdminRequest.createDimensionalRoutedAlias(getAlias(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(2), CRA_Dim, TRA_Dim);\n\n    SolrParams params = dra.getParams();\n    assertEquals(\"Dimensional[CATEGORY,TIME]\", params.get(CollectionAdminRequest.RoutedAliasAdminRequest.ROUTER_TYPE_NAME));\n    System.out.println(params);\n    assertEquals(\"20\", params.get(\"router.0.maxCardinality\"));\n    assertEquals(\"2019-07-01T00:00:00Z\", params.get(\"router.1.start\"));\n\n    dra.process(solrClient);\n\n    String firstCol = catTimeDraColFor(CategoryRoutedAlias.UNINITIALIZED, \"2019-07-01\");\n    cluster.waitForActiveCollection(firstCol, 2, 4);\n\n    // cat field... har har.. get it? ... category/cat... ...oh never mind.\n    addDocsAndCommit(true, newDoc(\"tabby\", \"2019-07-02T00:00:00Z\"));\n\n    assertCatTimeInvariants(\n        ap(\n            firstCol,\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\"\n        )\n    );\n\n    addDocsAndCommit(true, newDoc(\"calico\", \"2019-07-02T00:00:00Z\"));\n\n    // initial col should be removed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    testFailedDocument(\"shorthair\",     \"2017-10-23T00:00:00Z\", \"couldn't be routed\" );\n    testFailedDocument(\"shorthair\",     \"2020-10-23T00:00:00Z\", \"too far in the future\" );\n    testFailedDocument(null,            \"2019-07-02T00:00:00Z\", \"Route value is null\");\n    testFailedDocument(\"foo__CRA__bar\", \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n    testFailedDocument(\"f贸贸CRA贸贸bar\",   \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs no new collections\n    addDocsAndCommit(true,\n        newDoc(\"calico\", \"2019-07-02T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-02T23:00:00Z\")\n    );\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs 2 new collections, in random order and maybe not using the alias\n    addDocsAndCommit(false,\n        newDoc(\"calico\", \"2019-07-04T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n            // tabby collections not filled in. No guarantee that time periods remain in sync\n            // across categories.\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with async pre-create.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.preemptiveCreateMath\", \"30MINUTE\").process(solrClient);\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // create 2 sync 1 async\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")     // does not create\n    );\n\n    waitColAndAlias(getAlias(), \"\", CRA + \"shorthair\" + TRA + \"2019-07-03\", 2);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // should be no change\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    /*\n     Here we need to be testing that something that should not be created (extra preemptive async collections)\n     didn't get created (a bug that actually got killed during development, and caused later asserts to\n     fail due to wrong number of collections). There's no way to set a watch for something that doesn't and\n     should never exist... Thus, the only choice is to sleep and make sure nothing appeared while we were asleep.\n    */\n    Thread.sleep(5000);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with auto-delete.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.autoDeleteAge\", \"/DAY-5DAY\").process(solrClient);\n\n    // this one should not yet cause deletion\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-05T23:00:00Z\")     // create 1\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(true,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-06T00:00:00Z\")     // create July 6, delete July 1\n    );\n    waitCoreCount(getAlias() + CRA + \"calico\" + TRA + \"2019-07-01\", 0);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"calico\", \"2019-07-06\"),\n            // note that other categories are unaffected\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // verify that all the documents ended up in the right collections.\n    QueryResponse resp = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"100\",\n        \"fl\",\"*,[shard]\",\n        \"sort\", \"id asc\"\n    ));\n    SolrDocumentList results = resp.getResults();\n    assertEquals(18, results.getNumFound());\n    for (SolrDocument result : results) {\n      String shard = String.valueOf(result.getFieldValue(\"[shard]\"));\n      String cat = String.valueOf(result.getFieldValue(\"cat_s\"));\n      Date date = (Date) result.getFieldValue(\"timestamp_dt\");\n      String day = date.toInstant().toString().split(\"T\")[0];\n      assertTrue(shard.contains(cat));\n      assertTrue(shard.contains(day));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCatTime() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    CreateTimeRoutedAlias TRA_Dim = createTimeRoutedAlias(getAlias(), \"2019-07-01T00:00:00Z\", \"+1DAY\",\n        getTimeField(), null);\n    CreateCategoryRoutedAlias CRA_Dim = createCategoryRoutedAlias(null, getCatField(), 20, null);\n\n    CollectionAdminRequest.DimensionalRoutedAlias dra = CollectionAdminRequest.createDimensionalRoutedAlias(getAlias(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(2), CRA_Dim, TRA_Dim);\n\n    SolrParams params = dra.getParams();\n    assertEquals(\"Dimensional[CATEGORY,TIME]\", params.get(CollectionAdminRequest.RoutedAliasAdminRequest.ROUTER_TYPE_NAME));\n    System.out.println(params);\n    assertEquals(\"20\", params.get(\"router.0.maxCardinality\"));\n    assertEquals(\"2019-07-01T00:00:00Z\", params.get(\"router.1.start\"));\n\n    dra.process(solrClient);\n\n    String firstCol = catTimeDraColFor(CategoryRoutedAlias.UNINITIALIZED, \"2019-07-01\");\n    cluster.waitForActiveCollection(firstCol, 2, 4);\n\n    // cat field... har har.. get it? ... category/cat... ...oh never mind.\n    addDocsAndCommit(true, newDoc(\"tabby\", \"2019-07-02T00:00:00Z\"));\n\n    assertCatTimeInvariants(\n        ap(\n            firstCol,\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\"\n        )\n    );\n\n    addDocsAndCommit(true, newDoc(\"calico\", \"2019-07-02T00:00:00Z\"));\n\n    // initial col should be removed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    testFailedDocument(\"shorthair\",     \"2017-10-23T00:00:00Z\", \"couldn't be routed\" );\n    testFailedDocument(\"shorthair\",     \"2020-10-23T00:00:00Z\", \"too far in the future\" );\n    testFailedDocument(null,            \"2019-07-02T00:00:00Z\", \"Route value is null\");\n    testFailedDocument(\"foo__CRA__bar\", \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n    testFailedDocument(\"f贸贸CRA贸贸bar\",   \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs no new collections\n    addDocsAndCommit(true,\n        newDoc(\"calico\", \"2019-07-02T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-02T23:00:00Z\")\n    );\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs 2 new collections, in random order and maybe not using the alias\n    addDocsAndCommit(false,\n        newDoc(\"calico\", \"2019-07-04T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n            // tabby collections not filled in. No guarantee that time periods remain in sync\n            // across categories.\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with async pre-create.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.preemptiveCreateMath\", \"30MINUTE\").process(solrClient);\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // create 2 sync 1 async\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")     // does not create\n    );\n\n    waitColAndAlias(getAlias(), \"\", CRA + \"shorthair\" + TRA + \"2019-07-03\", 2);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // should be no change\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    /*\n     Here we need to be testing that something that should not be created (extra preemptive async collections)\n     didn't get created (a bug that actually got killed during development, and caused later asserts to\n     fail due to wrong number of collections). There's no way to set a watch for something that doesn't and\n     should never exist... Thus, the only choice is to sleep and make sure nothing appeared while we were asleep.\n    */\n    Thread.sleep(5000);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with auto-delete.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.autoDeleteAge\", \"/DAY-5DAY\").process(solrClient);\n\n    // this one should not yet cause deletion\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-05T23:00:00Z\")     // create 1\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-06T00:00:00Z\")     // create July 6, delete July 1\n    );\n    waitCoreCount(getAlias() + CRA + \"calico\" + TRA + \"2019-07-01\", 0);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"calico\", \"2019-07-06\"),\n            // note that other categories are unaffected\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // verify that all the documents ended up in the right collections.\n    QueryResponse resp = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"100\",\n        \"fl\",\"*,[shard]\",\n        \"sort\", \"id asc\"\n    ));\n    SolrDocumentList results = resp.getResults();\n    assertEquals(18, results.getNumFound());\n    for (SolrDocument result : results) {\n      String shard = String.valueOf(result.getFieldValue(\"[shard]\"));\n      String cat = String.valueOf(result.getFieldValue(\"cat_s\"));\n      Date date = (Date) result.getFieldValue(\"timestamp_dt\");\n      String day = date.toInstant().toString().split(\"T\")[0];\n      assertTrue(shard.contains(cat));\n      assertTrue(shard.contains(day));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/DimensionalRoutedAliasUpdateProcessorTest#testCatTime().mjava","sourceNew":"  @Test\n  public void testCatTime() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    CreateTimeRoutedAlias TRA_Dim = createTimeRoutedAlias(getAlias(), \"2019-07-01T00:00:00Z\", \"+1DAY\",\n        getTimeField(), null);\n    CreateCategoryRoutedAlias CRA_Dim = createCategoryRoutedAlias(null, getCatField(), 20, null);\n\n    CollectionAdminRequest.DimensionalRoutedAlias dra = CollectionAdminRequest.createDimensionalRoutedAlias(getAlias(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2), CRA_Dim, TRA_Dim);\n\n    SolrParams params = dra.getParams();\n    assertEquals(\"Dimensional[CATEGORY,TIME]\", params.get(CollectionAdminRequest.RoutedAliasAdminRequest.ROUTER_TYPE_NAME));\n    System.out.println(params);\n    assertEquals(\"20\", params.get(\"router.0.maxCardinality\"));\n    assertEquals(\"2019-07-01T00:00:00Z\", params.get(\"router.1.start\"));\n\n    dra.process(solrClient);\n\n    String firstCol = catTimeDraColFor(CategoryRoutedAlias.UNINITIALIZED, \"2019-07-01\");\n    cluster.waitForActiveCollection(firstCol, 2, 4);\n\n    // cat field... har har.. get it? ... category/cat... ...oh never mind.\n    addDocsAndCommit(true, newDoc(\"tabby\", \"2019-07-02T00:00:00Z\"));\n\n    assertCatTimeInvariants(\n        ap(\n            firstCol,\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\"\n        )\n    );\n\n    addDocsAndCommit(true, newDoc(\"calico\", \"2019-07-02T00:00:00Z\"));\n\n    // initial col should be removed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    testFailedDocument(\"shorthair\",     \"2017-10-23T00:00:00Z\", \"couldn't be routed\" );\n    testFailedDocument(\"shorthair\",     \"2020-10-23T00:00:00Z\", \"too far in the future\" );\n    testFailedDocument(null,            \"2019-07-02T00:00:00Z\", \"Route value is null\");\n    testFailedDocument(\"foo__CRA__bar\", \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n    testFailedDocument(\"f贸贸CRA贸贸bar\",   \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs no new collections\n    addDocsAndCommit(true,\n        newDoc(\"calico\", \"2019-07-02T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-02T23:00:00Z\")\n    );\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs 2 new collections, in random order and maybe not using the alias\n    addDocsAndCommit(false,\n        newDoc(\"calico\", \"2019-07-04T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n            // tabby collections not filled in. No guarantee that time periods remain in sync\n            // across categories.\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with async pre-create.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.preemptiveCreateMath\", \"30MINUTE\").process(solrClient);\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // create 2 sync 1 async\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")     // does not create\n    );\n\n    waitColAndAlias(getAlias(), \"\", CRA + \"shorthair\" + TRA + \"2019-07-03\", 2);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // should be no change\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    /*\n     Here we need to be testing that something that should not be created (extra preemptive async collections)\n     didn't get created (a bug that actually got killed during development, and caused later asserts to\n     fail due to wrong number of collections). There's no way to set a watch for something that doesn't and\n     should never exist... Thus, the only choice is to sleep and make sure nothing appeared while we were asleep.\n    */\n    Thread.sleep(5000);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with auto-delete.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.autoDeleteAge\", \"/DAY-5DAY\").process(solrClient);\n\n    // this one should not yet cause deletion\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-05T23:00:00Z\")     // create 1\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(true,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-06T00:00:00Z\")     // create July 6, delete July 1\n    );\n    waitCoreCount(getAlias() + CRA + \"calico\" + TRA + \"2019-07-01\", 0);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"calico\", \"2019-07-06\"),\n            // note that other categories are unaffected\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // verify that all the documents ended up in the right collections.\n    QueryResponse resp = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"100\",\n        \"fl\",\"*,[shard]\",\n        \"sort\", \"id asc\"\n    ));\n    SolrDocumentList results = resp.getResults();\n    assertEquals(18, results.getNumFound());\n    for (SolrDocument result : results) {\n      String shard = String.valueOf(result.getFieldValue(\"[shard]\"));\n      String cat = String.valueOf(result.getFieldValue(\"cat_s\"));\n      Date date = (Date) result.getFieldValue(\"timestamp_dt\");\n      String day = date.toInstant().toString().split(\"T\")[0];\n      assertTrue(shard.contains(cat));\n      assertTrue(shard.contains(day));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCatTime() throws Exception {\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    CreateTimeRoutedAlias TRA_Dim = createTimeRoutedAlias(getAlias(), \"2019-07-01T00:00:00Z\", \"+1DAY\",\n        getTimeField(), null);\n    CreateCategoryRoutedAlias CRA_Dim = createCategoryRoutedAlias(null, getCatField(), 20, null);\n\n    CollectionAdminRequest.DimensionalRoutedAlias dra = CollectionAdminRequest.createDimensionalRoutedAlias(getAlias(),\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 2, 2)\n            .setMaxShardsPerNode(2), CRA_Dim, TRA_Dim);\n\n    SolrParams params = dra.getParams();\n    assertEquals(\"Dimensional[CATEGORY,TIME]\", params.get(CollectionAdminRequest.RoutedAliasAdminRequest.ROUTER_TYPE_NAME));\n    System.out.println(params);\n    assertEquals(\"20\", params.get(\"router.0.maxCardinality\"));\n    assertEquals(\"2019-07-01T00:00:00Z\", params.get(\"router.1.start\"));\n\n    dra.process(solrClient);\n\n    String firstCol = catTimeDraColFor(CategoryRoutedAlias.UNINITIALIZED, \"2019-07-01\");\n    cluster.waitForActiveCollection(firstCol, 2, 4);\n\n    // cat field... har har.. get it? ... category/cat... ...oh never mind.\n    addDocsAndCommit(true, newDoc(\"tabby\", \"2019-07-02T00:00:00Z\"));\n\n    assertCatTimeInvariants(\n        ap(\n            firstCol,\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\"\n        )\n    );\n\n    addDocsAndCommit(true, newDoc(\"calico\", \"2019-07-02T00:00:00Z\"));\n\n    // initial col should be removed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    testFailedDocument(\"shorthair\",     \"2017-10-23T00:00:00Z\", \"couldn't be routed\" );\n    testFailedDocument(\"shorthair\",     \"2020-10-23T00:00:00Z\", \"too far in the future\" );\n    testFailedDocument(null,            \"2019-07-02T00:00:00Z\", \"Route value is null\");\n    testFailedDocument(\"foo__CRA__bar\", \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n    testFailedDocument(\"f贸贸CRA贸贸bar\",   \"2019-07-02T00:00:00Z\", \"7 character sequence __CRA__\");\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs no new collections\n    addDocsAndCommit(true,\n        newDoc(\"calico\", \"2019-07-02T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-02T23:00:00Z\")\n    );\n\n    // hopefully nothing changed\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // 4 docs 2 new collections, in random order and maybe not using the alias\n    addDocsAndCommit(false,\n        newDoc(\"calico\", \"2019-07-04T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T00:00:00Z\"),\n        newDoc(\"tabby\", \"2019-07-01T23:00:00Z\"),\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n            // tabby collections not filled in. No guarantee that time periods remain in sync\n            // across categories.\n        ),\n        ap(\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with async pre-create.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.preemptiveCreateMath\", \"30MINUTE\").process(solrClient);\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // create 2 sync 1 async\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")     // does not create\n    );\n\n    waitColAndAlias(getAlias(), \"\", CRA + \"shorthair\" + TRA + \"2019-07-03\", 2);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:40:00Z\"), // should be no change\n        newDoc(\"calico\", \"2019-07-03T23:00:00Z\")\n    );\n\n    /*\n     Here we need to be testing that something that should not be created (extra preemptive async collections)\n     didn't get created (a bug that actually got killed during development, and caused later asserts to\n     fail due to wrong number of collections). There's no way to set a watch for something that doesn't and\n     should never exist... Thus, the only choice is to sleep and make sure nothing appeared while we were asleep.\n    */\n    Thread.sleep(5000);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // now test with auto-delete.\n    CollectionAdminRequest.setAliasProperty(getAlias())\n        .addProperty(\"router.1.autoDeleteAge\", \"/DAY-5DAY\").process(solrClient);\n\n    // this one should not yet cause deletion\n    addDocsAndCommit(false,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-05T23:00:00Z\")     // create 1\n    );\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-01\"),\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    addDocsAndCommit(true,\n        newDoc(\"shorthair\", \"2019-07-02T23:00:00Z\"), // no effect expected\n        newDoc(\"calico\", \"2019-07-06T00:00:00Z\")     // create July 6, delete July 1\n    );\n    waitCoreCount(getAlias() + CRA + \"calico\" + TRA + \"2019-07-01\", 0);\n\n    assertCatTimeInvariants(\n        ap(\n            catTimeDraColFor(\"calico\", \"2019-07-02\"),\n            catTimeDraColFor(\"calico\", \"2019-07-03\"),\n            catTimeDraColFor(\"calico\", \"2019-07-04\"),\n            catTimeDraColFor(\"calico\", \"2019-07-05\"),\n            catTimeDraColFor(\"calico\", \"2019-07-06\"),\n            // note that other categories are unaffected\n            catTimeDraColFor(\"shorthair\", \"2019-07-01\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-02\"),\n            catTimeDraColFor(\"shorthair\", \"2019-07-03\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-01\"),\n            catTimeDraColFor(\"tabby\", \"2019-07-02\")\n        ),\n        ap(\n            \"shorthair\",\n            \"tabby\",\n            \"calico\"\n        )\n    );\n\n    // verify that all the documents ended up in the right collections.\n    QueryResponse resp = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"100\",\n        \"fl\",\"*,[shard]\",\n        \"sort\", \"id asc\"\n    ));\n    SolrDocumentList results = resp.getResults();\n    assertEquals(18, results.getNumFound());\n    for (SolrDocument result : results) {\n      String shard = String.valueOf(result.getFieldValue(\"[shard]\"));\n      String cat = String.valueOf(result.getFieldValue(\"cat_s\"));\n      Date date = (Date) result.getFieldValue(\"timestamp_dt\");\n      String day = date.toInstant().toString().split(\"T\")[0];\n      assertTrue(shard.contains(cat));\n      assertTrue(shard.contains(day));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8db1a29062b0caba93a26cd92a479ce55d58183f":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["8db1a29062b0caba93a26cd92a479ce55d58183f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"8db1a29062b0caba93a26cd92a479ce55d58183f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["8db1a29062b0caba93a26cd92a479ce55d58183f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}