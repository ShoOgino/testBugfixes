{"path":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#executeCommand(String,HttpClient,String,JsonWebSignature).mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#executeCommand(String,HttpClient,String,JsonWebSignature).mjava","pathOld":"/dev/null","sourceNew":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#executeCommand(String,HttpClient,String,JsonWebSignature).mjava","pathOld":"/dev/null","sourceNew":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1747a7f5fca08ea77329319431be445d363ba102","date":1565643834,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#executeCommand(String,HttpClient,String,JsonWebSignature).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest#executeCommand(String,HttpClient,String,JsonWebSignature).mjava","sourceNew":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws)\n    throws Exception {\n    \n    // HACK: work around for SOLR-13464...\n    //\n    // note the authz/authn objects in use on each node before executing the command,\n    // then wait until we see new objects on every node *after* executing the command\n    // before returning...\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    // HACK (continued)...\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n    \n  }\n\n","sourceOld":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1747a7f5fca08ea77329319431be445d363ba102":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1747a7f5fca08ea77329319431be445d363ba102"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"1747a7f5fca08ea77329319431be445d363ba102":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["1747a7f5fca08ea77329319431be445d363ba102","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}