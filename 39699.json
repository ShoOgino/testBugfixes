{"path":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/Field#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\r\n   * multiplied into the score of all hits on this this field of this\r\n   * document.\r\n   *\r\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\r\n   * containing this field.  If a document has multiple fields with the same\r\n   * name, all such values are multiplied together.  This product is then\r\n   * multipled by the value {@link org.apache.lucene.search.Similarity#lengthNorm(String,int)}, and\r\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\r\n   * index.  One should attempt to ensure that this product does not overflow\r\n   * the range of that encoding.\r\n   *\r\n   * @see org.apache.lucene.document.Document#setBoost(float)\r\n   * @see org.apache.lucene.search.Similarity#lengthNorm(String, int)\r\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\r\n   */\r\n  public void setBoost(float boost) {\r\n    this.boost = boost;\r\n  }\r\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * multipled by the value {@link Similarity#lengthNorm(String,int)}, and\n   * rounded by {@link Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see Document#setBoost(float)\n   * @see Similarity#lengthNorm(String, int)\n   * @see Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * multipled by the value {@link org.apache.lucene.search.Similarity#lengthNorm(String,int)}, and\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#lengthNorm(String, int)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\r\n   * multiplied into the score of all hits on this this field of this\r\n   * document.\r\n   *\r\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\r\n   * containing this field.  If a document has multiple fields with the same\r\n   * name, all such values are multiplied together.  This product is then\r\n   * multipled by the value {@link org.apache.lucene.search.Similarity#lengthNorm(String,int)}, and\r\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\r\n   * index.  One should attempt to ensure that this product does not overflow\r\n   * the range of that encoding.\r\n   *\r\n   * @see org.apache.lucene.document.Document#setBoost(float)\r\n   * @see org.apache.lucene.search.Similarity#lengthNorm(String, int)\r\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\r\n   */\r\n  public void setBoost(float boost) {\r\n    this.boost = boost;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * multipled by the value {@link org.apache.lucene.search.Similarity#lengthNorm(String,int)}, and\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#lengthNorm(String, int)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNormValue(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNormValue(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"2123bddbd65dea198cac380540636ce43a880403":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["2123bddbd65dea198cac380540636ce43a880403"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}