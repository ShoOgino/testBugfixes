{"path":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","commits":[{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],SolrQueryResponse,GroupingSpecification,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  public void transform(Map<String, ?> result, SolrQueryResponse response, GroupingSpecification groupingSpecification, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", topGroups.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(groupingSpecification.getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(groupingSpecification.getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    response.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af20870f6eab3807c968eec0b24e0c4358d0c1e5","date":1337002937,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        if (topGroups.totalGroupCount != null) {\n          command.add(\"ngroups\", topGroups.totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","date":1344218343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 0.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551b618ad1745c3c76fc0f486967486d5a0590ad","date":1366639690,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new NamedList<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<Object>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<NamedList>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<Object>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<Object>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f20d97ebbd280405cebcc21d53c781bf4456453","date":1480454130,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString(), 1.0f))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":["286e1dbf267cac3961c3fc116b9069797ad7d1c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getTopDocs().getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getTopDocs().getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          docList.setNumFound(group.totalHits);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        docList.setNumFound(queryCommandResult.getTopDocs().totalHits);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"286e1dbf267cac3961c3fc116b9069797ad7d1c2","date":1556472718,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            groupResult.add(\n                \"groupValue\", groupFieldType.toObject(groupField.createField(group.groupValue.utf8ToString()))\n            );\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829","acd9883560fd89e6448b2b447302fe543040cd4f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60249c92febca812553a8b1c73add39354c5f57f","date":1559919910,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          for (ScoreDoc scoreDoc : group.scoreDocs) {\n            docList.add(solrDocumentSource.retrieve(scoreDoc));\n          }\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        for (ScoreDoc scoreDoc :queryCommandResult.getTopDocs().scoreDocs){\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85bef26bbc598445704c1f9c6d7953f3942d5426","date":1562162588,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(withinGroupSortSpec.getOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(withinGroupSortSpec.getOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(rb.getGroupingSpec().getWithinGroupOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        @SuppressWarnings({\"rawtypes\"})\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(withinGroupSortSpec.getOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(withinGroupSortSpec.getOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(withinGroupSortSpec.getOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(withinGroupSortSpec.getOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06eb5f96c63fb4bd8b194a33fd050326145d5070","date":1595538555,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        List<NamedList<Object>> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(withinGroupSortSpec.getOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(withinGroupSortSpec.getOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    NamedList<Object> commands = new SimpleOrderedMap<>();\n    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();\n    for (Map.Entry<String, ?> entry : result.entrySet()) {\n      Object value = entry.getValue();\n      if (TopGroups.class.isInstance(value)) {\n        @SuppressWarnings(\"unchecked\")\n        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", rb.totalHitCount);\n        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());\n        if (totalGroupCount != null) {\n          command.add(\"ngroups\", totalGroupCount);\n        }\n\n        @SuppressWarnings({\"rawtypes\"})\n        List<NamedList> groups = new ArrayList<>();\n        SchemaField groupField = searcher.getSchema().getField(entry.getKey());\n        FieldType groupFieldType = groupField.getType();\n        for (GroupDocs<BytesRef> group : topGroups.groups) {\n          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();\n          if (group.groupValue != null) {\n            // use createFields so that fields having doc values are also supported\n            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());\n            if (CollectionUtils.isNotEmpty(fields)) {\n              groupResult.add(\"groupValue\", groupFieldType.toObject(fields.get(0)));\n            } else {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                  + \", field: \" + groupField);\n            }\n          } else {\n            groupResult.add(\"groupValue\", null);\n          }\n          SolrDocumentList docList = new SolrDocumentList();\n          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n          docList.setNumFound(group.totalHits.value);\n          if (!Float.isNaN(group.maxScore)) {\n            docList.setMaxScore(group.maxScore);\n          }\n          docList.setStart(withinGroupSortSpec.getOffset());\n          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);\n          groupResult.add(\"doclist\", docList);\n          groups.add(groupResult);\n        }\n        command.add(\"groups\", groups);\n        commands.add(entry.getKey(), command);\n      } else if (QueryCommandResult.class.isInstance(value)) {\n        QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n        NamedList<Object> command = new SimpleOrderedMap<>();\n        command.add(\"matches\", queryCommandResult.getMatches());\n        SolrDocumentList docList = new SolrDocumentList();\n        TopDocs topDocs = queryCommandResult.getTopDocs();\n        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n        docList.setNumFound(topDocs.totalHits.value);\n        if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n          docList.setMaxScore(queryCommandResult.getMaxScore());\n        }\n        docList.setStart(withinGroupSortSpec.getOffset());\n        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);\n        command.add(\"doclist\", docList);\n        commands.add(entry.getKey(), command);\n      }\n    }\n    rb.rsp.add(\"grouped\", commands);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["acd9883560fd89e6448b2b447302fe543040cd4f","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["acd9883560fd89e6448b2b447302fe543040cd4f"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"551b618ad1745c3c76fc0f486967486d5a0590ad":["7530de27b87b961b51f01bd1299b7004d46e8823"],"60249c92febca812553a8b1c73add39354c5f57f":["286e1dbf267cac3961c3fc116b9069797ad7d1c2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["af20870f6eab3807c968eec0b24e0c4358d0c1e5","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3f20d97ebbd280405cebcc21d53c781bf4456453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"9856095f7afb5a607bf5e65077615ed91273508c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b101c3c0e7f5871415e80d970cb3289309f3522e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["551b618ad1745c3c76fc0f486967486d5a0590ad"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"286e1dbf267cac3961c3fc116b9069797ad7d1c2":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["60249c92febca812553a8b1c73add39354c5f57f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["af20870f6eab3807c968eec0b24e0c4358d0c1e5","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"acd9883560fd89e6448b2b447302fe543040cd4f":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06eb5f96c63fb4bd8b194a33fd050326145d5070"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"551b618ad1745c3c76fc0f486967486d5a0590ad":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"60249c92febca812553a8b1c73add39354c5f57f":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","7530de27b87b961b51f01bd1299b7004d46e8823"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"b101c3c0e7f5871415e80d970cb3289309f3522e":["9856095f7afb5a607bf5e65077615ed91273508c","acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["286e1dbf267cac3961c3fc116b9069797ad7d1c2"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b101c3c0e7f5871415e80d970cb3289309f3522e","9856095f7afb5a607bf5e65077615ed91273508c","3f20d97ebbd280405cebcc21d53c781bf4456453"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"286e1dbf267cac3961c3fc116b9069797ad7d1c2":["60249c92febca812553a8b1c73add39354c5f57f"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["06eb5f96c63fb4bd8b194a33fd050326145d5070"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","551b618ad1745c3c76fc0f486967486d5a0590ad"],"acd9883560fd89e6448b2b447302fe543040cd4f":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c7869f64c874ebf7f317d22c00baf2b6857797a6","9856095f7afb5a607bf5e65077615ed91273508c","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}