{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6ef1ac57615594df99b4d227449fa09de6c255f","date":1331046752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":["08932c793647a36953d1816b1060121f48820d3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0)\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c22d44fa0ab988ba3253471cce23610e45a91052","date":1337131019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldName(fieldInfos, fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldName(fieldInfos, lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldName(fieldInfos, fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldName(fieldInfos, lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldInfos.fieldName(fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldInfos.fieldName(lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#add(int,BytesRef,TermInfo).mjava","sourceNew":null,"sourceOld":"  /** Adds a new <<fieldNumber, termBytes>, TermInfo> pair to the set.\n    Term must be lexicographically greater than all previous Terms added.\n    TermInfo pointers must be positive and greater than all previous.*/\n  public void add(int fieldNumber, BytesRef term, TermInfo ti)\n    throws IOException {\n\n    assert compareToLastTerm(fieldNumber, term) < 0 ||\n      (isIndex && term.length == 0 && lastTerm.length == 0) :\n      \"Terms are out of order: field=\" + fieldName(fieldInfos, fieldNumber) + \" (number \" + fieldNumber + \")\" +\n        \" lastField=\" + fieldName(fieldInfos, lastFieldNumber) + \" (number \" + lastFieldNumber + \")\" +\n        \" text=\" + term.utf8ToString() + \" lastText=\" + lastTerm.utf8ToString();\n\n    assert ti.freqPointer >= lastTi.freqPointer: \"freqPointer out of order (\" + ti.freqPointer + \" < \" + lastTi.freqPointer + \")\";\n    assert ti.proxPointer >= lastTi.proxPointer: \"proxPointer out of order (\" + ti.proxPointer + \" < \" + lastTi.proxPointer + \")\";\n\n    if (!isIndex && size % indexInterval == 0) {\n      other.add(lastFieldNumber, lastTerm, lastTi);                      // add an index term\n    }\n    writeTerm(fieldNumber, term);                        // write term\n\n    output.writeVInt(ti.docFreq);                       // write doc freq\n    output.writeVLong(ti.freqPointer - lastTi.freqPointer); // write pointers\n    output.writeVLong(ti.proxPointer - lastTi.proxPointer);\n\n    if (ti.docFreq >= skipInterval) {\n      output.writeVInt(ti.skipOffset);\n    }\n\n    if (isIndex) {\n      output.writeVLong(other.output.getFilePointer() - lastIndexPointer);\n      lastIndexPointer = other.output.getFilePointer(); // write pointer\n    }\n\n    lastFieldNumber = fieldNumber;\n    lastTi.set(ti);\n    size++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b6ef1ac57615594df99b4d227449fa09de6c255f","c22d44fa0ab988ba3253471cce23610e45a91052"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b6ef1ac57615594df99b4d227449fa09de6c255f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6ef1ac57615594df99b4d227449fa09de6c255f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"c22d44fa0ab988ba3253471cce23610e45a91052":["b6ef1ac57615594df99b4d227449fa09de6c255f"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b6ef1ac57615594df99b4d227449fa09de6c255f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b6ef1ac57615594df99b4d227449fa09de6c255f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c22d44fa0ab988ba3253471cce23610e45a91052"],"c22d44fa0ab988ba3253471cce23610e45a91052":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}