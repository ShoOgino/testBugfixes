{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc17dc53660d8859b336b5110d741adaf68686f6","date":1505134847,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","sourceNew":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","sourceOld":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc17dc53660d8859b336b5110d741adaf68686f6":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc17dc53660d8859b336b5110d741adaf68686f6"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"cc17dc53660d8859b336b5110d741adaf68686f6":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}