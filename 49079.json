{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","commits":[{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RetryNode#checkRetry().mjava","sourceNew":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      }\n      \n      this.nodeProps = leaderProps;\n\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      }\n      \n      this.nodeProps = leaderProps;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99e7358ea6164009218b511839476278da9f44f2","date":1384980283,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","sourceNew":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n      \n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      }\n      \n      this.nodeProps = leaderProps;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1dd6595120fba7e99fcec70759c6cdea9a071b3","date":1385615716,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","sourceNew":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n     \n      if (fromAddress.equals(leaderProps.getCoreUrl())) {\n        // we became the leader\n        return false;\n      }\n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n      \n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce545e833f5334e245fb71d83c3460ef83c2d5e","date":1385773467,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","sourceNew":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n     \n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n     \n      if (fromAddress.equals(leaderProps.getCoreUrl())) {\n        // we became the leader\n        return false;\n      }\n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","sourceNew":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n     \n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      }\n      \n      this.nodeProps = leaderProps;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":4,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.RetryNode#checkRetry().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean checkRetry() {\n      ZkCoreNodeProps leaderProps;\n      try {\n        leaderProps = new ZkCoreNodeProps(zkStateReader.getLeaderRetry(\n            collection, shardId));\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return false;\n      } catch (Exception e) {\n        // we retry with same info\n        log.warn(null, e);\n        return true;\n      }\n     \n      this.nodeProps = leaderProps;\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99e7358ea6164009218b511839476278da9f44f2":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["c1dd6595120fba7e99fcec70759c6cdea9a071b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"c1dd6595120fba7e99fcec70759c6cdea9a071b3":["99e7358ea6164009218b511839476278da9f44f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"]},"commit2Childs":{"99e7358ea6164009218b511839476278da9f44f2":["c1dd6595120fba7e99fcec70759c6cdea9a071b3"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["99e7358ea6164009218b511839476278da9f44f2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c1dd6595120fba7e99fcec70759c6cdea9a071b3":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}