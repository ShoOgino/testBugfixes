{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        // First time through the while loop we do the merge\n        // that we were started with:\n        MergePolicy.OneMerge merge = this.merge;\n\n        while(true) {\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        merge.setException(exc);\n        writer.addMergeException(merge);\n\n        if (!merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          exceptions.add(exc);\n          \n          if (!suppressExceptions)\n            // suppressExceptions is normally only set during\n            // testing.\n            throw new MergePolicy.MergeException(exc);\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["737e811ac4583c640a0680e784121677f311a8af","346d5897e4c4e77ed5dbd31f7730ff30973d5971","b6b0122d107a2f2a35007aca038d2a7fde039266","7ed80954d0e91206342729d058da7955cb93aa64","290c401c31db375e771805c3ba7ac5f64c7370dc","0ebc2085cdebd1e698f670bed4679ec7306f8a57","c507fbcc682939239c013568bca7ca40ea6bd844"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c507fbcc682939239c013568bca7ca40ea6bd844","date":1191683563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions)\n            // suppressExceptions is normally only set during\n            // testing.\n            throw new MergePolicy.MergeException(exc);\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        // First time through the while loop we do the merge\n        // that we were started with:\n        MergePolicy.OneMerge merge = this.merge;\n\n        while(true) {\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        merge.setException(exc);\n        writer.addMergeException(merge);\n\n        if (!merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          exceptions.add(exc);\n          \n          if (!suppressExceptions)\n            // suppressExceptions is normally only set during\n            // testing.\n            throw new MergePolicy.MergeException(exc);\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971","b6b0122d107a2f2a35007aca038d2a7fde039266"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions)\n            // suppressExceptions is normally only set during\n            // testing.\n            throw new MergePolicy.MergeException(exc);\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ed80954d0e91206342729d058da7955cb93aa64","date":1193061871,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (VERBOSE)\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (VERBOSE)\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (VERBOSE)\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (IOException exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n        // When a merge was aborted & IndexWriter closed,\n        // it's possible to get various IOExceptions,\n        // NullPointerExceptions, AlreadyClosedExceptions:\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        if (merge == null || !merge.isAborted()) {\n          // If the merge was not aborted then the exception\n          // is real\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","c507fbcc682939239c013568bca7ca40ea6bd844"],"bugIntro":["737e811ac4583c640a0680e784121677f311a8af","83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (IOException exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0feb10cdc38728e18bd11f49da14b22e9141bcdc","date":1201897345,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          writer.merge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            throw new MergePolicy.MergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ebc2085cdebd1e698f670bed4679ec7306f8a57","date":1202479308,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          mergeThreads.remove(this);\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          ConcurrentMergeScheduler.this.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b0122d107a2f2a35007aca038d2a7fde039266","date":1222123999,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        if (merge != null) {\n          merge.setException(exc);\n          writer.addMergeException(merge);\n        }\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","c507fbcc682939239c013568bca7ca40ea6bd844"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2993c85d947e3191bba14229ea72fd5675d048e2","date":1228593940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff031a3ed5a8cf97591566db70c38ca1198de40c","date":1240952384,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          synchronized(ConcurrentMergeScheduler.this) {\n            exceptions.add(exc);\n          }\n          \n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa","date":1261431504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            updateMergeThreads();\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else {\n            done = true;\n            updateMergeThreads();\n            break;\n          }\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          updateMergeThreads();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else\n            break;\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["60679157c78fc286ee35471398529a1e5749621c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = tWriter.getNextMerge();\n          if (merge != null) {\n            tWriter.mergeInit(merge);\n            updateMergeThreads();\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else {\n            done = true;\n            updateMergeThreads();\n            break;\n          }\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          updateMergeThreads();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = writer.getNextMerge();\n          if (merge != null) {\n            writer.mergeInit(merge);\n            updateMergeThreads();\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else {\n            done = true;\n            updateMergeThreads();\n            break;\n          }\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          updateMergeThreads();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = tWriter.getNextMerge();\n          if (merge != null) {\n            tWriter.mergeInit(merge);\n            updateMergeThreads();\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else {\n            done = true;\n            updateMergeThreads();\n            break;\n          }\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          updateMergeThreads();\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n      // First time through the while loop we do the merge\n      // that we were started with:\n      MergePolicy.OneMerge merge = this.startMerge;\n      \n      try {\n\n        if (verbose())\n          message(\"  merge thread: start\");\n\n        while(true) {\n          setRunningMerge(merge);\n          doMerge(merge);\n\n          // Subsequent times through the loop we do any new\n          // merge that writer says is necessary:\n          merge = tWriter.getNextMerge();\n          if (merge != null) {\n            tWriter.mergeInit(merge);\n            updateMergeThreads();\n            if (verbose())\n              message(\"  merge thread: do another merge \" + merge.segString(dir));\n          } else {\n            done = true;\n            updateMergeThreads();\n            break;\n          }\n        }\n\n        if (verbose())\n          message(\"  merge thread: done\");\n\n      } catch (Throwable exc) {\n\n        // Ignore the exception if it was due to abort:\n        if (!(exc instanceof MergePolicy.MergeAbortedException)) {\n          if (!suppressExceptions) {\n            // suppressExceptions is normally only set during\n            // testing.\n            anyExceptions = true;\n            handleMergeException(exc);\n          }\n        }\n      } finally {\n        synchronized(ConcurrentMergeScheduler.this) {\n          ConcurrentMergeScheduler.this.notifyAll();\n          boolean removed = mergeThreads.remove(this);\n          assert removed;\n          updateMergeThreads();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["7ed80954d0e91206342729d058da7955cb93aa64"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ed80954d0e91206342729d058da7955cb93aa64":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ff031a3ed5a8cf97591566db70c38ca1198de40c"],"ff031a3ed5a8cf97591566db70c38ca1198de40c":["2993c85d947e3191bba14229ea72fd5675d048e2"],"c507fbcc682939239c013568bca7ca40ea6bd844":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"2993c85d947e3191bba14229ea72fd5675d048e2":["b6b0122d107a2f2a35007aca038d2a7fde039266"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"b6b0122d107a2f2a35007aca038d2a7fde039266":["e82780afe6097066eb5befb86e9432f077667e3d"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["c507fbcc682939239c013568bca7ca40ea6bd844"],"e82780afe6097066eb5befb86e9432f077667e3d":["0ebc2085cdebd1e698f670bed4679ec7306f8a57"],"0ebc2085cdebd1e698f670bed4679ec7306f8a57":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["0feb10cdc38728e18bd11f49da14b22e9141bcdc"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["c507fbcc682939239c013568bca7ca40ea6bd844"],"7ed80954d0e91206342729d058da7955cb93aa64":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"8a9e385641d717e641408d8fbbc62be8fc766357":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"],"ff031a3ed5a8cf97591566db70c38ca1198de40c":["8a9e385641d717e641408d8fbbc62be8fc766357"],"c507fbcc682939239c013568bca7ca40ea6bd844":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"2993c85d947e3191bba14229ea72fd5675d048e2":["ff031a3ed5a8cf97591566db70c38ca1198de40c"],"0feb10cdc38728e18bd11f49da14b22e9141bcdc":["0ebc2085cdebd1e698f670bed4679ec7306f8a57"],"b6b0122d107a2f2a35007aca038d2a7fde039266":["2993c85d947e3191bba14229ea72fd5675d048e2"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["7ed80954d0e91206342729d058da7955cb93aa64"],"e82780afe6097066eb5befb86e9432f077667e3d":["b6b0122d107a2f2a35007aca038d2a7fde039266"],"0ebc2085cdebd1e698f670bed4679ec7306f8a57":["e82780afe6097066eb5befb86e9432f077667e3d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}