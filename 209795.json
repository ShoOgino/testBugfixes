{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final void setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c447e0427ce53ca53d708ce8b64eaf8cfd372591","date":1359552077,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public void setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final void setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public void setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["caa40272511a69bd4ad04b8242ae420932f5799b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"caa40272511a69bd4ad04b8242ae420932f5799b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"caa40272511a69bd4ad04b8242ae420932f5799b":["c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","caa40272511a69bd4ad04b8242ae420932f5799b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}