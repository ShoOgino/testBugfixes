{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95535508327351a4c38a0dc7711075dfabe5941f","date":1309882395,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","sourceNew":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      /*\n       * Try out faceted search in it's most basic form (no sampling nor complement\n       * that is). In this test lots (and lots..) of randomly generated data is\n       * being indexed, and later on an \"over-all\" faceted search is performed. The\n       * results are checked against the DF of each facet by itself\n       */\n      List<FacetResult> facetResults = countFacets(partitionSize, 100000, false);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      /*\n       * Try out faceted search with complements. In this test lots (and lots..) of\n       * randomly generated data is being indexed, and later on, a \"beta\" faceted\n       * search is performed - retrieving ~90% of the documents so complements takes\n       * place in here. The results are checked against the a regular (a.k.a\n       * no-complement, no-sampling) faceted search with the same parameters.\n       */\n      facetResults = countFacets(partitionSize, 100000, true);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      /*\n       * Try out faceted search in it's most basic form (no sampling nor complement\n       * that is). In this test lots (and lots..) of randomly generated data is\n       * being indexed, and later on an \"over-all\" faceted search is performed. The\n       * results are checked against the DF of each facet by itself\n       */\n      List<FacetResult> facetResults = countFacets(partitionSize, 100000, false);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      /*\n       * Try out faceted search with complements. In this test lots (and lots..) of\n       * randomly generated data is being indexed, and later on, a \"beta\" faceted\n       * search is performed - retrieving ~90% of the documents so complements takes\n       * place in here. The results are checked against the a regular (a.k.a\n       * no-complement, no-sampling) faceted search with the same parameters.\n       */\n      facetResults = countFacets(partitionSize, 100000, true);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      /*\n       * Try out faceted search in it's most basic form (no sampling nor complement\n       * that is). In this test lots (and lots..) of randomly generated data is\n       * being indexed, and later on an \"over-all\" faceted search is performed. The\n       * results are checked against the DF of each facet by itself\n       */\n      List<FacetResult> facetResults = countFacets(partitionSize, 100000, false);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      /*\n       * Try out faceted search with complements. In this test lots (and lots..) of\n       * randomly generated data is being indexed, and later on, a \"beta\" faceted\n       * search is performed - retrieving ~90% of the documents so complements takes\n       * place in here. The results are checked against the a regular (a.k.a\n       * no-complement, no-sampling) faceted search with the same parameters.\n       */\n      facetResults = countFacets(partitionSize, 100000, true);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#testTopCountsOrder().mjava","sourceNew":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      /*\n       * Try out faceted search in it's most basic form (no sampling nor complement\n       * that is). In this test lots (and lots..) of randomly generated data is\n       * being indexed, and later on an \"over-all\" faceted search is performed. The\n       * results are checked against the DF of each facet by itself\n       */\n      List<FacetResult> facetResults = countFacets(partitionSize, 100000, false);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      /*\n       * Try out faceted search with complements. In this test lots (and lots..) of\n       * randomly generated data is being indexed, and later on, a \"beta\" faceted\n       * search is performed - retrieving ~90% of the documents so complements takes\n       * place in here. The results are checked against the a regular (a.k.a\n       * no-complement, no-sampling) faceted search with the same parameters.\n       */\n      facetResults = countFacets(partitionSize, 100000, true);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that indeed top results are returned, ordered same as all results \n   * also when some facets have the same counts.\n   */\n  @Test\n  public void testTopCountsOrder() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      /*\n       * Try out faceted search in it's most basic form (no sampling nor complement\n       * that is). In this test lots (and lots..) of randomly generated data is\n       * being indexed, and later on an \"over-all\" faceted search is performed. The\n       * results are checked against the DF of each facet by itself\n       */\n      List<FacetResult> facetResults = countFacets(partitionSize, 100000, false);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      /*\n       * Try out faceted search with complements. In this test lots (and lots..) of\n       * randomly generated data is being indexed, and later on, a \"beta\" faceted\n       * search is performed - retrieving ~90% of the documents so complements takes\n       * place in here. The results are checked against the a regular (a.k.a\n       * no-complement, no-sampling) faceted search with the same parameters.\n       */\n      facetResults = countFacets(partitionSize, 100000, true);\n      assertCountsAndCardinality(facetCountsTruth(), facetResults);\n      \n      List<FacetResult> allFacetResults = countFacets(partitionSize, 100000, false);\n      \n      HashMap<String,Integer> all = new HashMap<String,Integer>();\n      int maxNumNodes = 0;\n      int k = 0;\n      for (FacetResult fr : allFacetResults) {\n        FacetResultNode topResNode = fr.getFacetResultNode();\n        maxNumNodes = Math.max(maxNumNodes, topResNode.getNumSubResults());\n        int prevCount = Integer.MAX_VALUE;\n        int pos = 0;\n        for (FacetResultNode frn: topResNode.getSubResults()) {\n          assertTrue(\"wrong counts order: prev=\"+prevCount+\" curr=\"+frn.getValue(), prevCount>=frn.getValue());\n          prevCount = (int) frn.getValue();\n          String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n          if (VERBOSE) {\n            System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n          }\n          all.put(key, pos++); // will use this later to verify order of sub-results\n        }\n        k++;\n      }\n      \n      // verify that when asking for less results, they are always of highest counts\n      // also verify that the order is stable\n      for (int n=1; n<maxNumNodes; n++) {\n        if (VERBOSE) {\n          System.out.println(\"-------  verify for \"+n+\" top results\");\n        }\n        List<FacetResult> someResults = countFacets(partitionSize, n, false);\n        k = 0;\n        for (FacetResult fr : someResults) {\n          FacetResultNode topResNode = fr.getFacetResultNode();\n          assertTrue(\"too many results: n=\"+n+\" but got \"+topResNode.getNumSubResults(), n>=topResNode.getNumSubResults());\n          int pos = 0;\n          for (FacetResultNode frn: topResNode.getSubResults()) {\n            String key = k+\"--\"+frn.getLabel()+\"==\"+frn.getValue();\n            if (VERBOSE) {\n              System.out.println(frn.getLabel() + \" - \" + frn.getValue() + \"  \"+key+\"  \"+pos);\n            }\n            Integer origPos = all.get(key);\n            assertNotNull(\"missing in all results: \"+frn,origPos);\n            assertEquals(\"wrong order of sub-results!\",pos++, origPos.intValue()); // verify order of sub-results\n          }\n          k++;\n        }\n      }\n      \n      closeAll(); // done with this partition\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["95535508327351a4c38a0dc7711075dfabe5941f"],"95535508327351a4c38a0dc7711075dfabe5941f":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95535508327351a4c38a0dc7711075dfabe5941f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["95535508327351a4c38a0dc7711075dfabe5941f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}