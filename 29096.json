{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir,\n      newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.NEGATIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MIN_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", Double.POSITIVE_INFINITY, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", Long.MAX_VALUE, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LegacyDoubleField(\"double\", 0.0, Field.Store.NO));\n    doc.add(new LegacyLongField(\"long\", 0L, Field.Store.NO));\n    writer.addDocument(doc);\n    \n    for (double d : TestLegacyNumericUtils.DOUBLE_NANs) {\n      doc = new Document();\n      doc.add(new LegacyDoubleField(\"double\", d, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n    \n    Query q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q= LegacyNumericRangeQuery.newLongRange(\"long\", Long.MIN_VALUE, Long.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q= LegacyNumericRangeQuery.newDoubleRange(\"double\", Double.NaN, Double.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestLegacyNumericUtils.DOUBLE_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}