{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","commits":[{"id":"a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b","date":1491224823,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"/dev/null","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e98a4d8e18e7296a274ca283df84a76544bd753","date":1491296430,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"/dev/null","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextBoolean());\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, false);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testPropagatesScorerSupplier().mjava","sourceNew":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPropagatesScorerSupplier() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(NEVER_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(1, 1000);\n    searcher.setQueryCache(cache);\n\n    AtomicBoolean scorerCreated = new AtomicBoolean(false);\n    Query query = new DummyQuery2(scorerCreated);\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES);\n    ScorerSupplier supplier = weight.scorerSupplier(searcher.getIndexReader().leaves().get(0));\n    assertFalse(scorerCreated.get());\n    supplier.get(random().nextLong() & 0x7FFFFFFFFFFFFFFFL);\n    assertTrue(scorerCreated.get());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["0e98a4d8e18e7296a274ca283df84a76544bd753","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","9fc47cb7b4346802411bb432f501ed0673d7119e"],"0e98a4d8e18e7296a274ca283df84a76544bd753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b","0e98a4d8e18e7296a274ca283df84a76544bd753"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"a94c3ed25a08dda75a7682a15aa4499e5cdc9d8b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"0e98a4d8e18e7296a274ca283df84a76544bd753":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}