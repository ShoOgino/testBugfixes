{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","sourceNew":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new int[values.length][], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","sourceOld":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new int[values.length][], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","sourceNew":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new MergeState.DocMap[values.length], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","sourceOld":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new int[values.length][], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","sourceNew":null,"sourceOld":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new MergeState.DocMap[values.length], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#asSortedSource().mjava","sourceNew":null,"sourceOld":"    @Override\n    public SortedSource asSortedSource() {\n      try {\n        if (type == Type.BYTES_FIXED_SORTED || type == Type.BYTES_VAR_SORTED) {\n          DocValues[] values = new DocValues[slices.length];\n          Comparator<BytesRef> comp = null;\n          for (int i = 0; i < values.length; i++) {\n            values[i] = slices[i].docValues;\n            if (!(values[i] instanceof EmptyDocValues)) {\n              Comparator<BytesRef> comparator = values[i].getDirectSource()\n                  .asSortedSource().getComparator();\n              assert comp == null || comp == comparator;\n              comp = comparator;\n            }\n          }\n          assert comp != null;\n          final int globalNumDocs = globalNumDocs();\n          final MergeContext ctx = SortedBytesMergeUtils.init(type, values,\n              comp, globalNumDocs);\n          List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(\n              docBases(), new MergeState.DocMap[values.length], values, ctx);\n          RecordingBytesRefConsumer consumer = new RecordingBytesRefConsumer(\n              type);\n          final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, consumer,\n              slices);\n          final int[] docToOrd = new int[globalNumDocs];\n          for (SortedSourceSlice slice : slices) {\n            slice.toAbsolutOrds(docToOrd);\n          }\n          return new MultiSortedSource(type, comp, consumer.pagedBytes,\n              ctx.sizePerValues, maxOrd, docToOrd, consumer.ordToOffset);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n      return super.asSortedSource();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e25729298aefe258b77e1b2676ae1088c1a2c49d","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}