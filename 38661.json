{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (swappableCores) {\n      for (Map.Entry<String,SolrCore> entry : swappableCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33399cc2618223f11ba493f9a3a2026fe05b579","date":1356813042,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (transientCores) {\n      for (Map.Entry<String,SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (swappableCores) {\n      for (Map.Entry<String,SolrCore> entry : swappableCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (transientCores) {\n      for (Map.Entry<String,SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (swappableCores) {\n      for (Map.Entry<String,SolrCore> entry : swappableCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return coreMaps.getCoreNames(core);\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    List<String> lst = new ArrayList<String>();\n    synchronized (cores) {\n      for (Map.Entry<String,SolrCore> entry : cores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n    synchronized (transientCores) {\n      for (Map.Entry<String,SolrCore> entry : transientCores.entrySet()) {\n        if (core == entry.getValue()) {\n          lst.add(entry.getKey());\n        }\n      }\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return solrCores.getCoreNames(core);\n  }\n\n","sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return coreMaps.getCoreNames(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return solrCores.getCoreNames(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return solrCores.getCoreNames(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreNames(SolrCore).mjava","sourceNew":null,"sourceOld":"  /** This method is currently experimental.\n   * @return a Collection of the names that a specific core is mapped to.\n   */\n  public Collection<String> getCoreNames(SolrCore core) {\n    return solrCores.getCoreNames(core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b374d78db8148ec6796fdf37148b33897ab40a8c","c33399cc2618223f11ba493f9a3a2026fe05b579"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9409650933cc688e77e565092a25e58adfc2e18d"],"30c8e5574b55d57947e989443dfde611646530ee":["9409650933cc688e77e565092a25e58adfc2e18d","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["9409650933cc688e77e565092a25e58adfc2e18d","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9409650933cc688e77e565092a25e58adfc2e18d":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["c33399cc2618223f11ba493f9a3a2026fe05b579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a837c064b67fa63a9394136e31218b908cdcf783"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9409650933cc688e77e565092a25e58adfc2e18d":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c33399cc2618223f11ba493f9a3a2026fe05b579"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a837c064b67fa63a9394136e31218b908cdcf783":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}