{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a block and adds its block key to the dictionary builder.\n   */\n  protected void writeBlock(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n\n    long blockStartFP = blockOutput.getFilePointer();\n\n    addBlockKey(blockLines, dictionaryBuilder);\n\n    int middle = blockLines.size() >> 1;\n    int middleOffset = -1;\n    BlockLine previousLine = null;\n    for (int i = 0, size = blockLines.size(); i < size; i++) {\n      boolean isIncrementalEncodingSeed = i == 0;\n      if (i == middle) {\n        middleOffset = Math.toIntExact(blockLinesWriteBuffer.size());\n        isIncrementalEncodingSeed = true;\n      }\n      BlockLine line = blockLines.get(i);\n      writeBlockLine(isIncrementalEncodingSeed, line, previousLine);\n      previousLine = line;\n    }\n\n    reusableBlockHeader.reset(blockLines.size(), termStateSerializer.getBaseDocStartFP(), termStateSerializer.getBasePosStartFP(),\n        termStateSerializer.getBasePayStartFP(), Math.toIntExact(blockLinesWriteBuffer.size()), middleOffset);\n    reusableBlockHeader.write(blockWriteBuffer);\n\n    blockLinesWriteBuffer.copyTo(blockWriteBuffer);\n    termStatesWriteBuffer.copyTo(blockWriteBuffer);\n\n    if (blockEncoder == null) {\n      blockOutput.writeVInt(Math.toIntExact(blockWriteBuffer.size()));\n      blockWriteBuffer.copyTo(blockOutput);\n    } else {\n      BlockEncoder.WritableBytes encodedBytes = blockEncoder.encode(blockWriteBuffer.toDataInput(), blockWriteBuffer.size());\n      blockOutput.writeVInt(Math.toIntExact(encodedBytes.size()));\n      encodedBytes.writeTo(blockOutput);\n    }\n\n    blockLinesWriteBuffer.reset();\n    termStatesWriteBuffer.reset();\n    blockWriteBuffer.reset();\n\n    termStateSerializer.resetBaseStartFP();\n\n    updateFieldMetadata(blockStartFP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","sourceNew":"  /**\n   * Writes a block and adds its block key to the dictionary builder.\n   */\n  protected void writeBlock(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n\n    long blockStartFP = blockOutput.getFilePointer();\n\n    addBlockKey(blockLines, dictionaryBuilder);\n\n    int middle = blockLines.size() >> 1;\n    int middleOffset = -1;\n    BlockLine previousLine = null;\n    for (int i = 0, size = blockLines.size(); i < size; i++) {\n      boolean isIncrementalEncodingSeed = i == 0;\n      if (i == middle) {\n        middleOffset = Math.toIntExact(blockLinesWriteBuffer.size());\n        isIncrementalEncodingSeed = true;\n      }\n      BlockLine line = blockLines.get(i);\n      writeBlockLine(isIncrementalEncodingSeed, line, previousLine);\n      previousLine = line;\n    }\n\n    reusableBlockHeader.reset(blockLines.size(), termStateSerializer.getBaseDocStartFP(), termStateSerializer.getBasePosStartFP(),\n        termStateSerializer.getBasePayStartFP(), Math.toIntExact(blockLinesWriteBuffer.size()), middleOffset);\n    blockHeaderWriter.write(blockWriteBuffer, reusableBlockHeader);\n\n    blockLinesWriteBuffer.copyTo(blockWriteBuffer);\n    termStatesWriteBuffer.copyTo(blockWriteBuffer);\n\n    if (blockEncoder == null) {\n      blockOutput.writeVInt(Math.toIntExact(blockWriteBuffer.size()));\n      blockWriteBuffer.copyTo(blockOutput);\n    } else {\n      BlockEncoder.WritableBytes encodedBytes = blockEncoder.encode(blockWriteBuffer.toDataInput(), blockWriteBuffer.size());\n      blockOutput.writeVInt(Math.toIntExact(encodedBytes.size()));\n      encodedBytes.writeTo(blockOutput);\n    }\n\n    blockLinesWriteBuffer.reset();\n    termStatesWriteBuffer.reset();\n    blockWriteBuffer.reset();\n\n    termStateSerializer.resetBaseStartFP();\n\n    updateFieldMetadata(blockStartFP);\n  }\n\n","sourceOld":"  /**\n   * Writes a block and adds its block key to the dictionary builder.\n   */\n  protected void writeBlock(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n\n    long blockStartFP = blockOutput.getFilePointer();\n\n    addBlockKey(blockLines, dictionaryBuilder);\n\n    int middle = blockLines.size() >> 1;\n    int middleOffset = -1;\n    BlockLine previousLine = null;\n    for (int i = 0, size = blockLines.size(); i < size; i++) {\n      boolean isIncrementalEncodingSeed = i == 0;\n      if (i == middle) {\n        middleOffset = Math.toIntExact(blockLinesWriteBuffer.size());\n        isIncrementalEncodingSeed = true;\n      }\n      BlockLine line = blockLines.get(i);\n      writeBlockLine(isIncrementalEncodingSeed, line, previousLine);\n      previousLine = line;\n    }\n\n    reusableBlockHeader.reset(blockLines.size(), termStateSerializer.getBaseDocStartFP(), termStateSerializer.getBasePosStartFP(),\n        termStateSerializer.getBasePayStartFP(), Math.toIntExact(blockLinesWriteBuffer.size()), middleOffset);\n    reusableBlockHeader.write(blockWriteBuffer);\n\n    blockLinesWriteBuffer.copyTo(blockWriteBuffer);\n    termStatesWriteBuffer.copyTo(blockWriteBuffer);\n\n    if (blockEncoder == null) {\n      blockOutput.writeVInt(Math.toIntExact(blockWriteBuffer.size()));\n      blockWriteBuffer.copyTo(blockOutput);\n    } else {\n      BlockEncoder.WritableBytes encodedBytes = blockEncoder.encode(blockWriteBuffer.toDataInput(), blockWriteBuffer.size());\n      blockOutput.writeVInt(Math.toIntExact(encodedBytes.size()));\n      encodedBytes.writeTo(blockOutput);\n    }\n\n    blockLinesWriteBuffer.reset();\n    termStatesWriteBuffer.reset();\n    blockWriteBuffer.reset();\n\n    termStateSerializer.resetBaseStartFP();\n\n    updateFieldMetadata(blockStartFP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#writeBlock(List[BlockLine],IndexDictionary.Builder).mjava","sourceNew":"  /**\n   * Writes a block and adds its block key to the dictionary builder.\n   */\n  protected void writeBlock(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n\n    long blockStartFP = blockOutput.getFilePointer();\n\n    addBlockKey(blockLines, dictionaryBuilder);\n\n    int middle = blockLines.size() >> 1;\n    int middleOffset = -1;\n    BlockLine previousLine = null;\n    for (int i = 0, size = blockLines.size(); i < size; i++) {\n      boolean isIncrementalEncodingSeed = i == 0;\n      if (i == middle) {\n        middleOffset = Math.toIntExact(blockLinesWriteBuffer.size());\n        isIncrementalEncodingSeed = true;\n      }\n      BlockLine line = blockLines.get(i);\n      writeBlockLine(isIncrementalEncodingSeed, line, previousLine);\n      previousLine = line;\n    }\n\n    reusableBlockHeader.reset(blockLines.size(), termStateSerializer.getBaseDocStartFP(), termStateSerializer.getBasePosStartFP(),\n        termStateSerializer.getBasePayStartFP(), Math.toIntExact(blockLinesWriteBuffer.size()), middleOffset);\n    blockHeaderWriter.write(blockWriteBuffer, reusableBlockHeader);\n\n    blockLinesWriteBuffer.copyTo(blockWriteBuffer);\n    termStatesWriteBuffer.copyTo(blockWriteBuffer);\n\n    if (blockEncoder == null) {\n      blockOutput.writeVInt(Math.toIntExact(blockWriteBuffer.size()));\n      blockWriteBuffer.copyTo(blockOutput);\n    } else {\n      BlockEncoder.WritableBytes encodedBytes = blockEncoder.encode(blockWriteBuffer.toDataInput(), blockWriteBuffer.size());\n      blockOutput.writeVInt(Math.toIntExact(encodedBytes.size()));\n      encodedBytes.writeTo(blockOutput);\n    }\n\n    blockLinesWriteBuffer.reset();\n    termStatesWriteBuffer.reset();\n    blockWriteBuffer.reset();\n\n    termStateSerializer.resetBaseStartFP();\n\n    updateFieldMetadata(blockStartFP);\n  }\n\n","sourceOld":"  /**\n   * Writes a block and adds its block key to the dictionary builder.\n   */\n  protected void writeBlock(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n\n    long blockStartFP = blockOutput.getFilePointer();\n\n    addBlockKey(blockLines, dictionaryBuilder);\n\n    int middle = blockLines.size() >> 1;\n    int middleOffset = -1;\n    BlockLine previousLine = null;\n    for (int i = 0, size = blockLines.size(); i < size; i++) {\n      boolean isIncrementalEncodingSeed = i == 0;\n      if (i == middle) {\n        middleOffset = Math.toIntExact(blockLinesWriteBuffer.size());\n        isIncrementalEncodingSeed = true;\n      }\n      BlockLine line = blockLines.get(i);\n      writeBlockLine(isIncrementalEncodingSeed, line, previousLine);\n      previousLine = line;\n    }\n\n    reusableBlockHeader.reset(blockLines.size(), termStateSerializer.getBaseDocStartFP(), termStateSerializer.getBasePosStartFP(),\n        termStateSerializer.getBasePayStartFP(), Math.toIntExact(blockLinesWriteBuffer.size()), middleOffset);\n    reusableBlockHeader.write(blockWriteBuffer);\n\n    blockLinesWriteBuffer.copyTo(blockWriteBuffer);\n    termStatesWriteBuffer.copyTo(blockWriteBuffer);\n\n    if (blockEncoder == null) {\n      blockOutput.writeVInt(Math.toIntExact(blockWriteBuffer.size()));\n      blockWriteBuffer.copyTo(blockOutput);\n    } else {\n      BlockEncoder.WritableBytes encodedBytes = blockEncoder.encode(blockWriteBuffer.toDataInput(), blockWriteBuffer.size());\n      blockOutput.writeVInt(Math.toIntExact(encodedBytes.size()));\n      encodedBytes.writeTo(blockOutput);\n    }\n\n    blockLinesWriteBuffer.reset();\n    termStatesWriteBuffer.reset();\n    blockWriteBuffer.reset();\n\n    termStateSerializer.resetBaseStartFP();\n\n    updateFieldMetadata(blockStartFP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}