{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        // TODO java 1.6: .pollLast\n        final MergedGroup<T> group = queue.last();\n        //System.out.println(\"PRUNE: \" + group);\n        queue.remove(group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        // TODO java 1.6: .pollLast\n        final MergedGroup<T> group = queue.last();\n        //System.out.println(\"PRUNE: \" + group);\n        queue.remove(group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b7b579125f96af579b1c85930f519dee4f32c3","date":1309436076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        // TODO java 1.6: .pollLast\n        final MergedGroup<T> group = queue.last();\n        //System.out.println(\"PRUNE: \" + group);\n        queue.remove(group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        // TODO java 1.6: .pollLast\n        final MergedGroup<T> group = queue.last();\n        //System.out.println(\"PRUNE: \" + group);\n        queue.remove(group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        // TODO java 1.6: .pollLast\n        final MergedGroup<T> group = queue.last();\n        //System.out.println(\"PRUNE: \" + group);\n        queue.remove(group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127","date":1331198608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupMerger#updateNextGroup(int,ShardIter[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    private void updateNextGroup(int topN, ShardIter<T> shard) {\n      while(shard.iter.hasNext()) {\n        final SearchGroup<T> group = shard.next();\n        MergedGroup<T> mergedGroup = groupsSeen.get(group.groupValue);\n        final boolean isNew = mergedGroup == null;\n        //System.out.println(\"    next group=\" + (group.groupValue == null ? \"null\" : ((BytesRef) group.groupValue).utf8ToString()) + \" sort=\" + Arrays.toString(group.sortValues));\n\n        if (isNew) {\n          // Start a new group:\n          //System.out.println(\"      new\");\n          mergedGroup = new MergedGroup<T>(group.groupValue);\n          mergedGroup.minShardIndex = shard.shardIndex;\n          assert group.sortValues != null;\n          mergedGroup.topValues = group.sortValues;\n          groupsSeen.put(group.groupValue, mergedGroup);\n          mergedGroup.inQueue = true;\n          queue.add(mergedGroup);\n        } else if (mergedGroup.processed) {\n          // This shard produced a group that we already\n          // processed; move on to next group...\n          continue;\n        } else {\n          //System.out.println(\"      old\");\n          boolean competes = false;\n          for(int compIDX=0;compIDX<groupComp.comparators.length;compIDX++) {\n            final int cmp = groupComp.reversed[compIDX] * groupComp.comparators[compIDX].compareValues(group.sortValues[compIDX],\n                                                                                                       mergedGroup.topValues[compIDX]);\n            if (cmp < 0) {\n              // Definitely competes\n              competes = true;\n              break;\n            } else if (cmp > 0) {\n              // Definitely does not compete\n              break;\n            } else if (compIDX == groupComp.comparators.length-1) {\n              if (shard.shardIndex < mergedGroup.minShardIndex) {\n                competes = true;\n              }\n            }\n          }\n\n          //System.out.println(\"      competes=\" + competes);\n\n          if (competes) {\n            // Group's sort changed -- remove & re-insert\n            if (mergedGroup.inQueue) {\n              queue.remove(mergedGroup);\n            }\n            mergedGroup.topValues = group.sortValues;\n            mergedGroup.minShardIndex = shard.shardIndex;\n            queue.add(mergedGroup);\n            mergedGroup.inQueue = true;\n          }\n        }\n\n        mergedGroup.shards.add(shard);\n        break;\n      }\n\n      // Prune un-competitive groups:\n      while(queue.size() > topN) {\n        final MergedGroup<T> group = queue.pollLast();\n        //System.out.println(\"PRUNE: \" + group);\n        group.inQueue = false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["d9b7b579125f96af579b1c85930f519dee4f32c3","72c26897e0e0c4b4f3e73c8c43b1cf89f2564127"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["72c26897e0e0c4b4f3e73c8c43b1cf89f2564127"],"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127":["d9b7b579125f96af579b1c85930f519dee4f32c3"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968","d9b7b579125f96af579b1c85930f519dee4f32c3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d9b7b579125f96af579b1c85930f519dee4f32c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"72c26897e0e0c4b4f3e73c8c43b1cf89f2564127":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["38e3b736c7ca086d61b7dbb841c905ee115490da","72c26897e0e0c4b4f3e73c8c43b1cf89f2564127","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d9b7b579125f96af579b1c85930f519dee4f32c3","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}