{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#adjustSorts(List[SortItem],Bucket[],Map[String,String]).mjava","commits":[{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#adjustSorts(List[SortItem],Bucket[],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#adjustSorts(List[SortItem],Bucket[]).mjava","sourceNew":"  private static StreamComparator[] adjustSorts(List<SortItem> sorts, Bucket[] buckets, Map<String, String> reverseColumnAliases) throws IOException {\n    List<FieldComparator> adjustedSorts = new ArrayList();\n    Set<String> bucketFields = new HashSet();\n    Set<String> sortFields = new HashSet();\n\n    for(SortItem sortItem : sorts) {\n\n      sortFields.add(getSortField(sortItem, reverseColumnAliases));\n      adjustedSorts.add(new FieldComparator(getSortField(sortItem, reverseColumnAliases),\n                                            ascDescComp(sortItem.getOrdering().toString())));\n    }\n\n    for(Bucket bucket : buckets) {\n      bucketFields.add(bucket.toString());\n    }\n\n    for(SortItem sortItem : sorts) {\n      String sortField = getSortField(sortItem, reverseColumnAliases);\n      if(!bucketFields.contains(sortField)) {\n        throw new IOException(\"All sort fields must be in the field list.\");\n      }\n    }\n\n    //Add sort fields if needed\n    if(sorts.size() < buckets.length) {\n      for(Bucket bucket : buckets) {\n        String b = bucket.toString();\n        if(!sortFields.contains(b)) {\n          adjustedSorts.add(new FieldComparator(bucket.toString(), ComparatorOrder.ASCENDING));\n        }\n      }\n    }\n\n    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);\n  }\n\n","sourceOld":"  private static StreamComparator[] adjustSorts(List<SortItem> sorts, Bucket[] buckets) throws IOException {\n    List<FieldComparator> adjustedSorts = new ArrayList();\n    Set<String> bucketFields = new HashSet();\n    Set<String> sortFields = new HashSet();\n\n    for(SortItem sortItem : sorts) {\n\n      sortFields.add(getSortField(sortItem));\n      adjustedSorts.add(new FieldComparator(getSortField(sortItem),\n                                            ascDescComp(sortItem.getOrdering().toString())));\n    }\n\n    for(Bucket bucket : buckets) {\n      bucketFields.add(bucket.toString());\n    }\n\n    for(SortItem sortItem : sorts) {\n      String sortField = getSortField(sortItem);\n      if(!bucketFields.contains(sortField)) {\n        throw new IOException(\"All sort fields must be in the field list.\");\n      }\n    }\n\n    //Add sort fields if needed\n    if(sorts.size() < buckets.length) {\n      for(Bucket bucket : buckets) {\n        String b = bucket.toString();\n        if(!sortFields.contains(b)) {\n          adjustedSorts.add(new FieldComparator(bucket.toString(), ComparatorOrder.ASCENDING));\n        }\n      }\n    }\n\n    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#adjustSorts(List[SortItem],Bucket[],Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private static StreamComparator[] adjustSorts(List<SortItem> sorts, Bucket[] buckets, Map<String, String> reverseColumnAliases) throws IOException {\n    List<FieldComparator> adjustedSorts = new ArrayList();\n    Set<String> bucketFields = new HashSet();\n    Set<String> sortFields = new HashSet();\n\n    for(SortItem sortItem : sorts) {\n\n      sortFields.add(getSortField(sortItem, reverseColumnAliases));\n      adjustedSorts.add(new FieldComparator(getSortField(sortItem, reverseColumnAliases),\n                                            ascDescComp(sortItem.getOrdering().toString())));\n    }\n\n    for(Bucket bucket : buckets) {\n      bucketFields.add(bucket.toString());\n    }\n\n    for(SortItem sortItem : sorts) {\n      String sortField = getSortField(sortItem, reverseColumnAliases);\n      if(!bucketFields.contains(sortField)) {\n        throw new IOException(\"All sort fields must be in the field list.\");\n      }\n    }\n\n    //Add sort fields if needed\n    if(sorts.size() < buckets.length) {\n      for(Bucket bucket : buckets) {\n        String b = bucket.toString();\n        if(!sortFields.contains(b)) {\n          adjustedSorts.add(new FieldComparator(bucket.toString(), ComparatorOrder.ASCENDING));\n        }\n      }\n    }\n\n    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":5,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#adjustSorts(List[Pair[String,String]],Bucket[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#adjustSorts(List[SortItem],Bucket[],Map[String,String]).mjava","sourceNew":"  private StreamComparator[] adjustSorts(List<Pair<String, String>> orders, Bucket[] buckets) throws IOException {\n    List<FieldComparator> adjustedSorts = new ArrayList();\n    Set<String> bucketFields = new HashSet();\n    Set<String> sortFields = new HashSet();\n\n    ComparatorOrder comparatorOrder = ComparatorOrder.ASCENDING;\n    for(Pair<String, String> order : orders) {\n      sortFields.add(order.getKey());\n      adjustedSorts.add(new FieldComparator(order.getKey(), ascDescComp(order.getValue())));\n      comparatorOrder = ascDescComp(order.getValue());\n    }\n\n    for(Bucket bucket : buckets) {\n      bucketFields.add(bucket.toString());\n    }\n\n    for(String sf : sortFields) {\n      if(!bucketFields.contains(sf)) {\n        throw new IOException(\"All sort fields must be in the field list.\");\n      }\n    }\n\n    //Add sort fields if needed\n    if(sortFields.size() < buckets.length) {\n      for(Bucket bucket : buckets) {\n        String b = bucket.toString();\n        if(!sortFields.contains(b)) {\n          adjustedSorts.add(new FieldComparator(bucket.toString(), comparatorOrder));\n        }\n      }\n    }\n\n    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);\n  }\n\n","sourceOld":"  private static StreamComparator[] adjustSorts(List<SortItem> sorts, Bucket[] buckets, Map<String, String> reverseColumnAliases) throws IOException {\n    List<FieldComparator> adjustedSorts = new ArrayList();\n    Set<String> bucketFields = new HashSet();\n    Set<String> sortFields = new HashSet();\n\n    for(SortItem sortItem : sorts) {\n\n      sortFields.add(getSortField(sortItem, reverseColumnAliases));\n      adjustedSorts.add(new FieldComparator(getSortField(sortItem, reverseColumnAliases),\n                                            ascDescComp(sortItem.getOrdering().toString())));\n    }\n\n    for(Bucket bucket : buckets) {\n      bucketFields.add(bucket.toString());\n    }\n\n    for(SortItem sortItem : sorts) {\n      String sortField = getSortField(sortItem, reverseColumnAliases);\n      if(!bucketFields.contains(sortField)) {\n        throw new IOException(\"All sort fields must be in the field list.\");\n      }\n    }\n\n    //Add sort fields if needed\n    if(sorts.size() < buckets.length) {\n      for(Bucket bucket : buckets) {\n        String b = bucket.toString();\n        if(!sortFields.contains(b)) {\n          adjustedSorts.add(new FieldComparator(bucket.toString(), ComparatorOrder.ASCENDING));\n        }\n      }\n    }\n\n    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}