{"path":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"/dev/null","sourceNew":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\tNodeList nl = e.getElementsByTagName(\"Field\");\r\n\t\tfor(int i=0;i<nl.getLength();i++)\r\n\t\t{\r\n\t\t\tElement fieldElem=(Element) nl.item(i);\r\n\t\t\tString fieldName=DOMUtils.getAttributeWithInheritance(fieldElem,\"fieldName\");\r\n\t\t\t\r\n\t\t\tif(fieldName==null)\r\n\t\t\t{\r\n\t\t\t\tthrow new ParserException(\"TermsFilter missing \\\"fieldName\\\" element\");\t\t\t\t\r\n\t\t\t}\r\n\t\t\tString text=DOMUtils.getText(fieldElem).trim();\r\n\t\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\tToken token=ts.next();\r\n\t\t\tTerm term=null;\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t\tif(term==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=new Term(fieldName,token.termText());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=term.createTerm(token.termText()); //create from previous to save fieldName.intern overhead\r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken=ts.next();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(IOException ioe)\r\n\t\t\t{\r\n\t\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"+ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3","date":1141249757,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\tNodeList nl = e.getElementsByTagName(\"Field\");\r\n\t\tfor(int i=0;i<nl.getLength();i++)\r\n\t\t{\r\n\t\t\t\r\n  \t\t\tElement fieldElem=(Element) nl.item(i);\r\n \t\t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(fieldElem,\"fieldName\");\r\n \t\t\tString text=DOMUtils.getNonBlankTextOrFail(fieldElem);\r\n  \t\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\tToken token=ts.next();\r\n\t\t\tTerm term=null;\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t\tif(term==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=new Term(fieldName,token.termText());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=term.createTerm(token.termText()); //create from previous to save fieldName.intern overhead\r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken=ts.next();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(IOException ioe)\r\n\t\t\t{\r\n\t\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"+ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\tNodeList nl = e.getElementsByTagName(\"Field\");\r\n\t\tfor(int i=0;i<nl.getLength();i++)\r\n\t\t{\r\n\t\t\tElement fieldElem=(Element) nl.item(i);\r\n\t\t\tString fieldName=DOMUtils.getAttributeWithInheritance(fieldElem,\"fieldName\");\r\n\t\t\t\r\n\t\t\tif(fieldName==null)\r\n\t\t\t{\r\n\t\t\t\tthrow new ParserException(\"TermsFilter missing \\\"fieldName\\\" element\");\t\t\t\t\r\n\t\t\t}\r\n\t\t\tString text=DOMUtils.getText(fieldElem).trim();\r\n\t\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\tToken token=ts.next();\r\n\t\t\tTerm term=null;\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t\tif(term==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=new Term(fieldName,token.termText());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=term.createTerm(token.termText()); //create from previous to save fieldName.intern overhead\r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken=ts.next();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(IOException ioe)\r\n\t\t\t{\r\n\t\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"+ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"175da89dff77515cdda7604b3c6cf6de96d4ac23","date":1143444217,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf = new TermsFilter();\r\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\r\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\r\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tToken token = ts.next();\r\n\t\t\tTerm term = null;\r\n\t\t\twhile (token != null)\r\n\t\t\t{\r\n\t\t\t\tif (term == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm = new Term(fieldName, token.termText());\r\n\t\t\t\t} else\r\n\t\t\t\t{\r\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\r\n\t\t\t\t\tterm = term.createTerm(token.termText()); \r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken = ts.next();\r\n\t\t\t}\r\n\t\t} \r\n\t\tcatch (IOException ioe)\r\n\t\t{\r\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\r\n\t\t\t\t\t+ ioe);\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","sourceOld":"\t/* (non-Javadoc)\r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\tNodeList nl = e.getElementsByTagName(\"Field\");\r\n\t\tfor(int i=0;i<nl.getLength();i++)\r\n\t\t{\r\n\t\t\t\r\n  \t\t\tElement fieldElem=(Element) nl.item(i);\r\n \t\t\tString fieldName=DOMUtils.getAttributeWithInheritanceOrFail(fieldElem,\"fieldName\");\r\n \t\t\tString text=DOMUtils.getNonBlankTextOrFail(fieldElem);\r\n  \t\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\t\t\t\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\tToken token=ts.next();\r\n\t\t\tTerm term=null;\r\n\t\t\twhile(token!=null)\r\n\t\t\t{\r\n\t\t\t\tif(term==null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=new Term(fieldName,token.termText());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tterm=term.createTerm(token.termText()); //create from previous to save fieldName.intern overhead\r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken=ts.next();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(IOException ioe)\r\n\t\t\t{\r\n\t\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"+ioe);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf = new TermsFilter();\r\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\r\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\r\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\r\n\t\ttry\r\n\t\t{\r\n                  final Token reusableToken = new Token();\r\n\t\t\tTerm term = null;\r\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\r\n\t\t\t\tif (term == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm = new Term(fieldName, nextToken.term());\r\n\t\t\t\t} else\r\n\t\t\t\t{\r\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\r\n\t\t\t\t\tterm = term.createTerm(nextToken.term()); \r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t}\r\n\t\t} \r\n\t\tcatch (IOException ioe)\r\n\t\t{\r\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\r\n\t\t\t\t\t+ ioe);\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","sourceOld":"\t/*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf = new TermsFilter();\r\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\r\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\r\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tToken token = ts.next();\r\n\t\t\tTerm term = null;\r\n\t\t\twhile (token != null)\r\n\t\t\t{\r\n\t\t\t\tif (term == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm = new Term(fieldName, token.termText());\r\n\t\t\t\t} else\r\n\t\t\t\t{\r\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\r\n\t\t\t\t\tterm = term.createTerm(token.termText()); \r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t\ttoken = ts.next();\r\n\t\t\t}\r\n\t\t} \r\n\t\tcatch (IOException ioe)\r\n\t\t{\r\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\r\n\t\t\t\t\t+ ioe);\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n\n\t\ttry\n\t\t{\n                  final Token reusableToken = new Token();\n\t\t\tTerm term = null;\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, nextToken.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(nextToken.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","sourceOld":"\t/*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\r\n\t */\r\n\tpublic Filter getFilter(Element e) throws ParserException\r\n\t{\r\n\t\tTermsFilter tf = new TermsFilter();\r\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\r\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\r\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\r\n\r\n\t\ttry\r\n\t\t{\r\n                  final Token reusableToken = new Token();\r\n\t\t\tTerm term = null;\r\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\r\n\t\t\t\tif (term == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tterm = new Term(fieldName, nextToken.term());\r\n\t\t\t\t} else\r\n\t\t\t\t{\r\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\r\n\t\t\t\t\tterm = term.createTerm(nextToken.term()); \r\n\t\t\t\t}\r\n\t\t\t\ttf.addTerm(term);\r\n\t\t\t}\r\n\t\t} \r\n\t\tcatch (IOException ioe)\r\n\t\t{\r\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\r\n\t\t\t\t\t+ ioe);\r\n\t\t}\r\n\t\treturn tf;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    \n\t\ttry\n\t\t{\n\t\t\tTerm term = null;\n\t      while (ts.incrementToken()) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, termAtt.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(termAtt.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","sourceOld":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n\n\t\ttry\n\t\t{\n                  final Token reusableToken = new Token();\n\t\t\tTerm term = null;\n\t                for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, nextToken.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(nextToken.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\ttry\n\t\t{\n\t\t\tTerm term = null;\n\t      while (ts.incrementToken()) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, termAtt.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(termAtt.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","sourceOld":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    \n\t\ttry\n\t\t{\n\t\t\tTerm term = null;\n\t      while (ts.incrementToken()) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, termAtt.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(termAtt.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/TermsFilterBuilder#getFilter(Element).mjava","sourceNew":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\ttry\n\t\t{\n\t\t\tTerm term = null;\n\t      while (ts.incrementToken()) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, termAtt.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(termAtt.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","sourceOld":"\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element)\n\t */\n\tpublic Filter getFilter(Element e) throws ParserException\n\t{\n\t\tTermsFilter tf = new TermsFilter();\n\t\tString text = DOMUtils.getNonBlankTextOrFail(e);\n\t\tString fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n\t\tTokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n\t\ttry\n\t\t{\n\t\t\tTerm term = null;\n\t      while (ts.incrementToken()) {\n\t\t\t\tif (term == null)\n\t\t\t\t{\n\t\t\t\t\tterm = new Term(fieldName, termAtt.term());\n\t\t\t\t} else\n\t\t\t\t{\n//\t\t\t\t\t create from previous to save fieldName.intern overhead\n\t\t\t\t\tterm = term.createTerm(termAtt.term()); \n\t\t\t\t}\n\t\t\t\ttf.addTerm(term);\n\t\t\t}\n\t\t} \n\t\tcatch (IOException ioe)\n\t\t{\n\t\t\tthrow new RuntimeException(\"Error constructing terms from index:\"\n\t\t\t\t\t+ ioe);\n\t\t}\n\t\treturn tf;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"175da89dff77515cdda7604b3c6cf6de96d4ac23":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"175da89dff77515cdda7604b3c6cf6de96d4ac23":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["4f36e18a5e46a204b9cdbed5aab560b9c37b93d3"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4f36e18a5e46a204b9cdbed5aab560b9c37b93d3":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}