{"path":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","commits":[{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d20d5e40789b1c42f4f926e3174b271256c43657"],"c26f00b574427b55127e869b935845554afde1fa":["b09c7419b92e982a901698cb401ce22ac35e4b04","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d20d5e40789b1c42f4f926e3174b271256c43657":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b09c7419b92e982a901698cb401ce22ac35e4b04"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}