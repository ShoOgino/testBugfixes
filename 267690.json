{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","commits":[{"id":"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca","date":1359416803,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"003dc2cb64b06ce8caea28156505feb3c5059ba2","date":1359688932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return _TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","sourceOld":"  private void doTestNumericsVsStoredFields(long minValue, long maxValue) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n    doc.add(idField);\n    doc.add(storedField);\n    doc.add(dvField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      long value = _TestUtil.nextLong(random(), minValue, maxValue);\n      storedField.setStringValue(Long.toString(value));\n      dvField.setLongValue(value);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      NumericDocValues docValues = r.getNumericDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        long storedValue = Long.parseLong(r.document(i).get(\"stored\"));\n        assertEquals(storedValue, docValues.get(i));\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","sourceOld":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return _TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":null,"sourceOld":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":null,"sourceOld":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestNumericsVsStoredFields(long,long).mjava","sourceNew":null,"sourceOld":"  private void doTestNumericsVsStoredFields(final long minValue, final long maxValue) throws Exception {\n    doTestNumericsVsStoredFields(new LongProducer() {\n      @Override\n      long next() {\n        return TestUtil.nextLong(random(), minValue, maxValue);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6613659748fe4411a7dcf85266e55db1f95f7315","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["6613659748fe4411a7dcf85266e55db1f95f7315","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d34e4245b24e95dc1dcb51bbb50bcc39d9b6acca":["003dc2cb64b06ce8caea28156505feb3c5059ba2"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}