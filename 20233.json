{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.termDocsEnum(term, PostingsEnum.FLAG_ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(term);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.postings(term, PostingsEnum.ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.termDocsEnum(term, PostingsEnum.FLAG_ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.postings(term, PostingsEnum.ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlySegmentReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.postings(term, PostingsEnum.ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingDirectory(new ByteBuffersDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.postings(term, PostingsEnum.ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new PayloadAnalyzer())\n                                                .setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat()))\n                                                .setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newTextField(term.field(), term.text(), Field.Store.NO));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      PostingsEnum tp = reader.postings(term, PostingsEnum.ALL);\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["b6a0e3c1c21aac8ecf75706605133012833585c7","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"d77dafd89756a5161d244985903e3487ca109182":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["b6a0e3c1c21aac8ecf75706605133012833585c7","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d77dafd89756a5161d244985903e3487ca109182"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["6613659748fe4411a7dcf85266e55db1f95f7315","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}