{"path":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc;\n        private int freq;\n        private int count;\n        private int position;\n        \n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next())\n              return false;\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target))\n            return false;\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next())\n              return false;\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target))\n            return false;\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc;\n        private int freq;\n        private int count;\n        private int position;\n        \n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next())\n              return false;\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target))\n            return false;\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5","date":1076364222,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc = -1;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next()) {\n              doc = Integer.MAX_VALUE;\n              return false;\n            }\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target)) {\n            doc = Integer.MAX_VALUE;\n            return false;\n          }\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")@\"+\n            (doc==-1?\"START\":(doc==Integer.MAX_VALUE)?\"END\":doc+\"-\"+position);\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next())\n              return false;\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target))\n            return false;\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2","date":1117758167,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc = -1;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next()) {\n              doc = Integer.MAX_VALUE;\n              return false;\n            }\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          // are we already at the correct position?\n          if (doc >= target) {\n            return true;\n          }\n\n          if (!positions.skipTo(target)) {\n            doc = Integer.MAX_VALUE;\n            return false;\n          }\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")@\"+\n            (doc==-1?\"START\":(doc==Integer.MAX_VALUE)?\"END\":doc+\"-\"+position);\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc = -1;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next()) {\n              doc = Integer.MAX_VALUE;\n              return false;\n            }\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!positions.skipTo(target)) {\n            doc = Integer.MAX_VALUE;\n            return false;\n          }\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")@\"+\n            (doc==-1?\"START\":(doc==Integer.MAX_VALUE)?\"END\":doc+\"-\"+position);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5426a570e28de2804e59c68509fe71ab7f43afe5","date":1175086695,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private TermPositions positions = reader.termPositions(term);\n\n        private int doc = -1;\n        private int freq;\n        private int count;\n        private int position;\n\n        public boolean next() throws IOException {\n          if (count == freq) {\n            if (!positions.next()) {\n              doc = Integer.MAX_VALUE;\n              return false;\n            }\n            doc = positions.doc();\n            freq = positions.freq();\n            count = 0;\n          }\n          position = positions.nextPosition();\n          count++;\n          return true;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          // are we already at the correct position?\n          if (doc >= target) {\n            return true;\n          }\n\n          if (!positions.skipTo(target)) {\n            doc = Integer.MAX_VALUE;\n            return false;\n          }\n\n          doc = positions.doc();\n          freq = positions.freq();\n          count = 0;\n\n          position = positions.nextPosition();\n          count++;\n\n          return true;\n        }\n\n        public int doc() { return doc; }\n        public int start() { return position; }\n        public int end() { return position + 1; }\n\n        public String toString() {\n          return \"spans(\" + SpanTermQuery.this.toString() + \")@\"+\n            (doc==-1?\"START\":(doc==Integer.MAX_VALUE)?\"END\":doc+\"-\"+position);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new TermSpans(reader.termPositions(term), term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5426a570e28de2804e59c68509fe71ab7f43afe5":["4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"5426a570e28de2804e59c68509fe71ab7f43afe5":["8a9e385641d717e641408d8fbbc62be8fc766357"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["4cf220eb1cc65fcd52b78436bd9c17eb4c4aabf2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}