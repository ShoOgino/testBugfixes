{"path":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","commits":[{"id":"e0aed040842b70826cfd518b076d58adcaede282","date":1395018675,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(getReq().getCore().getSolrConfig().luceneMatchVersion, defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(getReq().getCore().getSolrConfig().luceneMatchVersion, defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(getReq().getCore().getSolrConfig().luceneMatchVersion, defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(getReq().getCore().getSolrConfig().luceneMatchVersion, defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ComplexPhraseQParser[ComplexPhraseQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    lparser = new ComplexPhraseQueryParser(defaultField, getReq().getSchema().getQueryAnalyzer());\n\n    if (localParams != null)\n      inOrder = localParams.getBool(\"inOrder\", inOrder);\n\n    lparser.setInOrder(inOrder);\n\n    QueryParser.Operator defaultOperator = QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), getParam(QueryParsing.OP));\n\n    if (QueryParser.Operator.AND.equals(defaultOperator))\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);\n    else\n      lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);\n\n    try {\n      return lparser.parse(qstr);\n    } catch (ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["e0aed040842b70826cfd518b076d58adcaede282"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0aed040842b70826cfd518b076d58adcaede282":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0aed040842b70826cfd518b076d58adcaede282"],"e0aed040842b70826cfd518b076d58adcaede282":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}