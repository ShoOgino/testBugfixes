{"path":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","commits":[{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af918c7c328775f9fadd5870c21f0fafc2a059cc","af918c7c328775f9fadd5870c21f0fafc2a059cc","af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#makeRandomQuery(Model,boolean,boolean).mjava","sourceNew":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","sourceOld":"  String makeRandomQuery(Model model, boolean mainQuery, boolean facetQuery) {\n\n    boolean cache = random.nextBoolean();\n    int cost = cache ? 0 : random.nextBoolean() ? random.nextInt(200) : 0;\n    boolean positive = random.nextBoolean();\n    boolean exclude = facetQuery ? false : random.nextBoolean();    // can't exclude a facet query from faceting\n\n    OpenBitSet[] sets = facetQuery ? new OpenBitSet[]{model.facetQuery} :\n        (exclude ? new OpenBitSet[]{model.answer, model.facetQuery} : new OpenBitSet[]{model.answer, model.multiSelect, model.facetQuery});\n\n    if (random.nextInt(100) < 50) {\n      // frange\n      int l=0;\n      int u=0;\n\n      if (positive) {\n        // positive frange, make it big by taking the max of 4 tries\n        int n=-1;\n\n        for (int i=0; i<4; i++) {\n          int ll = random.nextInt(model.indexSize);\n          int uu = ll + ((ll==model.indexSize-1) ? 0 : random.nextInt(model.indexSize-l));\n          if (uu-ll+1 > n) {\n            n = uu-ll+1;\n            u = uu;\n            l = ll;\n          }\n        }\n\n        for (OpenBitSet set : sets) {\n          set.clear(0,l);\n          set.clear(u+1, model.indexSize);\n        }\n      } else {\n        // negative frange.. make it relatively small\n        l = random.nextInt(model.indexSize);\n        u = Math.max(model.indexSize-1, l+random.nextInt(Math.max(model.indexSize / 10, 2)));\n\n        for (OpenBitSet set : sets) {\n          set.clear(l,u+1);\n        }\n      }\n\n      return frangeStr(!positive, l, u, cache, cost, exclude);\n    } else {\n      // term or boolean query\n      OpenBitSet pset = new OpenBitSet(model.indexSize);\n      for (int i=0; i<pset.getBits().length; i++) {\n        pset.getBits()[i] = random.nextLong();    // set 50% of the bits on average\n      }\n      if (positive) {\n        for (OpenBitSet set : sets) {\n          set.and(pset);\n        }\n      } else {\n        for (OpenBitSet set : sets) {\n          set.andNot(pset);\n        }\n      }\n\n\n      StringBuilder sb = new StringBuilder();\n      for (int doc=-1;;) {\n        doc = pset.nextSetBit(doc+1);\n        if (doc < 0 || doc >= model.indexSize) break;\n        sb.append((positive ? \" \":\" -\") + f+\":\"+doc);\n      }\n\n      String ret = sb.toString();\n      if (ret.length()==0) ret = (positive ? \"\":\"-\") + \"id:99999999\";\n\n      if (!cache || exclude || random.nextBoolean()) {\n        ret = \"{!cache=\" + cache\n            + ((cost != 0) ? \" cost=\"+cost : \"\")\n            + ((exclude) ? \" tag=t\" : \"\")\n            + \"}\" + ret;\n      }\n\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}