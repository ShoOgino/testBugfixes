{"path":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","commits":[{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","pathOld":"/dev/null","sourceNew":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n        }});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e72e3ade782716457071fee4033f18689acc4c4f","date":1496770651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","sourceNew":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    t.setTermFrequency(42);\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n          put(TermFrequencyAttribute.class.getName() + \"#termFrequency\", 42);\n        }});\n  }\n\n","sourceOld":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n        }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","sourceNew":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    t.setTermFrequency(42);\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n          put(TermFrequencyAttribute.class.getName() + \"#termFrequency\", 42);\n        }});\n  }\n\n","sourceOld":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n        }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","sourceNew":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    t.setTermFrequency(42);\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n          put(TermFrequencyAttribute.class.getName() + \"#termFrequency\", 42);\n        }});\n  }\n\n","sourceOld":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n        }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestPackedTokenAttributeImpl#testAttributeReflection().mjava","sourceNew":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    t.setTermFrequency(42);\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n          put(TermFrequencyAttribute.class.getName() + \"#termFrequency\", 42);\n        }});\n  }\n\n","sourceOld":"  public void testAttributeReflection() throws Exception {\n    PackedTokenAttributeImpl t = new PackedTokenAttributeImpl();\n    t.append(\"foobar\");\n    t.setOffset(6,  22);\n    t.setPositionIncrement(3);\n    t.setPositionLength(11);\n    t.setType(\"foobar\");\n    TestUtil.assertAttributeReflection(t,\n        new HashMap<String, Object>() {{\n          put(CharTermAttribute.class.getName() + \"#term\", \"foobar\");\n          put(TermToBytesRefAttribute.class.getName() + \"#bytes\", new BytesRef(\"foobar\"));\n          put(OffsetAttribute.class.getName() + \"#startOffset\", 6);\n          put(OffsetAttribute.class.getName() + \"#endOffset\", 22);\n          put(PositionIncrementAttribute.class.getName() + \"#positionIncrement\", 3);\n          put(PositionLengthAttribute.class.getName() + \"#positionLength\", 11);\n          put(TypeAttribute.class.getName() + \"#type\", \"foobar\");\n        }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e72e3ade782716457071fee4033f18689acc4c4f":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["93124590c6e2a8b45898cbae46f96c3a05d9bce0","e72e3ade782716457071fee4033f18689acc4c4f"],"28288370235ed02234a64753cdbf0c6ec096304a":["93124590c6e2a8b45898cbae46f96c3a05d9bce0","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93124590c6e2a8b45898cbae46f96c3a05d9bce0","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["e72e3ade782716457071fee4033f18689acc4c4f","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e72e3ade782716457071fee4033f18689acc4c4f":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}