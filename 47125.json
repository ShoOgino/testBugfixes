{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,String,String,IOContext).mjava","commits":[{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46FieldInfosFormat.CODEC_NAME, \n                                                      Lucene46FieldInfosFormat.FORMAT_START, \n                                                      Lucene46FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        if (fieldNumber < 0) {\n          throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n        }\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene46FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene46FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene46FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene46FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final long dvGen = input.readLong();\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n      }\n      \n      if (codecVersion >= Lucene46FieldInfosFormat.FORMAT_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46FieldInfosFormat.CODEC_NAME, \n                                                      Lucene46FieldInfosFormat.FORMAT_START, \n                                                      Lucene46FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        if (fieldNumber < 0) {\n          throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n        }\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene46FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene46FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene46FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene46FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final long dvGen = input.readLong();\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n      }\n      \n      if (codecVersion >= Lucene46FieldInfosFormat.FORMAT_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46FieldInfosFormat.CODEC_NAME, \n                                                      Lucene46FieldInfosFormat.FORMAT_START, \n                                                      Lucene46FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        if (fieldNumber < 0) {\n          throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n        }\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene46FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene46FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene46FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene46FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final long dvGen = input.readLong();\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n      }\n      \n      if (codecVersion >= Lucene46FieldInfosFormat.FORMAT_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(fileName, context)) {\n      int codecVersion = CodecUtil.checkHeader(input, Lucene46FieldInfosFormat.CODEC_NAME, \n                                                      Lucene46FieldInfosFormat.FORMAT_START, \n                                                      Lucene46FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        if (fieldNumber < 0) {\n          throw new CorruptIndexException(\"invalid field number for field: \" + name + \", fieldNumber=\" + fieldNumber, input);\n        }\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene46FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene46FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene46FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene46FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene46FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValuesType docValuesType = getDocValuesType(input, (byte) (val & 0x0F));\n        final DocValuesType normsType = getDocValuesType(input, (byte) ((val >>> 4) & 0x0F));\n        final long dvGen = input.readLong();\n        final Map<String,String> attributes = input.readStringStringMap();\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(attributes));\n      }\n      \n      if (codecVersion >= Lucene46FieldInfosFormat.FORMAT_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      return new FieldInfos(infos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77d177b70aefca41f3edc910b0a703c76283d8b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["77d177b70aefca41f3edc910b0a703c76283d8b6"]},"commit2Childs":{"77d177b70aefca41f3edc910b0a703c76283d8b6":["c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77d177b70aefca41f3edc910b0a703c76283d8b6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}