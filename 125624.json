{"path":"backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalNoTiebreaker().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalNoTiebreaker().mjava","pathOld":"/dev/null","sourceNew":"    public void testBooleanOptionalNoTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length-1; i++) { /* note: -1 */\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n            assertEquals(\"wrong last\", \"d1\", s.doc(h[h.length-1].doc).get(\"id\"));\n            float score1 = h[h.length-1].score;\n            assertTrue(\"d1 does not have worse score then others: \" +\n                       score + \" >? \" + score1,\n                       score > score1);\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalNoTiebreaker\",h, s);\n            throw e;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalNoTiebreaker().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalNoTiebreaker().mjava","sourceNew":"    public void testBooleanOptionalNoTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length-1; i++) { /* note: -1 */\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n            assertEquals(\"wrong last\", \"d1\", s.doc(h[h.length-1].doc).get(\"id\"));\n            float score1 = h[h.length-1].score;\n            assertTrue(\"d1 does not have worse score then others: \" +\n                       score + \" >? \" + score1,\n                       score > score1);\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalNoTiebreaker\",h, s);\n            throw e;\n        }\n    }\n\n","sourceOld":"    public void testBooleanOptionalNoTiebreaker() throws Exception {\n\n        BooleanQuery q = new BooleanQuery();\n        {\n            DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.0f);\n            q1.add(tq(\"hed\",\"albino\"));\n            q1.add(tq(\"dek\",\"albino\"));\n            q.add(q1, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        {\n            DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.0f);\n            q2.add(tq(\"hed\",\"elephant\"));\n            q2.add(tq(\"dek\",\"elephant\"));\n            q.add(q2, BooleanClause.Occur.SHOULD);//false,false);\n        }\n        QueryUtils.check(q,s);\n\n\n        ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n\n        try {\n            assertEquals(\"4 docs should match \" + q.toString(),\n                         4, h.length);\n            float score = h[0].score;\n            for (int i = 1; i < h.length-1; i++) { /* note: -1 */\n                assertEquals(\"score #\" + i + \" is not the same\",\n                             score, h[i].score, SCORE_COMP_THRESH);\n            }\n            assertEquals(\"wrong last\", \"d1\", s.doc(h[h.length-1].doc).get(\"id\"));\n            float score1 = h[h.length-1].score;\n            assertTrue(\"d1 does not have worse score then others: \" +\n                       score + \" >? \" + score1,\n                       score > score1);\n        } catch (Error e) {\n            printHits(\"testBooleanOptionalNoTiebreaker\",h, s);\n            throw e;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}