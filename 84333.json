{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"+ e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7c01f80e536140839f2b15359fe04106b0eced","date":1479265585,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'\",\n          sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"\n          + e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"+ e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"\n          + e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'\",\n          sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4149dd739240f7ae0f2188920ae11f66e4a200","date":1554468772,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#open().mjava","sourceNew":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n      resultSet.setFetchSize(fetchSize);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"\n          + e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","sourceOld":"  /**\n  * Opens the JDBCStream\n  *\n  ***/\n  public void open() throws IOException {\n    \n    try{\n      if(null != driverClassName){\n        Class.forName(driverClassName);\n      }\n    } catch (ClassNotFoundException e){\n      throw new IOException(String.format(Locale.ROOT, \"Failed to load JDBC driver for '%s'\", driverClassName), e);\n    }\n    \n    // See if we can figure out the driver based on the url, if not then tell the user they most likely want to provide the driverClassName.\n    // Not being able to find a driver generally means the driver has not been loaded.\n    try{\n      if(null == DriverManager.getDriver(connectionUrl)){\n        throw new SQLException(\"DriverManager.getDriver(url) returned null\");\n      }\n    } catch(SQLException e){\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to determine JDBC driver from connection url '%s'. Usually this means the driver is not loaded - \" +\n              \"you can have JDBCStream try to load it by providing the 'driverClassName' value\", connectionUrl), e);\n    }\n    \n    try {\n      connection = DriverManager.getConnection(connectionUrl, connectionProperties);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to open JDBC connection to '%s'\", connectionUrl), e);\n    }\n    \n    try{\n      statement = connection.createStatement();\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to create a statement from JDBC connection '%s'\",\n          connectionUrl), e);\n    }\n    \n    try{\n      resultSet = statement.executeQuery(sqlQuery);\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Failed to execute sqlQuery '%s' against JDBC connection '%s'.\\n\"\n          + e.getMessage(), sqlQuery, connectionUrl), e);\n    }\n    \n    try{\n      // using the metadata, build selectors for each column\n      valueSelectors = constructValueSelectors(resultSet.getMetaData());\n    } catch (SQLException e) {\n      throw new IOException(String.format(Locale.ROOT,\n          \"Failed to generate value selectors for sqlQuery '%s' against JDBC connection '%s'\", sqlQuery, connectionUrl), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["c533b201163bd7b15aa8881f922f9289a7668187"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["bb7c01f80e536140839f2b15359fe04106b0eced","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"ea4149dd739240f7ae0f2188920ae11f66e4a200":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"bb7c01f80e536140839f2b15359fe04106b0eced":["c533b201163bd7b15aa8881f922f9289a7668187"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["612da0a0a2d5f4409da55729b9833e799f905ac5","bb7c01f80e536140839f2b15359fe04106b0eced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4149dd739240f7ae0f2188920ae11f66e4a200"]},"commit2Childs":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["ea4149dd739240f7ae0f2188920ae11f66e4a200"],"bb7c01f80e536140839f2b15359fe04106b0eced":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"ea4149dd739240f7ae0f2188920ae11f66e4a200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c533b201163bd7b15aa8881f922f9289a7668187":["612da0a0a2d5f4409da55729b9833e799f905ac5","bb7c01f80e536140839f2b15359fe04106b0eced"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}