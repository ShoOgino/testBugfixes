{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query]).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query]).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query]).mjava","sourceNew":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n  void saveTerms( Collection<Query> flatQueries ){\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","sourceOld":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n  void saveTerms( Collection<Query> flatQueries ){\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b77dee084743b07be452cf7c07c992a225b11146","date":1315532213,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query],IndexReader).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#saveTerms(Collection[Query]).mjava","sourceNew":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n    void saveTerms( Collection<Query> flatQueries, IndexReader reader ) throws IOException{\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else if (query instanceof MultiTermQuery && reader != null) {\n        BooleanQuery mtqTerms = (BooleanQuery) query.rewrite(reader);\n        for (BooleanClause clause : mtqTerms.getClauses()) {\n          termSet.add (((TermQuery) clause.getQuery()).getTerm().text());\n        }\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","sourceOld":"  /*\n   * Save the set of terms in the queries to termSetMap.\n   * \n   * ex1) q=name:john\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\">>\n   *          \n   * ex2) q=name:john title:manager\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\">,\n   *                         \"title\",Set<\"manager\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"manager\">>\n   *          \n   * ex3) q=name:\"john lennon\"\n   *      - fieldMatch==true\n   *          termSetMap=Map<\"name\",Set<\"john\",\"lennon\">>\n   *      - fieldMatch==false\n   *          termSetMap=Map<null,Set<\"john\",\"lennon\">>\n   */\n  void saveTerms( Collection<Query> flatQueries ){\n    for( Query query : flatQueries ){\n      Set<String> termSet = getTermSet( query );\n      if( query instanceof TermQuery )\n        termSet.add( ((TermQuery)query).getTerm().text() );\n      else if( query instanceof PhraseQuery ){\n        for( Term term : ((PhraseQuery)query).getTerms() )\n          termSet.add( term.text() );\n      }\n      else\n        throw new RuntimeException( \"query \\\"\" + query.toString() + \"\\\" must be flatten first.\" );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b77dee084743b07be452cf7c07c992a225b11146":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b77dee084743b07be452cf7c07c992a225b11146"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["b77dee084743b07be452cf7c07c992a225b11146"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"b77dee084743b07be452cf7c07c992a225b11146":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}