{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#intializeAuthorizationPlugin().mjava","commits":[{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#intializeAuthorizationPlugin().mjava","pathOld":"/dev/null","sourceNew":"  private void intializeAuthorizationPlugin() {\n    //Initialize the Authorization module\n    Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n    if(securityProps != null) {\n      Map authorizationConf = (Map) securityProps.get(\"authorization\");\n      if(authorizationConf == null) return;\n      String klas = (String) authorizationConf.get(\"class\");\n      if(klas == null){\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = getResourceLoader().newInstance((String) klas,\n          AuthorizationPlugin.class);\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#intializeAuthorizationPlugin().mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private void intializeAuthorizationPlugin() {\n    //Initialize the Authorization module\n    Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n    if(securityProps != null) {\n      Map authorizationConf = (Map) securityProps.get(\"authorization\");\n      if(authorizationConf == null) return;\n      String klas = (String) authorizationConf.get(\"class\");\n      if(klas == null){\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = getResourceLoader().newInstance((String) klas,\n          AuthorizationPlugin.class);\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdcb86c29922edae9a14852e636303bc52df094"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}