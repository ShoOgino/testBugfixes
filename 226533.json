{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","sourceOld":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","sourceOld":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/Judge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","sourceOld":"  /**\n   * Validate that queries and this Judge match each other.\n   * To be perfectly valid, this Judge must have some data for each and every \n   * input quality query, and must not have any data on any other quality query.  \n   * <b>Note</b>: the quality benchmark run would not fail in case of imperfect\n   * validity, just a warning message would be logged.  \n   * @param qq quality queries to be validated.\n   * @param logger if not null, validation issues are logged.\n   * @return true if perfectly valid, false if not.\n   */\n  public boolean validateData (QualityQuery qq[], PrintWriter logger);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}