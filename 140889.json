{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader) \n   */\n  public String [] retrieveInterestingTerms(int docNum) throws IOException{\n    ArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms(docNum);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader) \n   */\n  public String [] retrieveInterestingTerms(int docNum) throws IOException{\n    ArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms(docNum);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader) \n   */\n  public String [] retrieveInterestingTerms(int docNum) throws IOException{\n    ArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms(docNum);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["e141595402370bee958745de8b1c9de1fa182581"],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e141595402370bee958745de8b1c9de1fa182581":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}