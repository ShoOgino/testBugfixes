{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#add(int,int,int).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#add(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void add(int latEnc, int lonEnc, int docID) throws IOException {\n    assert latEnc > Integer.MIN_VALUE;\n    assert latEnc < Integer.MAX_VALUE;\n    assert lonEnc > Integer.MIN_VALUE;\n    assert lonEnc < Integer.MAX_VALUE;\n\n    if (pointCount >= maxPointsSortInHeap) {\n      if (writer == null) {\n        switchToOffline();\n      }\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeInt(latEnc);\n      scratchBytesOutput.writeInt(lonEnc);\n      scratchBytesOutput.writeVInt(docID);\n      scratchBytesOutput.writeVLong(pointCount);\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    } else {\n      // Not too many points added yet, continue using heap:\n      heapWriter.append(latEnc, lonEnc, pointCount, docID);\n    }\n\n    pointCount++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#add(int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#add(int,int,int).mjava","sourceNew":"  void add(int latEnc, int lonEnc, int docID) throws IOException {\n    assert latEnc > Integer.MIN_VALUE;\n    assert latEnc < Integer.MAX_VALUE;\n    assert lonEnc > Integer.MIN_VALUE;\n    assert lonEnc < Integer.MAX_VALUE;\n\n    if (pointCount >= maxPointsSortInHeap) {\n      if (offlineWriter == null) {\n        switchToOffline();\n      }\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeInt(latEnc);\n      scratchBytesOutput.writeInt(lonEnc);\n      scratchBytesOutput.writeVInt(docID);\n      scratchBytesOutput.writeVLong(pointCount);\n      offlineWriter.write(scratchBytes, 0, scratchBytes.length);\n    } else {\n      // Not too many points added yet, continue using heap:\n      heapWriter.append(latEnc, lonEnc, pointCount, docID);\n    }\n\n    pointCount++;\n  }\n\n","sourceOld":"  void add(int latEnc, int lonEnc, int docID) throws IOException {\n    assert latEnc > Integer.MIN_VALUE;\n    assert latEnc < Integer.MAX_VALUE;\n    assert lonEnc > Integer.MIN_VALUE;\n    assert lonEnc < Integer.MAX_VALUE;\n\n    if (pointCount >= maxPointsSortInHeap) {\n      if (writer == null) {\n        switchToOffline();\n      }\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeInt(latEnc);\n      scratchBytesOutput.writeInt(lonEnc);\n      scratchBytesOutput.writeVInt(docID);\n      scratchBytesOutput.writeVLong(pointCount);\n      writer.write(scratchBytes, 0, scratchBytes.length);\n    } else {\n      // Not too many points added yet, continue using heap:\n      heapWriter.append(latEnc, lonEnc, pointCount, docID);\n    }\n\n    pointCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#add(int,int,int).mjava","sourceNew":null,"sourceOld":"  void add(int latEnc, int lonEnc, int docID) throws IOException {\n    assert latEnc > Integer.MIN_VALUE;\n    assert latEnc < Integer.MAX_VALUE;\n    assert lonEnc > Integer.MIN_VALUE;\n    assert lonEnc < Integer.MAX_VALUE;\n\n    if (pointCount >= maxPointsSortInHeap) {\n      if (offlineWriter == null) {\n        switchToOffline();\n      }\n      scratchBytesOutput.reset(scratchBytes);\n      scratchBytesOutput.writeInt(latEnc);\n      scratchBytesOutput.writeInt(lonEnc);\n      scratchBytesOutput.writeVInt(docID);\n      scratchBytesOutput.writeVLong(pointCount);\n      offlineWriter.write(scratchBytes, 0, scratchBytes.length);\n    } else {\n      // Not too many points added yet, continue using heap:\n      heapWriter.append(latEnc, lonEnc, pointCount, docID);\n    }\n\n    pointCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}