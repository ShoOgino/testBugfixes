{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMonteCarloWithVariables().mjava","commits":[{"id":"d8f3f292c7ac656734ed297fe52be0e012997e64","date":1523378182,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMonteCarloWithVariables().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMonteCarloWithVariables() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), \" +\n                \"       b=constantDistribution(20), \" +\n                \"       c=monteCarlo(d=sample(a),\"+\n                \"                    e=sample(b),\"+\n                \"                    add(d, add(e, 10)), \" +\n                \"                    10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 40.0, .0);\n    assertEquals(out.get(1).doubleValue(), 40.0, .0);\n    assertEquals(out.get(2).doubleValue(), 40.0, .0);\n    assertEquals(out.get(3).doubleValue(), 40.0, .0);\n    assertEquals(out.get(4).doubleValue(), 40.0, .0);\n    assertEquals(out.get(5).doubleValue(), 40.0, .0);\n    assertEquals(out.get(6).doubleValue(), 40.0, .0);\n    assertEquals(out.get(7).doubleValue(), 40.0, .0);\n    assertEquals(out.get(8).doubleValue(), 40.0, .0);\n    assertEquals(out.get(9).doubleValue(), 40.0, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMonteCarloWithVariables().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMonteCarloWithVariables().mjava","sourceNew":"  @Test\n  public void testMonteCarloWithVariables() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), \" +\n                \"       b=constantDistribution(20), \" +\n                \"       c=monteCarlo(d=sample(a),\"+\n                \"                    e=sample(b),\"+\n                \"                    add(d, add(e, 10)), \" +\n                \"                    10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 40.0, .0);\n    assertEquals(out.get(1).doubleValue(), 40.0, .0);\n    assertEquals(out.get(2).doubleValue(), 40.0, .0);\n    assertEquals(out.get(3).doubleValue(), 40.0, .0);\n    assertEquals(out.get(4).doubleValue(), 40.0, .0);\n    assertEquals(out.get(5).doubleValue(), 40.0, .0);\n    assertEquals(out.get(6).doubleValue(), 40.0, .0);\n    assertEquals(out.get(7).doubleValue(), 40.0, .0);\n    assertEquals(out.get(8).doubleValue(), 40.0, .0);\n    assertEquals(out.get(9).doubleValue(), 40.0, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMonteCarloWithVariables() throws Exception {\n    String cexpr = \"let(a=constantDistribution(10), \" +\n                \"       b=constantDistribution(20), \" +\n                \"       c=monteCarlo(d=sample(a),\"+\n                \"                    e=sample(b),\"+\n                \"                    add(d, add(e, 10)), \" +\n                \"                    10))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertTrue(out.size()==10);\n    assertEquals(out.get(0).doubleValue(), 40.0, .0);\n    assertEquals(out.get(1).doubleValue(), 40.0, .0);\n    assertEquals(out.get(2).doubleValue(), 40.0, .0);\n    assertEquals(out.get(3).doubleValue(), 40.0, .0);\n    assertEquals(out.get(4).doubleValue(), 40.0, .0);\n    assertEquals(out.get(5).doubleValue(), 40.0, .0);\n    assertEquals(out.get(6).doubleValue(), 40.0, .0);\n    assertEquals(out.get(7).doubleValue(), 40.0, .0);\n    assertEquals(out.get(8).doubleValue(), 40.0, .0);\n    assertEquals(out.get(9).doubleValue(), 40.0, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["d8f3f292c7ac656734ed297fe52be0e012997e64"],"d8f3f292c7ac656734ed297fe52be0e012997e64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8f3f292c7ac656734ed297fe52be0e012997e64":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8f3f292c7ac656734ed297fe52be0e012997e64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}