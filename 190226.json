{"path":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","commits":[{"id":"b69cd84ea1afad0c686a964bdc267f3a298b8c0e","date":1280257599,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    pass++;\n\n    for (Fieldable field: doc.getFields()) {\n      CSVField csvField = csvFields.get(field.name());\n      if (csvField == null) continue;\n      if (csvField.tmp != pass) {\n        csvField.tmp = pass;\n        csvField.values.clear();\n      }\n      csvField.values.add(field);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      if (csvField.name.equals(\"score\")) {\n        writeFloat(\"score\", score);\n        continue;\n      }\n      if (csvField.tmp != pass) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if (csvField.sf.multiValued() || csvField.values.size() > 1) {\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Fieldable fval : csvField.values) {\n          csvField.sf.getType().write(this, csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n      } else {\n        assert csvField.values.size() == 1;\n        csvField.sf.getType().write(this,csvField.name,csvField.values.get(0));\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    pass++;\n\n    for (Fieldable field: doc.getFields()) {\n      CSVField csvField = csvFields.get(field.name());\n      if (csvField == null) continue;\n      if (csvField.tmp != pass) {\n        csvField.tmp = pass;\n        csvField.values.clear();\n      }\n      csvField.values.add(field);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      if (csvField.name.equals(\"score\")) {\n        writeFloat(\"score\", score);\n        continue;\n      }\n      if (csvField.tmp != pass) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if (csvField.sf.multiValued() || csvField.values.size() > 1) {\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Fieldable fval : csvField.values) {\n          csvField.sf.getType().write(this, csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n      } else {\n        assert csvField.values.size() == 1;\n        csvField.sf.getType().write(this,csvField.name,csvField.values.get(0));\n      }\n    }\n\n    printer.println();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    pass++;\n\n    for (Fieldable field: doc.getFields()) {\n      CSVField csvField = csvFields.get(field.name());\n      if (csvField == null) continue;\n      if (csvField.tmp != pass) {\n        csvField.tmp = pass;\n        csvField.values.clear();\n      }\n      csvField.values.add(field);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      if (csvField.name.equals(\"score\")) {\n        writeFloat(\"score\", score);\n        continue;\n      }\n      if (csvField.tmp != pass) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if (csvField.sf.multiValued() || csvField.values.size() > 1) {\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Fieldable fval : csvField.values) {\n          csvField.sf.getType().write(this, csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n      } else {\n        assert csvField.values.size() == 1;\n        csvField.sf.getType().write(this,csvField.name,csvField.values.get(0));\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    pass++;\n\n    for (Fieldable field: doc.getFields()) {\n      CSVField csvField = csvFields.get(field.name());\n      if (csvField == null) continue;\n      if (csvField.tmp != pass) {\n        csvField.tmp = pass;\n        csvField.values.clear();\n      }\n      csvField.values.add(field);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      if (csvField.name.equals(\"score\")) {\n        writeFloat(\"score\", score);\n        continue;\n      }\n      if (csvField.tmp != pass) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if (csvField.sf.multiValued() || csvField.values.size() > 1) {\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Fieldable fval : csvField.values) {\n          csvField.sf.getType().write(this, csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n      } else {\n        assert csvField.values.size() == 1;\n        csvField.sf.getType().write(this,csvField.name,csvField.values.get(0));\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/CSVWriter[CSVResponseWriter]#writeDoc(String,Document,Set[String],float,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Document doc, Set<String> returnFields, float score, boolean includeScore) throws IOException {\n    pass++;\n\n    for (Fieldable field: doc.getFields()) {\n      CSVField csvField = csvFields.get(field.name());\n      if (csvField == null) continue;\n      if (csvField.tmp != pass) {\n        csvField.tmp = pass;\n        csvField.values.clear();\n      }\n      csvField.values.add(field);\n    }\n\n    for (CSVField csvField : csvFields.values()) {\n      if (csvField.name.equals(\"score\")) {\n        writeFloat(\"score\", score);\n        continue;\n      }\n      if (csvField.tmp != pass) {\n        writeNull(csvField.name);\n        continue;\n      }\n\n      if (csvField.sf.multiValued() || csvField.values.size() > 1) {\n        mvWriter.reset();\n        csvField.mvPrinter.reset();\n        // switch the printer to use the multi-valued one\n        CSVPrinter tmp = printer;\n        printer = csvField.mvPrinter;\n        for (Fieldable fval : csvField.values) {\n          csvField.sf.getType().write(this, csvField.name, fval);\n        }\n        printer = tmp;  // restore the original printer\n\n        mvWriter.freeze();\n        printer.print(mvWriter.getFrozenBuf(), 0, mvWriter.getFrozenSize(), true);\n      } else {\n        assert csvField.values.size() == 1;\n        csvField.sf.getType().write(this,csvField.name,csvField.values.get(0));\n      }\n    }\n\n    printer.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["3242a09f703274d3b9283f2064a1a33064b53a1b","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e","6aedf81f068e430dec27d94310415cc6ff52731c"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["3242a09f703274d3b9283f2064a1a33064b53a1b","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}