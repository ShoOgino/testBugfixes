{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","commits":[{"id":"365f98746545c0785c9778597f8558f5f91db4ad","date":1429195989,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    if (ignoreTF) {\n      return new ConstantScoreQuery(new TermQuery(term));\n    } else {\n      // we build an artificial TermContext that will give an overall df and ttf\n      // equal to 1\n      TermContext context = new TermContext(reader.getContext());\n      for (LeafReaderContext leafContext : reader.leaves()) {\n        Terms terms = leafContext.reader().terms(term.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term.bytes())) {\n            int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n            context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n          }\n        }\n      }\n      return new TermQuery(term, context);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    if (ignoreTF) {\n      return new ConstantScoreQuery(new TermQuery(term));\n    } else {\n      // we build an artificial TermStates that will give an overall df and ttf\n      // equal to 1\n      TermStates context = new TermStates(reader.getContext());\n      for (LeafReaderContext leafContext : reader.leaves()) {\n        Terms terms = leafContext.reader().terms(term.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term.bytes())) {\n            int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n            context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n          }\n        }\n      }\n      return new TermQuery(term, context);\n    }\n  }\n\n","sourceOld":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    if (ignoreTF) {\n      return new ConstantScoreQuery(new TermQuery(term));\n    } else {\n      // we build an artificial TermContext that will give an overall df and ttf\n      // equal to 1\n      TermContext context = new TermContext(reader.getContext());\n      for (LeafReaderContext leafContext : reader.leaves()) {\n        Terms terms = leafContext.reader().terms(term.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term.bytes())) {\n            int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n            context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n          }\n        }\n      }\n      return new TermQuery(term, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery#newTermQuery(IndexReader,Term).mjava","sourceNew":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    if (ignoreTF) {\n      return new ConstantScoreQuery(new TermQuery(term));\n    } else {\n      // we build an artificial TermStates that will give an overall df and ttf\n      // equal to 1\n      TermStates context = new TermStates(reader.getContext());\n      for (LeafReaderContext leafContext : reader.leaves()) {\n        Terms terms = leafContext.reader().terms(term.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term.bytes())) {\n            int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n            context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n          }\n        }\n      }\n      return new TermQuery(term, context);\n    }\n  }\n\n","sourceOld":"  private Query newTermQuery(IndexReader reader, Term term) throws IOException {\n    if (ignoreTF) {\n      return new ConstantScoreQuery(new TermQuery(term));\n    } else {\n      // we build an artificial TermContext that will give an overall df and ttf\n      // equal to 1\n      TermContext context = new TermContext(reader.getContext());\n      for (LeafReaderContext leafContext : reader.leaves()) {\n        Terms terms = leafContext.reader().terms(term.field());\n        if (terms != null) {\n          TermsEnum termsEnum = terms.iterator();\n          if (termsEnum.seekExact(term.bytes())) {\n            int freq = 1 - context.docFreq(); // we want the total df and ttf to be 1\n            context.register(termsEnum.termState(), leafContext.ord, freq, freq);\n          }\n        }\n      }\n      return new TermQuery(term, context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["365f98746545c0785c9778597f8558f5f91db4ad","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["365f98746545c0785c9778597f8558f5f91db4ad"],"365f98746545c0785c9778597f8558f5f91db4ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"365f98746545c0785c9778597f8558f5f91db4ad":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["365f98746545c0785c9778597f8558f5f91db4ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}