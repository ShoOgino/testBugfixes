{"path":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testJavaLangErrorFromHandlerOnStartup().mjava","commits":[{"id":"4c630823e52a651e16e3a73743e11465ac856eed","date":1420742337,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testJavaLangErrorFromHandlerOnStartup().mjava","pathOld":"/dev/null","sourceNew":"  public void testJavaLangErrorFromHandlerOnStartup() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"java_lang_error_handler\");\n\n    // start with two collections: 1 ok, and 1 that throws java.lang.Error on startup\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"my_error_handler\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-error-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention root problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"throwing a java.lang.Error\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testJavaLangErrorFromHandlerOnStartup().mjava","sourceNew":null,"sourceOld":"  public void testJavaLangErrorFromHandlerOnStartup() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"java_lang_error_handler\");\n\n    // start with two collections: 1 ok, and 1 that throws java.lang.Error on startup\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"my_error_handler\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-error-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention root problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"throwing a java.lang.Error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c630823e52a651e16e3a73743e11465ac856eed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["4c630823e52a651e16e3a73743e11465ac856eed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"4c630823e52a651e16e3a73743e11465ac856eed":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c630823e52a651e16e3a73743e11465ac856eed"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}