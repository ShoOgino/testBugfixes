{"path":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","commits":[{"id":"696ae660e2377ef5574e572e9969026ed20f36cb","date":1244283521,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(Config).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<SolrConfig.PluginInfo,SolrRequestHandler> handlers = new HashMap<SolrConfig.PluginInfo,SolrRequestHandler>();\n    for (SolrConfig.PluginInfo info : config.reqHandlerInfo) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<SolrConfig.PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized \n   * before they are registered, this function does not do that exactly.\n   * \n   * This function registers all handlers first and then calls init() for each one.  \n   * \n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n  void initHandlersFromConfig( final Config config )  \n  {\n    final RequestHandlers handlers = this;\n    AbstractPluginLoader<SolrRequestHandler> loader = \n      new AbstractPluginLoader<SolrRequestHandler>( \"[solrconfig.xml] requestHandler\", true, true )\n    {\n      @Override\n      protected SolrRequestHandler create( ResourceLoader config, String name, String className, Node node ) throws Exception\n      {    \n        String startup = DOMUtil.getAttr( node, \"startup\" );\n        if( startup != null ) {\n          if( \"lazy\".equals( startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + className );\n            NamedList args = DOMUtil.childNodesToNamedList(node);\n            return new LazyRequestHandlerWrapper( core, className, args );\n          }\n          else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+className );\n          }\n        }\n        return super.create( config, name, className, node );\n      }\n\n      @Override\n      protected SolrRequestHandler register(String name, SolrRequestHandler plugin) throws Exception {\n        return handlers.register( name, plugin );\n      }\n      \n      @Override\n      protected void init(SolrRequestHandler plugin, Node node ) throws Exception {\n        plugin.init( DOMUtil.childNodesToNamedList(node) );\n      }      \n    };\n    \n    NodeList nodes = (NodeList)config.evaluate(\"requestHandler\", XPathConstants.NODESET);\n    \n    // Load the handlers and get the default one\n    SolrRequestHandler defaultHandler = loader.load( config.getResourceLoader(), nodes );\n    if( defaultHandler == null ) {\n      defaultHandler = get(RequestHandlers.DEFAULT_HANDLER_NAME);\n      if( defaultHandler == null ) {\n        defaultHandler = new StandardRequestHandler();\n        register(RequestHandlers.DEFAULT_HANDLER_NAME, defaultHandler);\n      }\n    }\n    register(\"\", defaultHandler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<SolrConfig.PluginInfo,SolrRequestHandler> handlers = new HashMap<SolrConfig.PluginInfo,SolrRequestHandler>();\n    for (SolrConfig.PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<SolrConfig.PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<SolrConfig.PluginInfo,SolrRequestHandler> handlers = new HashMap<SolrConfig.PluginInfo,SolrRequestHandler>();\n    for (SolrConfig.PluginInfo info : config.reqHandlerInfo) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<SolrConfig.PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d10311dc892eac490ca97851d5764dfe32d86759","date":1251102986,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<SolrConfig.PluginInfo,SolrRequestHandler> handlers = new HashMap<SolrConfig.PluginInfo,SolrRequestHandler>();\n    for (SolrConfig.PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<SolrConfig.PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":["aac723595c848b3bb678eec506ae63c85102b6ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fd15423a61ef76f95e29439d3c89f41a2e67bc6","date":1251700343,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = (SolrRequestHandler) config.getResourceLoader().newInstance(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getReqHandlerInfo()) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        if( info.startup != null ) {\n          if( \"lazy\".equals(info.startup ) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+info.startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        requestHandler.init(info.initArgs);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":["aac723595c848b3bb678eec506ae63c85102b6ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    Map<PluginInfo,SolrRequestHandler> handlers = new HashMap<PluginInfo,SolrRequestHandler>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        if (requestHandler instanceof PluginInfoInitialized) {\n          ((PluginInfoInitialized) requestHandler).init(info);\n        } else{\n          requestHandler.init(info.initArgs);\n        }\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception e) {\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n      }\n    }\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      entry.getValue().init(entry.getKey().initArgs);\n    }\n\n    if(get(\"\") == null) register(\"\", get(DEFAULT_HANDLER_NAME));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d10311dc892eac490ca97851d5764dfe32d86759":["b338a77d735377ad6a2b02379ce3000377ff8631"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["28a016ae2abf4934515e45810192aa4350e3092b"],"4fd15423a61ef76f95e29439d3c89f41a2e67bc6":["d10311dc892eac490ca97851d5764dfe32d86759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"696ae660e2377ef5574e572e9969026ed20f36cb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"28a016ae2abf4934515e45810192aa4350e3092b":["4fd15423a61ef76f95e29439d3c89f41a2e67bc6"],"b338a77d735377ad6a2b02379ce3000377ff8631":["696ae660e2377ef5574e572e9969026ed20f36cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d10311dc892eac490ca97851d5764dfe32d86759":["4fd15423a61ef76f95e29439d3c89f41a2e67bc6"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["ad94625fb8d088209f46650c8097196fec67f00c"],"4fd15423a61ef76f95e29439d3c89f41a2e67bc6":["28a016ae2abf4934515e45810192aa4350e3092b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["696ae660e2377ef5574e572e9969026ed20f36cb"],"696ae660e2377ef5574e572e9969026ed20f36cb":["b338a77d735377ad6a2b02379ce3000377ff8631"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"b338a77d735377ad6a2b02379ce3000377ff8631":["d10311dc892eac490ca97851d5764dfe32d86759"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}