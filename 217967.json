{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    ArrayList<AccessibleObject> members = new ArrayList<AccessibleObject>();\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f253a4f41457e79e36c9b6c54166ae9883b9f7","date":1362143536,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      // TODO: Fix below code to use c.isAnnotationPresent(). It was changed\n      // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).\n      if (member.getAnnotation(Field.class) != null) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5","date":1363992115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      // TODO: Fix below code to use c.isAnnotationPresent(). It was changed\n      // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).\n      if (member.getAnnotation(Field.class) != null) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<DocField>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<AccessibleObject>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    boolean childFieldFound = false;\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        DocField df = new DocField(member);\n        if (df.child != null) {\n          if (childFieldFound)\n            throw new BindingException(clazz.getName() + \" cannot have more than one Field with child=true\");\n          childFieldFound = true;\n        }\n        fields.add(df);\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        fields.add(new DocField(member));\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4383b91725e5b335d0a9d5f24b122b813dddd0cc","date":1442106431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs access to possibly private @Field annotated fields/methods\")\n  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    boolean childFieldFound = false;\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        AccessController.doPrivileged((PrivilegedAction<Void>) () -> { member.setAccessible(true); return null; });\n        DocField df = new DocField(member);\n        if (df.child != null) {\n          if (childFieldFound)\n            throw new BindingException(clazz.getName() + \" cannot have more than one Field with child=true\");\n          childFieldFound = true;\n        }\n        fields.add(df);\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    boolean childFieldFound = false;\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        member.setAccessible(true);\n        DocField df = new DocField(member);\n        if (df.child != null) {\n          if (childFieldFound)\n            throw new BindingException(clazz.getName() + \" cannot have more than one Field with child=true\");\n          childFieldFound = true;\n        }\n        fields.add(df);\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#collectInfo(Class).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs access to possibly private @Field annotated fields/methods\")\n  private List<DocField> collectInfo(@SuppressWarnings({\"rawtypes\"})Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    @SuppressWarnings({\"rawtypes\"})\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    boolean childFieldFound = false;\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        AccessController.doPrivileged((PrivilegedAction<Void>) () -> { member.setAccessible(true); return null; });\n        DocField df = new DocField(member);\n        if (df.child != null) {\n          if (childFieldFound)\n            throw new BindingException(clazz.getName() + \" cannot have more than one Field with child=true\");\n          childFieldFound = true;\n        }\n        fields.add(df);\n      }\n    }\n    return fields;\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs access to possibly private @Field annotated fields/methods\")\n  private List<DocField> collectInfo(Class clazz) {\n    List<DocField> fields = new ArrayList<>();\n    Class superClazz = clazz;\n    List<AccessibleObject> members = new ArrayList<>();\n\n    while (superClazz != null && superClazz != Object.class) {\n      members.addAll(Arrays.asList(superClazz.getDeclaredFields()));\n      members.addAll(Arrays.asList(superClazz.getDeclaredMethods()));\n      superClazz = superClazz.getSuperclass();\n    }\n    boolean childFieldFound = false;\n    for (AccessibleObject member : members) {\n      if (member.isAnnotationPresent(Field.class)) {\n        AccessController.doPrivileged((PrivilegedAction<Void>) () -> { member.setAccessible(true); return null; });\n        DocField df = new DocField(member);\n        if (df.child != null) {\n          if (childFieldFound)\n            throw new BindingException(clazz.getName() + \" cannot have more than one Field with child=true\");\n          childFieldFound = true;\n        }\n        fields.add(df);\n      }\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"31f253a4f41457e79e36c9b6c54166ae9883b9f7":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4383b91725e5b335d0a9d5f24b122b813dddd0cc":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["4383b91725e5b335d0a9d5f24b122b813dddd0cc"],"31f253a4f41457e79e36c9b6c54166ae9883b9f7":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}