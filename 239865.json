{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":null,"sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":null,"sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testFarsi().mjava","sourceNew":null,"sourceOld":"  public void testFarsi() throws Exception {\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator.  However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator collator = Collator.getInstance(new Locale(\"ar\"));\n    Query query = new TermRangeQuery(\"content\", \"\\u062F\", \"\\u0698\", true, true, collator);\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery with a Farsi\n    // Collator (or an Arabic one for the case when Farsi is not supported).\n    initializeIndex(new String[]{ \"\\u0633\\u0627\\u0628\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"\\u0633\", \"\\u0638\",true, true, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}