{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","commits":[{"id":"284150a925b4535812cc93f2c3960aecc21d94c1","date":1437744070,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoubleClose() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n\n    DirectoryReader reader = DirectoryReader.open(w, false);\n    DirectoryReader wrapped = new DummyFilterDirectoryReader(reader);\n\n    // Calling close() on the original reader and wrapped reader should only close\n    // the original reader once (as per Closeable.close() contract that close() is\n    // idempotent)\n    List<DirectoryReader> readers = Arrays.asList(reader, wrapped);\n    Collections.shuffle(readers);\n    IOUtils.close(readers);\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1","date":1437750416,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","sourceNew":"  public void testDoubleClose() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n\n    DirectoryReader reader = DirectoryReader.open(w, false);\n    DirectoryReader wrapped = new DummyFilterDirectoryReader(reader);\n\n    // Calling close() on the original reader and wrapped reader should only close\n    // the original reader once (as per Closeable.close() contract that close() is\n    // idempotent)\n    List<DirectoryReader> readers = Arrays.asList(reader, wrapped);\n    Collections.shuffle(readers, random());\n    IOUtils.close(readers);\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleClose() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n\n    DirectoryReader reader = DirectoryReader.open(w, false);\n    DirectoryReader wrapped = new DummyFilterDirectoryReader(reader);\n\n    // Calling close() on the original reader and wrapped reader should only close\n    // the original reader once (as per Closeable.close() contract that close() is\n    // idempotent)\n    List<DirectoryReader> readers = Arrays.asList(reader, wrapped);\n    Collections.shuffle(readers);\n    IOUtils.close(readers);\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["284150a925b4535812cc93f2c3960aecc21d94c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterDirectoryReader#testDoubleClose().mjava","sourceNew":"  public void testDoubleClose() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n\n    DirectoryReader reader = DirectoryReader.open(w);\n    DirectoryReader wrapped = new DummyFilterDirectoryReader(reader);\n\n    // Calling close() on the original reader and wrapped reader should only close\n    // the original reader once (as per Closeable.close() contract that close() is\n    // idempotent)\n    List<DirectoryReader> readers = Arrays.asList(reader, wrapped);\n    Collections.shuffle(readers, random());\n    IOUtils.close(readers);\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDoubleClose() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n\n    DirectoryReader reader = DirectoryReader.open(w, false);\n    DirectoryReader wrapped = new DummyFilterDirectoryReader(reader);\n\n    // Calling close() on the original reader and wrapped reader should only close\n    // the original reader once (as per Closeable.close() contract that close() is\n    // idempotent)\n    List<DirectoryReader> readers = Arrays.asList(reader, wrapped);\n    Collections.shuffle(readers, random());\n    IOUtils.close(readers);\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1":["284150a925b4535812cc93f2c3960aecc21d94c1"],"284150a925b4535812cc93f2c3960aecc21d94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284150a925b4535812cc93f2c3960aecc21d94c1"],"7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1":["2a1862266772deb28cdcb7d996b64d2177022687"],"284150a925b4535812cc93f2c3960aecc21d94c1":["7863e2cb18fa91c0704edd6fe1f80b44b25ca7b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}