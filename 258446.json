{"path":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935577224abfd14a41ed9633bd1529925063d934","date":1283990440,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKey + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKey+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      // overlap facet refinement requests (those shards that we need a count for\n      // particular facet values from), where possible, with\n      // the requests to get fields (because we know that is the\n      // only other required phase).\n      // We do this in distributedProcess so we can look at all of the\n      // requests in the outgoing queue at once.\n\n\n\n      for (int shardNum=0; shardNum<rb.shards.length; shardNum++) {\n        List<String> refinements = null;\n\n        for (DistribFieldFacet dff : rb._facetInfo.facets.values()) {\n          if (!dff.needRefinements) continue;\n          List<String> refList = dff._toRefine[shardNum];\n          if (refList == null || refList.size()==0) continue;\n\n          String key = dff.getKey();  // reuse the same key that was used for the main facet\n          String termsKey = key + \"__terms\";\n          String termsVal = StrUtils.join(refList, ',');\n\n          String facetCommand;\n          // add terms into the original facet.field command\n          // do it via parameter reference to avoid another layer of encoding.\n\n          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);\n          if (dff.localParams != null) {\n            facetCommand = commandPrefix+termsKeyEncoded + \" \" + dff.facetStr.substring(2);\n          } else {\n            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;\n          }\n\n          if (refinements == null) {\n            refinements = new ArrayList<String>();\n          }\n\n          refinements.add(facetCommand);\n          refinements.add(termsKey);\n          refinements.add(termsVal);\n        }\n\n        if (refinements == null) continue;\n\n\n        String shard = rb.shards[shardNum];\n        ShardRequest refine = null;\n        boolean newRequest = false;\n\n        // try to find a request that is already going out to that shard.\n        // If nshards becomes to great, we way want to move to hashing for better\n        // scalability.\n        for (ShardRequest sreq : rb.outgoing) {\n          if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS)!=0\n                  && sreq.shards != null\n                  && sreq.shards.length==1\n                  && sreq.shards[0].equals(shard))\n          {\n            refine = sreq;\n            break;\n          }\n        }\n\n        if (refine == null) {\n          // we didn't find any other suitable requests going out to that shard, so\n          // create one ourselves.\n          newRequest = true;\n          refine = new ShardRequest();\n          refine.shards = new String[]{rb.shards[shardNum]};\n          refine.params = new ModifiableSolrParams(rb.req.getParams());\n          // don't request any documents\n          refine.params.remove(CommonParams.START);\n          refine.params.set(CommonParams.ROWS,\"0\");\n        }\n\n        refine.purpose |= ShardRequest.PURPOSE_REFINE_FACETS;\n        refine.params.set(FacetParams.FACET, \"true\");\n        refine.params.remove(FacetParams.FACET_FIELD);\n        refine.params.remove(FacetParams.FACET_QUERY);\n\n        for (int i=0; i<refinements.size();) {\n          String facetCommand=refinements.get(i++);\n          String termsKey=refinements.get(i++);\n          String termsVal=refinements.get(i++);\n\n          refine.params.add(FacetParams.FACET_FIELD, facetCommand);\n          refine.params.set(termsKey, termsVal);\n        }\n\n        if (newRequest) {\n          rb.addRequest(this, refine);\n        }\n      }\n    }\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["935577224abfd14a41ed9633bd1529925063d934"],"935577224abfd14a41ed9633bd1529925063d934":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["935577224abfd14a41ed9633bd1529925063d934","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["935577224abfd14a41ed9633bd1529925063d934"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","935577224abfd14a41ed9633bd1529925063d934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["935577224abfd14a41ed9633bd1529925063d934","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"935577224abfd14a41ed9633bd1529925063d934":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}