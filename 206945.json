{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(addDir, newIOContext(random())));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(addDir, newIOContext(random())));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}