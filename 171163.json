{"path":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","commits":[{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(Paths.get(cd.getInstanceDir()), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(Paths.get(cd.getInstanceDir()), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getZkClient(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":["2d4e985daefcb892b529223b478c47985fc3c483"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getZkClient(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    // TODO: Shouldn't the collection node be created by the Collections API?\n    zkController.createCollectionZkNode(cd.getCloudDescriptor());\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getZkClient(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName;\n    try {\n      configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + cd.getCollectionName());\n    }\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), cd.getConfigSet(), parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    try {\n      // for back compat with cores that can create collections without the collections API\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + cd.getCollectionName(), true)) {\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), cd.getCollectionName(), cd.getCloudDescriptor().getParams());\n      }\n    } catch (KeeperException e) {\n      SolrException.log(log, null, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      SolrException.log(log, null, e);\n    }\n\n    String configName;\n    try {\n      configName = zkController.getZkStateReader().readConfigName(cd.getCollectionName());\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Specified config does not exist in ZooKeeper: \" + cd.getCollectionName());\n    }\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a587c94af1f0093e1c855cd3d5486375336f16e","date":1579724797,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    final String colName = cd.getCollectionName();\n\n    // For back compat with cores that can create collections without the collections API\n    try {\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + colName, true)) {\n        // TODO remove this functionality or maybe move to a CLI mechanism\n        log.warn(\"Auto-creating collection (in ZK) from core descriptor (on disk).  This feature may go away!\");\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), colName, cd.getCloudDescriptor().getParams());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted auto-creating collection\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n    }\n\n    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n    final String configSetName;\n    try {\n      //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n      configSetName = zkController.getZkStateReader().readConfigName(colName);\n      cd.setConfigSet(configSetName);\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n    }\n\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), cd.getConfigSet(), parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    final String colName = cd.getCollectionName();\n\n    // For back compat with cores that can create collections without the collections API\n    try {\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + colName, true)) {\n        // TODO remove this functionality or maybe move to a CLI mechanism\n        log.warn(\"Auto-creating collection (in ZK) from core descriptor (on disk).  This feature may go away!\");\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), colName, cd.getCloudDescriptor().getParams());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted auto-creating collection\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n    }\n\n    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n    final String configSetName;\n    try {\n      //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n      configSetName = zkController.getZkStateReader().readConfigName(colName);\n      cd.setConfigSet(configSetName);\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n    }\n\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    final String colName = cd.getCollectionName();\n\n    // For back compat with cores that can create collections without the collections API\n    try {\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + colName, true)) {\n        // TODO remove this functionality or maybe move to a CLI mechanism\n        log.warn(\"Auto-creating collection (in ZK) from core descriptor (on disk).  This feature may go away!\");\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), colName, cd.getCloudDescriptor().getParams());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted auto-creating collection\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n    }\n\n    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n    final String configSetName;\n    try {\n      //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n      configSetName = zkController.getZkStateReader().readConfigName(colName);\n      cd.setConfigSet(configSetName);\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n    }\n\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(),\n        cd.getSubstitutableProperties(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f4495376415b0dd65f3aa2e20924227590b185","date":1585078460,"type":3,"author":"mariemat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService#createCoreResourceLoader(CoreDescriptor).mjava","sourceNew":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    final String colName = cd.getCollectionName();\n\n    // For back compat with cores that can create collections without the collections API\n    try {\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + colName, true)) {\n        // TODO remove this functionality or maybe move to a CLI mechanism\n        log.warn(\"Auto-creating collection (in ZK) from core descriptor (on disk).  This feature may go away!\");\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), colName, cd.getCloudDescriptor().getParams());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted auto-creating collection\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n    }\n\n    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n    final String configSetName;\n    try {\n      configSetName = zkController.getZkStateReader().readConfigName(colName);\n      cd.setConfigSet(configSetName);\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n    }\n\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(), zkController);\n  }\n\n","sourceOld":"  @Override\n  public SolrResourceLoader createCoreResourceLoader(CoreDescriptor cd) {\n    final String colName = cd.getCollectionName();\n\n    // For back compat with cores that can create collections without the collections API\n    try {\n      if (!zkController.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + colName, true)) {\n        // TODO remove this functionality or maybe move to a CLI mechanism\n        log.warn(\"Auto-creating collection (in ZK) from core descriptor (on disk).  This feature may go away!\");\n        CreateCollectionCmd.createCollectionZkNode(zkController.getSolrCloudManager().getDistribStateManager(), colName, cd.getCloudDescriptor().getParams());\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted auto-creating collection\", e);\n    } catch (KeeperException e) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Failure auto-creating collection\", e);\n    }\n\n    // The configSet is read from ZK and populated.  Ignore CD's pre-existing configSet; only populated in standalone\n    final String configSetName;\n    try {\n      //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n      configSetName = zkController.getZkStateReader().readConfigName(colName);\n      cd.setConfigSet(configSetName);\n    } catch (KeeperException ex) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + colName + \": \" + ex.getMessage());\n    }\n\n    return new ZkSolrResourceLoader(cd.getInstanceDir(), configSetName, parentLoader.getClassLoader(), zkController);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e4fb176991e13ab85dfe62dceeb287dde115745":["4949836c6e83246ddba8997472e3333f40986c8c"],"a6f4495376415b0dd65f3aa2e20924227590b185":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["2a587c94af1f0093e1c855cd3d5486375336f16e"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["2d4e985daefcb892b529223b478c47985fc3c483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"4949836c6e83246ddba8997472e3333f40986c8c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"2d4e985daefcb892b529223b478c47985fc3c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a587c94af1f0093e1c855cd3d5486375336f16e":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6f4495376415b0dd65f3aa2e20924227590b185"]},"commit2Childs":{"3e4fb176991e13ab85dfe62dceeb287dde115745":["2a587c94af1f0093e1c855cd3d5486375336f16e"],"a6f4495376415b0dd65f3aa2e20924227590b185":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a6f4495376415b0dd65f3aa2e20924227590b185"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d4e985daefcb892b529223b478c47985fc3c483"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4949836c6e83246ddba8997472e3333f40986c8c":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"2d4e985daefcb892b529223b478c47985fc3c483":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["4949836c6e83246ddba8997472e3333f40986c8c"],"2a587c94af1f0093e1c855cd3d5486375336f16e":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}