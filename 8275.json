{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","commits":[{"id":"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","date":1438964081,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i=0; i<10; i++) {\n      assertJQ(req(\"q\",\"*:* \"+ i, \"fq\",\"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          ,\"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\",\"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\",\"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    assertJQ(req(\"q\",\"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\",\"doesnotexist3\", \"fq\",\"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        ,\"/response/numFound==0\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\",\"*:* doesnotexist4\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=1;  // +1 for top level fq\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\",\"*:* doesnotexist5\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\",\"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // the inner filter\n    inserts+=1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\",\"+filter(*:*) +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\",\"+filter(*:*)^=10 +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==1.0\"  // normalization reduces to 1\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i=0; i<10; i++) {\n      assertJQ(req(\"q\",\"*:* \"+ i, \"fq\",\"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          ,\"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\",\"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\",\"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    assertJQ(req(\"q\",\"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\",\"doesnotexist3\", \"fq\",\"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        ,\"/response/numFound==0\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\",\"*:* doesnotexist4\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=1;  // +1 for top level fq\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\",\"*:* doesnotexist5\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\",\"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // the inner filter\n    inserts+=1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\",\"+filter(*:*) +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\",\"+filter(*:*)^=10 +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==10.0\" \n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i=0; i<10; i++) {\n      assertJQ(req(\"q\",\"*:* \"+ i, \"fq\",\"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          ,\"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\",\"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\",\"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    assertJQ(req(\"q\",\"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\",\"doesnotexist3\", \"fq\",\"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        ,\"/response/numFound==0\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\",\"*:* doesnotexist4\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=1;  // +1 for top level fq\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\",\"*:* doesnotexist5\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\",\"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // the inner filter\n    inserts+=1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\",\"+filter(*:*) +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\",\"+filter(*:*)^=10 +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==1.0\"  // normalization reduces to 1\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i=0; i<10; i++) {\n      assertJQ(req(\"q\",\"*:* \"+ i, \"fq\",\"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          ,\"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\",\"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\",\"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    assertJQ(req(\"q\",\"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\",\"doesnotexist3\", \"fq\",\"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        ,\"/response/numFound==0\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\",\"*:* doesnotexist4\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=1;  // +1 for top level fq\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\",\"*:* doesnotexist5\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\",\"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // the inner filter\n    inserts+=1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\",\"+filter(*:*) +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\",\"+filter(*:*)^=10 +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==10.0\" \n    );\n\n  }\n\n","bugFix":["49dd2950028d6b59839f54d3801d77f769fa22ef","b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i=0; i<10; i++) {\n      assertJQ(req(\"q\",\"*:* \"+ i, \"fq\",\"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          ,\"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\",\"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\",\"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    assertJQ(req(\"q\",\"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\",\"doesnotexist3\", \"fq\",\"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        ,\"/response/numFound==0\"\n    );\n\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\",\"*:* doesnotexist4\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    inserts+=1;  // +1 for top level fq\n    hits+=3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\",\"*:* doesnotexist5\", \"fq\",\"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\",\"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        ,\"/response/numFound==2\"\n    );\n\n    hits+=1;  // the inner filter\n    inserts+=1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue() );\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue() );\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\",\"+filter(*:*) +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\",\"+filter(*:*)^=10 +filter(id:1)\", \"fl\",\"id,score\", \"sort\",\"id asc\")\n        ,\"/response/docs/[0]/score==10.0\" \n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final SolrInfoMBean filterCacheStats\n        = h.getCore().getInfoRegistry().get(\"filterCache\");\n    assertNotNull(filterCacheStats);\n    final SolrInfoMBean queryCacheStats\n        = h.getCore().getInfoRegistry().get(\"queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getStatistics().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getStatistics().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getStatistics().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getStatistics().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0a9bb1aa125e50309e6e445617aea575652961","date":1514405131,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n    assertU(adoc(\"id\", \"40\", \"wdf_nocase\", \"just some text, don't want NPE\"));\n    assertU(commit());\n\n    // See SOLR-11555. If wdff removes all the characters, an NPE occurs.\n    // try q and fq\n    assertJQ(req(\"q\", \"filter(wdf_nocase:&)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"filter(wdf_nocase:.,)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n    // Insure the same behavior as with bare clause, just not filter\n    assertJQ(req(\"q\", \"wdf_nocase:&\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"wdf_nocase:.,\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n    assertU(adoc(\"id\", \"40\", \"wdf_nocase\", \"just some text, don't want NPE\"));\n    assertU(commit());\n\n    // See SOLR-11555. If wdff removes all the characters, an NPE occurs.\n    // try q and fq\n    assertJQ(req(\"q\", \"filter(wdf_nocase:&)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"filter(wdf_nocase:.,)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n    // Insure the same behavior as with bare clause, just not filter\n    assertJQ(req(\"q\", \"wdf_nocase:&\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"wdf_nocase:.,\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n    assertU(adoc(\"id\", \"40\", \"wdf_nocase\", \"just some text, don't want NPE\"));\n    assertU(commit());\n\n    // See SOLR-11555. If wdff removes all the characters, an NPE occurs.\n    // try q and fq\n    assertJQ(req(\"q\", \"filter(wdf_nocase:&)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"filter(wdf_nocase:.,)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n    // Insure the same behavior as with bare clause, just not filter\n    assertJQ(req(\"q\", \"wdf_nocase:&\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"wdf_nocase:.,\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testFilter().mjava","sourceNew":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n    assertU(adoc(\"id\", \"40\", \"wdf_nocase\", \"just some text, don't want NPE\"));\n    assertU(commit());\n\n    // See SOLR-11555. If wdff removes all the characters, an NPE occurs.\n    // try q and fq\n    assertJQ(req(\"q\", \"filter(wdf_nocase:&)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"filter(wdf_nocase:.,)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n    // Insure the same behavior as with bare clause, just not filter\n    assertJQ(req(\"q\", \"wdf_nocase:&\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"wdf_nocase:.,\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testFilter() throws Exception {\n\n    // normal test \"solrconfig.xml\" has autowarm set to 2...\n    for (int i = 0; i < 10; i++) {\n      assertJQ(req(\"q\", \"*:* \" + i, \"fq\", \"filter(just_to_clear_the_cache) filter(id:10000\" + i + \") filter(id:10001\" + i + \")\")\n          , \"/response/numFound==0\"\n      );\n    }\n    assertU(adoc(\"id\", \"777\"));\n    delI(\"777\");\n    assertU(commit());  // arg... commit no longer \"commits\" unless there has been a change.\n\n\n    final MetricsMap filterCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.filterCache\");\n    assertNotNull(filterCacheStats);\n    final MetricsMap queryCacheStats = (MetricsMap)h.getCore().getCoreMetricManager().getRegistry()\n        .getMetrics().get(\"CACHE.searcher.queryResultCache\");\n\n    assertNotNull(queryCacheStats);\n\n\n    long inserts = (Long) filterCacheStats.getValue().get(\"inserts\");\n    long hits = (Long) filterCacheStats.getValue().get(\"hits\");\n\n    assertJQ(req(\"q\", \"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    assertJQ(req(\"q\", \"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // make sure normal \"fq\" parameters also hit the cache the same way\n    assertJQ(req(\"q\", \"doesnotexist3\", \"fq\", \"id:1\", \"fq\", \"qqq_s:X\", \"fq\", \"abcdefg\")\n        , \"/response/numFound==0\"\n    );\n\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // try a query deeply nested in a FQ\n    assertJQ(req(\"q\", \"*:* doesnotexist4\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    inserts += 1;  // +1 for top level fq\n    hits += 3;\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries\n    assertJQ(req(\"q\", \"*:* doesnotexist5\", \"fq\", \"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // top-level fq should have been found.\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n\n    // try nested filter with multiple top-level args (i.e. a boolean query)\n    assertJQ(req(\"q\", \"*:* +filter(id:1 filter(qqq_s:X) abcdefg)\")\n        , \"/response/numFound==2\"\n    );\n\n    hits += 1;  // the inner filter\n    inserts += 1; // the outer filter\n    assertEquals(inserts, ((Long) filterCacheStats.getValue().get(\"inserts\")).longValue());\n    assertEquals(hits, ((Long) filterCacheStats.getValue().get(\"hits\")).longValue());\n\n    // test the score for a filter, and that default score is 0\n    assertJQ(req(\"q\", \"+filter(*:*) +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==0.0\"\n    );\n\n    assertJQ(req(\"q\", \"+filter(*:*)^=10 +filter(id:1)\", \"fl\", \"id,score\", \"sort\", \"id asc\")\n        , \"/response/docs/[0]/score==10.0\"\n    );\n\n    assertU(adoc(\"id\", \"40\", \"wdf_nocase\", \"just some text, don't want NPE\"));\n    assertU(commit());\n\n    // See SOLR-11555. If wdff removes all the characters, an NPE occurs.\n    // try q and fq\n    assertJQ(req(\"q\", \"filter(wdf_nocase:&)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"filter(wdf_nocase:.,)\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n    // Insure the same behavior as with bare clause, just not filter\n    assertJQ(req(\"q\", \"wdf_nocase:&\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"fq\", \"wdf_nocase:.,\", \"fl\", \"id\", \"debug\", \"query\")\n        , \"/response/numFound==0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7d959d418bddfa46d8eea54f0d8b855165586838"],"bfc52860e6d13d034226a760813c59d984c6817a":["8f0a9bb1aa125e50309e6e445617aea575652961"],"43564cbb30b064675027cfb569564e8531096e97":["8f0a9bb1aa125e50309e6e445617aea575652961","bfc52860e6d13d034226a760813c59d984c6817a"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["49dd2950028d6b59839f54d3801d77f769fa22ef","7d959d418bddfa46d8eea54f0d8b855165586838"],"8f0a9bb1aa125e50309e6e445617aea575652961":["816521ebaad5add9cb96bb88c577394e2938c40b"],"7d959d418bddfa46d8eea54f0d8b855165586838":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"816521ebaad5add9cb96bb88c577394e2938c40b":["7d959d418bddfa46d8eea54f0d8b855165586838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7d959d418bddfa46d8eea54f0d8b855165586838":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3","816521ebaad5add9cb96bb88c577394e2938c40b"],"8f0a9bb1aa125e50309e6e445617aea575652961":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["8f0a9bb1aa125e50309e6e445617aea575652961"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}