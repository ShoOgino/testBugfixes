{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,double).mjava","commits":[{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a double property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of doubles. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a double property.\n   */\n  public double get (String name, double dflt) {\n    // use value by round if already parsed\n    double vals[] = (double[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Double.parseDouble(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToDoubleArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,double).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,double).mjava","sourceNew":"  /**\n   * Return a double property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of doubles. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a double property.\n   */\n  public double get (String name, double dflt) {\n    // use value by round if already parsed\n    double vals[] = (double[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Double.parseDouble(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToDoubleArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return a double property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of doubles. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a double property.\n   */\n  public double get (String name, double dflt) {\n    // use value by round if already parsed\n    double vals[] = (double[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Double.parseDouble(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToDoubleArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"]},"commit2Childs":{"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}