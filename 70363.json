{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caada1d700c39415a1749fafa2d2b4088fecd90b","date":1282604066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = getCommitTime(lastCommit)/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = getCommitTime(commit)/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = getCommitTime(lastCommit)/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = getCommitTime(commit)/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = getCommitTime(lastCommit)/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = getCommitTime(commit)/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = getCommitTime(lastCommit)/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = getCommitTime(commit)/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = getCommitTime(lastCommit)/1000.0 - expirationTimeSeconds;\n\n      for (final IndexCommit commit : commits) {\n        double modTime = getCommitTime(commit)/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["caada1d700c39415a1749fafa2d2b4088fecd90b"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["caada1d700c39415a1749fafa2d2b4088fecd90b","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caada1d700c39415a1749fafa2d2b4088fecd90b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["caada1d700c39415a1749fafa2d2b4088fecd90b","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","caada1d700c39415a1749fafa2d2b4088fecd90b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"caada1d700c39415a1749fafa2d2b4088fecd90b":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["caada1d700c39415a1749fafa2d2b4088fecd90b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}