{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = new SortingAtomicReader(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85","4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.sort(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = new SortingAtomicReader(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.sort(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36e7ee652ccd538115c356b212269017fe6f4757","date":1365591252,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    _TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbe87c1ed50e47c3704b5fb2b690461bfc158aba","date":1394111115,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof SortSorter && random().nextBoolean()) {\n        sorter = new SortSorter(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true))); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof SortSorter && random().nextBoolean()) {\n        sorter = new SortSorter(new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true))); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":["cb767289784b682dea51f9e6d7222add811edb77","36e7ee652ccd538115c356b212269017fe6f4757"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    Sorter sorter = SORTERS[random().nextInt(SORTERS.length)];\n    if (sorter == Sorter.REVERSE_DOCS) {\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (sorter instanceof NumericDocValuesSorter && random().nextBoolean()) {\n        sorter = new NumericDocValuesSorter(NUMERIC_DV_FIELD, false); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<Integer>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingLeafReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingAtomicReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = reader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(reader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    reader = SortingLeafReader.wrap(reader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", reader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["36e7ee652ccd538115c356b212269017fe6f4757"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"36e7ee652ccd538115c356b212269017fe6f4757":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["cbe87c1ed50e47c3704b5fb2b690461bfc158aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cb767289784b682dea51f9e6d7222add811edb77"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cbe87c1ed50e47c3704b5fb2b690461bfc158aba","4637747f71df783fc2014ef1f1e0418466e3bed6"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36e7ee652ccd538115c356b212269017fe6f4757":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["36e7ee652ccd538115c356b212269017fe6f4757"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["b060a9c887ff2c6f4280953afc6fb6000934dae5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cb767289784b682dea51f9e6d7222add811edb77":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}