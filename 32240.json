{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testWorstCaseForDirectAddressing().mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testWorstCaseForDirectAddressing().mjava","pathOld":"/dev/null","sourceNew":"  public void testWorstCaseForDirectAddressing() throws Exception {\n    // This test will fail if there is more than 1% memory increase with direct addressing in this worst case.\n    final double MEMORY_INCREASE_LIMIT_PERCENT = 1d;\n    final int NUM_WORDS = 1000000;\n\n    // Generate words with specially crafted bytes.\n    Set<BytesRef> wordSet = new HashSet<>();\n    for (int i = 0; i < NUM_WORDS; ++i) {\n      byte[] b = new byte[5];\n      random().nextBytes(b);\n      for (int j = 0; j < b.length; ++j) {\n        b[j] &= 0xfc; // Make this byte a multiple of 4.\n      }\n      wordSet.add(new BytesRef(b));\n    }\n    List<BytesRef> wordList = new ArrayList<>(wordSet);\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    Builder<Object> builder = createBuilder(-1f);\n    FST<Object> fst = buildFST(wordList, builder);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    builder = createBuilder(Builder.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, builder);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n//    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n\n    // Verify the FST size does not exceed the limit.\n    assertTrue(\"FST size exceeds limit, size = \" + ramBytesUsed\n            + \", increase = \" + directAddressingMemoryIncreasePercent + \" %\"\n            + \", limit = \" + MEMORY_INCREASE_LIMIT_PERCENT + \" %\",\n        directAddressingMemoryIncreasePercent < MEMORY_INCREASE_LIMIT_PERCENT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testWorstCaseForDirectAddressing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testWorstCaseForDirectAddressing().mjava","sourceNew":"  public void testWorstCaseForDirectAddressing() throws Exception {\n    // This test will fail if there is more than 1% memory increase with direct addressing in this worst case.\n    final double MEMORY_INCREASE_LIMIT_PERCENT = 1d;\n    final int NUM_WORDS = 1000000;\n\n    // Generate words with specially crafted bytes.\n    Set<BytesRef> wordSet = new HashSet<>();\n    for (int i = 0; i < NUM_WORDS; ++i) {\n      byte[] b = new byte[5];\n      random().nextBytes(b);\n      for (int j = 0; j < b.length; ++j) {\n        b[j] &= 0xfc; // Make this byte a multiple of 4.\n      }\n      wordSet.add(new BytesRef(b));\n    }\n    List<BytesRef> wordList = new ArrayList<>(wordSet);\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    FSTCompiler<Object> fstCompiler = createFSTCompiler(-1f);\n    FST<Object> fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    fstCompiler = createFSTCompiler(FSTCompiler.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n//    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n\n    // Verify the FST size does not exceed the limit.\n    assertTrue(\"FST size exceeds limit, size = \" + ramBytesUsed\n            + \", increase = \" + directAddressingMemoryIncreasePercent + \" %\"\n            + \", limit = \" + MEMORY_INCREASE_LIMIT_PERCENT + \" %\",\n        directAddressingMemoryIncreasePercent < MEMORY_INCREASE_LIMIT_PERCENT);\n  }\n\n","sourceOld":"  public void testWorstCaseForDirectAddressing() throws Exception {\n    // This test will fail if there is more than 1% memory increase with direct addressing in this worst case.\n    final double MEMORY_INCREASE_LIMIT_PERCENT = 1d;\n    final int NUM_WORDS = 1000000;\n\n    // Generate words with specially crafted bytes.\n    Set<BytesRef> wordSet = new HashSet<>();\n    for (int i = 0; i < NUM_WORDS; ++i) {\n      byte[] b = new byte[5];\n      random().nextBytes(b);\n      for (int j = 0; j < b.length; ++j) {\n        b[j] &= 0xfc; // Make this byte a multiple of 4.\n      }\n      wordSet.add(new BytesRef(b));\n    }\n    List<BytesRef> wordList = new ArrayList<>(wordSet);\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    Builder<Object> builder = createBuilder(-1f);\n    FST<Object> fst = buildFST(wordList, builder);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    builder = createBuilder(Builder.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, builder);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n//    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n\n    // Verify the FST size does not exceed the limit.\n    assertTrue(\"FST size exceeds limit, size = \" + ramBytesUsed\n            + \", increase = \" + directAddressingMemoryIncreasePercent + \" %\"\n            + \", limit = \" + MEMORY_INCREASE_LIMIT_PERCENT + \" %\",\n        directAddressingMemoryIncreasePercent < MEMORY_INCREASE_LIMIT_PERCENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testWorstCaseForDirectAddressing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testWorstCaseForDirectAddressing().mjava","sourceNew":"  public void testWorstCaseForDirectAddressing() throws Exception {\n    // This test will fail if there is more than 1% memory increase with direct addressing in this worst case.\n    final double MEMORY_INCREASE_LIMIT_PERCENT = 1d;\n    final int NUM_WORDS = 1000000;\n\n    // Generate words with specially crafted bytes.\n    Set<BytesRef> wordSet = new HashSet<>();\n    for (int i = 0; i < NUM_WORDS; ++i) {\n      byte[] b = new byte[5];\n      random().nextBytes(b);\n      for (int j = 0; j < b.length; ++j) {\n        b[j] &= 0xfc; // Make this byte a multiple of 4.\n      }\n      wordSet.add(new BytesRef(b));\n    }\n    List<BytesRef> wordList = new ArrayList<>(wordSet);\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    FSTCompiler<Object> fstCompiler = createFSTCompiler(-1f);\n    FST<Object> fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    fstCompiler = createFSTCompiler(FSTCompiler.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n//    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n\n    // Verify the FST size does not exceed the limit.\n    assertTrue(\"FST size exceeds limit, size = \" + ramBytesUsed\n            + \", increase = \" + directAddressingMemoryIncreasePercent + \" %\"\n            + \", limit = \" + MEMORY_INCREASE_LIMIT_PERCENT + \" %\",\n        directAddressingMemoryIncreasePercent < MEMORY_INCREASE_LIMIT_PERCENT);\n  }\n\n","sourceOld":"  public void testWorstCaseForDirectAddressing() throws Exception {\n    // This test will fail if there is more than 1% memory increase with direct addressing in this worst case.\n    final double MEMORY_INCREASE_LIMIT_PERCENT = 1d;\n    final int NUM_WORDS = 1000000;\n\n    // Generate words with specially crafted bytes.\n    Set<BytesRef> wordSet = new HashSet<>();\n    for (int i = 0; i < NUM_WORDS; ++i) {\n      byte[] b = new byte[5];\n      random().nextBytes(b);\n      for (int j = 0; j < b.length; ++j) {\n        b[j] &= 0xfc; // Make this byte a multiple of 4.\n      }\n      wordSet.add(new BytesRef(b));\n    }\n    List<BytesRef> wordList = new ArrayList<>(wordSet);\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    Builder<Object> builder = createBuilder(-1f);\n    FST<Object> fst = buildFST(wordList, builder);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    builder = createBuilder(Builder.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, builder);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n//    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n\n    // Verify the FST size does not exceed the limit.\n    assertTrue(\"FST size exceeds limit, size = \" + ramBytesUsed\n            + \", increase = \" + directAddressingMemoryIncreasePercent + \" %\"\n            + \", limit = \" + MEMORY_INCREASE_LIMIT_PERCENT + \" %\",\n        directAddressingMemoryIncreasePercent < MEMORY_INCREASE_LIMIT_PERCENT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}