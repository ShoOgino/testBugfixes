{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","commits":[{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an IndexSchema object for a core\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"  /**\n   * Create an IndexSchema object for a core.  It might be a cached lookup.\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    // This is the schema name from the core descriptor.  Sometimes users specify a custom schema file.\n    //   Important:  indexSchemaFactory.create wants this!\n    String cdSchemaName = cd.getSchemaName();\n    // This is the schema name that we think will actually be used.  In the case of a managed schema,\n    //  we don't know for sure without examining what files exists in the configSet, and we don't\n    //  want to pay the overhead of that at this juncture.  If we guess wrong, no schema sharing.\n    //  The fix is usually to name your schema managed-schema instead of schema.xml.\n    IndexSchemaFactory indexSchemaFactory = IndexSchemaFactory.newIndexSchemaFactory(solrConfig);\n    String guessSchemaName = indexSchemaFactory.getSchemaResourceName(cdSchemaName);\n\n    String configSet = cd.getConfigSet();\n    if (configSet != null && schemaCache != null) {\n      Long modVersion = getCurrentSchemaModificationVersion(configSet, solrConfig, guessSchemaName);\n      if (modVersion != null) {\n        // note: luceneMatchVersion influences the schema\n        String cacheKey = configSet + \"/\" + guessSchemaName + \"/\" + modVersion + \"/\" + solrConfig.luceneMatchVersion;\n        return schemaCache.get(cacheKey,\n            (key) -> indexSchemaFactory.create(cdSchemaName, solrConfig));\n      } else {\n        log.warn(\"Unable to get schema modification version, configSet={} schema={}\", configSet, guessSchemaName);\n        // see explanation above; \"guessSchema\" is a guess\n      }\n    }\n\n    return indexSchemaFactory.create(cdSchemaName, solrConfig);\n  }\n\n","sourceOld":"  /**\n   * Create an IndexSchema object for a core\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    return IndexSchemaFactory.buildIndexSchema(cd.getSchemaName(), solrConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"  /**\n   * Create an IndexSchema object for a core.  It might be a cached lookup.\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    // This is the schema name from the core descriptor.  Sometimes users specify a custom schema file.\n    //   Important:  indexSchemaFactory.create wants this!\n    String cdSchemaName = cd.getSchemaName();\n    // This is the schema name that we think will actually be used.  In the case of a managed schema,\n    //  we don't know for sure without examining what files exists in the configSet, and we don't\n    //  want to pay the overhead of that at this juncture.  If we guess wrong, no schema sharing.\n    //  The fix is usually to name your schema managed-schema instead of schema.xml.\n    IndexSchemaFactory indexSchemaFactory = IndexSchemaFactory.newIndexSchemaFactory(solrConfig);\n\n    String configSet = cd.getConfigSet();\n    if (configSet != null && schemaCache != null) {\n      String guessSchemaName = indexSchemaFactory.getSchemaResourceName(cdSchemaName);\n      Long modVersion = getCurrentSchemaModificationVersion(configSet, solrConfig, guessSchemaName);\n      if (modVersion != null) {\n        // note: luceneMatchVersion influences the schema\n        String cacheKey = configSet + \"/\" + guessSchemaName + \"/\" + modVersion + \"/\" + solrConfig.luceneMatchVersion;\n        return schemaCache.get(cacheKey,\n            (key) -> indexSchemaFactory.create(cdSchemaName, solrConfig));\n      } else {\n        log.warn(\"Unable to get schema modification version, configSet={} schema={}\", configSet, guessSchemaName);\n        // see explanation above; \"guessSchema\" is a guess\n      }\n    }\n\n    return indexSchemaFactory.create(cdSchemaName, solrConfig);\n  }\n\n","sourceOld":"  /**\n   * Create an IndexSchema object for a core.  It might be a cached lookup.\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    // This is the schema name from the core descriptor.  Sometimes users specify a custom schema file.\n    //   Important:  indexSchemaFactory.create wants this!\n    String cdSchemaName = cd.getSchemaName();\n    // This is the schema name that we think will actually be used.  In the case of a managed schema,\n    //  we don't know for sure without examining what files exists in the configSet, and we don't\n    //  want to pay the overhead of that at this juncture.  If we guess wrong, no schema sharing.\n    //  The fix is usually to name your schema managed-schema instead of schema.xml.\n    IndexSchemaFactory indexSchemaFactory = IndexSchemaFactory.newIndexSchemaFactory(solrConfig);\n    String guessSchemaName = indexSchemaFactory.getSchemaResourceName(cdSchemaName);\n\n    String configSet = cd.getConfigSet();\n    if (configSet != null && schemaCache != null) {\n      Long modVersion = getCurrentSchemaModificationVersion(configSet, solrConfig, guessSchemaName);\n      if (modVersion != null) {\n        // note: luceneMatchVersion influences the schema\n        String cacheKey = configSet + \"/\" + guessSchemaName + \"/\" + modVersion + \"/\" + solrConfig.luceneMatchVersion;\n        return schemaCache.get(cacheKey,\n            (key) -> indexSchemaFactory.create(cdSchemaName, solrConfig));\n      } else {\n        log.warn(\"Unable to get schema modification version, configSet={} schema={}\", configSet, guessSchemaName);\n        // see explanation above; \"guessSchema\" is a guess\n      }\n    }\n\n    return indexSchemaFactory.create(cdSchemaName, solrConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#createIndexSchema(CoreDescriptor,SolrConfig).mjava","sourceNew":"  /**\n   * Create an IndexSchema object for a core.  It might be a cached lookup.\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig, boolean forceFetch) {\n    // This is the schema name from the core descriptor.  Sometimes users specify a custom schema file.\n    //   Important:  indexSchemaFactory.create wants this!\n    String cdSchemaName = cd.getSchemaName();\n    // This is the schema name that we think will actually be used.  In the case of a managed schema,\n    //  we don't know for sure without examining what files exists in the configSet, and we don't\n    //  want to pay the overhead of that at this juncture.  If we guess wrong, no schema sharing.\n    //  The fix is usually to name your schema managed-schema instead of schema.xml.\n    IndexSchemaFactory indexSchemaFactory = IndexSchemaFactory.newIndexSchemaFactory(solrConfig);\n\n    String configSet = cd.getConfigSet();\n    if (configSet != null && schemaCache != null) {\n      String guessSchemaName = indexSchemaFactory.getSchemaResourceName(cdSchemaName);\n      Long modVersion = getCurrentSchemaModificationVersion(configSet, solrConfig, guessSchemaName);\n      if (modVersion != null) {\n        // note: luceneMatchVersion influences the schema\n        String cacheKey = configSet + \"/\" + guessSchemaName + \"/\" + modVersion + \"/\" + solrConfig.luceneMatchVersion;\n        if(forceFetch) schemaCache.invalidate(cacheKey);\n        return schemaCache.get(cacheKey,\n            (key) -> indexSchemaFactory.create(cdSchemaName, solrConfig));\n      } else {\n        log.warn(\"Unable to get schema modification version, configSet={} schema={}\", configSet, guessSchemaName);\n        // see explanation above; \"guessSchema\" is a guess\n      }\n    }\n\n    return indexSchemaFactory.create(cdSchemaName, solrConfig);\n  }\n\n","sourceOld":"  /**\n   * Create an IndexSchema object for a core.  It might be a cached lookup.\n   * @param cd the core's CoreDescriptor\n   * @param solrConfig the core's SolrConfig\n   * @return an IndexSchema\n   */\n  protected IndexSchema createIndexSchema(CoreDescriptor cd, SolrConfig solrConfig) {\n    // This is the schema name from the core descriptor.  Sometimes users specify a custom schema file.\n    //   Important:  indexSchemaFactory.create wants this!\n    String cdSchemaName = cd.getSchemaName();\n    // This is the schema name that we think will actually be used.  In the case of a managed schema,\n    //  we don't know for sure without examining what files exists in the configSet, and we don't\n    //  want to pay the overhead of that at this juncture.  If we guess wrong, no schema sharing.\n    //  The fix is usually to name your schema managed-schema instead of schema.xml.\n    IndexSchemaFactory indexSchemaFactory = IndexSchemaFactory.newIndexSchemaFactory(solrConfig);\n\n    String configSet = cd.getConfigSet();\n    if (configSet != null && schemaCache != null) {\n      String guessSchemaName = indexSchemaFactory.getSchemaResourceName(cdSchemaName);\n      Long modVersion = getCurrentSchemaModificationVersion(configSet, solrConfig, guessSchemaName);\n      if (modVersion != null) {\n        // note: luceneMatchVersion influences the schema\n        String cacheKey = configSet + \"/\" + guessSchemaName + \"/\" + modVersion + \"/\" + solrConfig.luceneMatchVersion;\n        return schemaCache.get(cacheKey,\n            (key) -> indexSchemaFactory.create(cdSchemaName, solrConfig));\n      } else {\n        log.warn(\"Unable to get schema modification version, configSet={} schema={}\", configSet, guessSchemaName);\n        // see explanation above; \"guessSchema\" is a guess\n      }\n    }\n\n    return indexSchemaFactory.create(cdSchemaName, solrConfig);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["2d4e985daefcb892b529223b478c47985fc3c483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d4e985daefcb892b529223b478c47985fc3c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d4e985daefcb892b529223b478c47985fc3c483"],"2d4e985daefcb892b529223b478c47985fc3c483":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}