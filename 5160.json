{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","commits":[{"id":"40ad2411c3b1f9d7d8a35803b60a3987ec34e428","date":1233042562,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeltaImportNoRows_MustNotCommit() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_deltaConfig);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      MockDataSource.setIterator(\"select id from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"delta-import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.FALSE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount.get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef6923572a3e084a010d725e158dfc9e8b8a815","date":1255725256,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","sourceNew":"  @Test\n  public void testDeltaImportNoRows_MustNotCommit() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_deltaConfig);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      MockDataSource.setIterator(\"select id from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"delta-import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.FALSE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount.get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeltaImportNoRows_MustNotCommit() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadDataConfig(dc_deltaConfig);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      MockDataSource.setIterator(\"select id from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"delta-import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.FALSE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount.get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder#testDeltaImportNoRows_MustNotCommit().mjava","sourceNew":"  @Test\n  public void testDeltaImportNoRows_MustNotCommit() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_deltaConfig);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      MockDataSource.setIterator(\"select id from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"delta-import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.FALSE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount.get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeltaImportNoRows_MustNotCommit() {\n    try {\n      DataImporter di = new DataImporter();\n      di.loadAndInit(dc_deltaConfig);\n      DataConfig cfg = di.getConfig();\n      DataConfig.Entity ent = cfg.document.entities.get(0);\n      MockDataSource.setIterator(\"select * from x\", new ArrayList().iterator());\n      MockDataSource.setIterator(\"select id from x\", new ArrayList().iterator());\n      ent.dataSrc = new MockDataSource();\n      ent.isDocRoot = true;\n      DataImporter.RequestParams rp = new DataImporter.RequestParams(createMap(\"command\", \"delta-import\"));\n      SolrWriterImpl swi = new SolrWriterImpl();\n      di.runCmd(rp, swi);\n      Assert.assertEquals(Boolean.FALSE, swi.deleteAllCalled);\n      Assert.assertEquals(Boolean.FALSE, swi.commitCalled);\n      Assert.assertEquals(0, swi.docs.size());\n      Assert.assertEquals(1, di.getDocBuilder().importStatistics.queryCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.docCount.get());\n      Assert.assertEquals(0, di.getDocBuilder().importStatistics.rowsCount.get());\n    } finally {\n      MockDataSource.clearCache();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef6923572a3e084a010d725e158dfc9e8b8a815":["40ad2411c3b1f9d7d8a35803b60a3987ec34e428"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"40ad2411c3b1f9d7d8a35803b60a3987ec34e428":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["eef6923572a3e084a010d725e158dfc9e8b8a815"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eef6923572a3e084a010d725e158dfc9e8b8a815":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["40ad2411c3b1f9d7d8a35803b60a3987ec34e428"],"40ad2411c3b1f9d7d8a35803b60a3987ec34e428":["eef6923572a3e084a010d725e158dfc9e8b8a815"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}