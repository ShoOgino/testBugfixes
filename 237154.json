{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","commits":[{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#addSubShardLeaders(DocCollection,String,String,SolrInputDocument,List[Node]).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n            forwardToSubShard = true;\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> addSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc, List<Node> nodes) {\n    Collection<Slice> allSlices = coll.getSlices();\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n            forwardToSubShard = true;\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96adbab674ae121f8b6b3e10474070b4bd97a219","date":1373614333,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n            forwardToSubShard = true;\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n            forwardToSubShard = true;\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc841231667f1f315bae6799c068f9aad6543967","date":1381415189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<Node>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      if (Slice.CONSTRUCTION.equals(aslice.getState()) || Slice.RECOVERY.equals(aslice.getState()))  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","date":1509551229,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f27bd66feacd34399839572de1b2e927d4f367","date":1509582546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  /** For {@link CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffc8d70d9f57a62a24c3dd15b66e353de935054","date":1533178472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), aslice.getName()));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || (docId != null && coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll)))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), shardId));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getSubShardLeaders(DocCollection,String,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  protected List<SolrCmdDistributor.Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<SolrCmdDistributor.Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n                || coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new SolrCmdDistributor.StdNode(nodeProps, coll.getName(), aslice.getName()));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","sourceOld":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private List<Node> getSubShardLeaders(DocCollection coll, String shardId, String docId, SolrInputDocument doc) {\n    Collection<Slice> allSlices = coll.getSlices();\n    List<Node> nodes = null;\n    for (Slice aslice : allSlices) {\n      final Slice.State state = aslice.getState();\n      if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY)  {\n        DocRouter.Range myRange = coll.getSlice(shardId).getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        boolean isSubset = aslice.getRange() != null && aslice.getRange().isSubsetOf(myRange);\n        if (isSubset &&\n            (docId == null // in case of deletes\n            || coll.getRouter().isTargetSlice(docId, doc, req.getParams(), aslice.getName(), coll))) {\n          Replica sliceLeader = aslice.getLeader();\n          // slice leader can be null because node/shard is created zk before leader election\n          if (sliceLeader != null && zkController.getClusterState().liveNodesContain(sliceLeader.getNodeName()))  {\n            if (nodes == null) nodes = new ArrayList<>();\n            ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(sliceLeader);\n            nodes.add(new StdNode(nodeProps, coll.getName(), aslice.getName()));\n          }\n        }\n      }\n    }\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bc841231667f1f315bae6799c068f9aad6543967"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8f1ea787bab5bdb5e72685e55424898da05509b6","96adbab674ae121f8b6b3e10474070b4bd97a219"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c924d4069ef5a5bc479a493befe0121aada6896":["14d5815ecbef89580f5c48990bcd433f04f8563a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"bc841231667f1f315bae6799c068f9aad6543967":["96adbab674ae121f8b6b3e10474070b4bd97a219"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3f27bd66feacd34399839572de1b2e927d4f367":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["c3f27bd66feacd34399839572de1b2e927d4f367"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","0c924d4069ef5a5bc479a493befe0121aada6896"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["37a0f60745e53927c4c876cfe5b5a58170f0646c","96adbab674ae121f8b6b3e10474070b4bd97a219"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["c3f27bd66feacd34399839572de1b2e927d4f367"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"bc841231667f1f315bae6799c068f9aad6543967":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bc841231667f1f315bae6799c068f9aad6543967"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"c3f27bd66feacd34399839572de1b2e927d4f367":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0c924d4069ef5a5bc479a493befe0121aada6896","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}