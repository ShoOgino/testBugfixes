{"path":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","commits":[{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(PREFIX + \"_collection\", null, 1, 3)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 3)\n        .process(solrClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(PREFIX + \"_collection\", null, 1, 3)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 3)\n        .process(solrClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(PREFIX + \"_collection\", null, 1, 3)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 3)\n        .process(solrClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063","date":1519154132,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .process(solrClient);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(PREFIX + \"_collection\", null, 1, 3)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 3)\n        .process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7773108c6761fdc38e074918a2ddc44e1a6e399a","date":1519317830,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb20b0fc832c8504676c4d2fed3548c987adcda8","date":1519819971,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n    waitForRecovery(CollectionAdminParams.SYSTEM_COLL);\n    waitForRecovery(COLL_NAME);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c169037184e9c5f956c272f3980e6aa4b10ee40","date":1543645563,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL, 1, 1);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLL_NAME, 1, 3);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n    waitForRecovery(CollectionAdminParams.SYSTEM_COLL);\n    waitForRecovery(COLL_NAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL, 1, 1);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLL_NAME, 1, 3);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL, 1, 1);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .setMaxShardsPerNode(3)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLL_NAME, 1, 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#setupCluster().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    solrClient = cluster.getSolrClient();\n    // create the system collection and test collection on different nodes, to avoid\n    // any interference from .system replicas being moved around.\n    systemCollNode = cluster.getJettySolrRunner(0).getNodeName();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .setCreateNodeSet(systemCollNode)\n        .process(solrClient);\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL, 1, 1);\n    Set<String> otherNodes = cluster.getJettySolrRunners().stream().map(JettySolrRunner::getNodeName)\n        .collect(Collectors.toSet());\n    otherNodes.remove(systemCollNode);\n    CollectionAdminRequest.createCollection(COLL_NAME, null, 1, 3)\n        .setCreateNodeSet(String.join(\",\", otherNodes))\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLL_NAME, 1, 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7773108c6761fdc38e074918a2ddc44e1a6e399a":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"0c169037184e9c5f956c272f3980e6aa4b10ee40":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["7773108c6761fdc38e074918a2ddc44e1a6e399a"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0c169037184e9c5f956c272f3980e6aa4b10ee40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","3301c97f51316f9c9937654c07d7a6a21e7aecb8","560c18d71dad43d675158783c3840f8c80d6d39c"],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["7773108c6761fdc38e074918a2ddc44e1a6e399a"],"7773108c6761fdc38e074918a2ddc44e1a6e399a":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"0c169037184e9c5f956c272f3980e6aa4b10ee40":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["0c169037184e9c5f956c272f3980e6aa4b10ee40"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}