{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","commits":[{"id":"363efd5f833e8e194f8c9b8a3199eca1bc684c38","date":1435941197,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","sourceNew":"  /** Returns the topological sort of all states.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions). */\n  public static int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n\n    return states;\n  }\n\n","sourceOld":"  private int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b60e3f947fc4f9e2fd81e1929a6809327ff537","date":1435953804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","sourceNew":"  /** Returns the topological sort of all states reachable from\n   *  the initial state.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions),\n   *  and the implementation is recursive so an automaton\n   *  matching long strings may exhaust the java stack. */\n  public static int[] topoSortStates(Automaton a) {\n    if (a.getNumStates() == 0) {\n      return new int[0];\n    }\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    int upto = topoSortStatesRecurse(a, visited, states, 0, 0);\n\n    if (upto < states.length) {\n      // There were dead states\n      int[] newStates = new int[upto];\n      System.arraycopy(states, 0, newStates, 0, upto);\n      states = newStates;\n    }\n\n    // Reverse the order:\n    for(int i=0;i<states.length/2;i++) {\n      int s = states[i];\n      states[i] = states[states.length-1-i];\n      states[states.length-1-i] = s;\n    }\n\n    return states;\n  }\n\n","sourceOld":"  /** Returns the topological sort of all states.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions). */\n  public static int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54297202372099824b9eb2d6897335b221455496","date":1501840968,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","sourceNew":"  /** Returns the topological sort of all states reachable from\n   *  the initial state.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions),\n   *  and the implementation is recursive so an automaton\n   *  matching long strings may exhaust the java stack. */\n  public static int[] topoSortStates(Automaton a) {\n    if (a.getNumStates() == 0) {\n      return new int[0];\n    }\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    int upto = topoSortStatesRecurse(a, visited, states, 0, 0, 0);\n\n    if (upto < states.length) {\n      // There were dead states\n      int[] newStates = new int[upto];\n      System.arraycopy(states, 0, newStates, 0, upto);\n      states = newStates;\n    }\n\n    // Reverse the order:\n    for(int i=0;i<states.length/2;i++) {\n      int s = states[i];\n      states[i] = states[states.length-1-i];\n      states[states.length-1-i] = s;\n    }\n\n    return states;\n  }\n\n","sourceOld":"  /** Returns the topological sort of all states reachable from\n   *  the initial state.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions),\n   *  and the implementation is recursive so an automaton\n   *  matching long strings may exhaust the java stack. */\n  public static int[] topoSortStates(Automaton a) {\n    if (a.getNumStates() == 0) {\n      return new int[0];\n    }\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    int upto = topoSortStatesRecurse(a, visited, states, 0, 0);\n\n    if (upto < states.length) {\n      // There were dead states\n      int[] newStates = new int[upto];\n      System.arraycopy(states, 0, newStates, 0, upto);\n      states = newStates;\n    }\n\n    // Reverse the order:\n    for(int i=0;i<states.length/2;i++) {\n      int s = states[i];\n      states[i] = states[states.length-1-i];\n      states[states.length-1-i] = s;\n    }\n\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","sourceNew":"  /** Returns the topological sort of all states reachable from\n   *  the initial state.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions),\n   *  and the implementation is recursive so an automaton\n   *  matching long strings may exhaust the java stack. */\n  public static int[] topoSortStates(Automaton a) {\n    if (a.getNumStates() == 0) {\n      return new int[0];\n    }\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    int upto = topoSortStatesRecurse(a, visited, states, 0, 0, 0);\n\n    if (upto < states.length) {\n      // There were dead states\n      int[] newStates = new int[upto];\n      System.arraycopy(states, 0, newStates, 0, upto);\n      states = newStates;\n    }\n\n    // Reverse the order:\n    for(int i=0;i<states.length/2;i++) {\n      int s = states[i];\n      states[i] = states[states.length-1-i];\n      states[states.length-1-i] = s;\n    }\n\n    return states;\n  }\n\n","sourceOld":"  /** Returns the topological sort of all states reachable from\n   *  the initial state.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions),\n   *  and the implementation is recursive so an automaton\n   *  matching long strings may exhaust the java stack. */\n  public static int[] topoSortStates(Automaton a) {\n    if (a.getNumStates() == 0) {\n      return new int[0];\n    }\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    int upto = topoSortStatesRecurse(a, visited, states, 0, 0);\n\n    if (upto < states.length) {\n      // There were dead states\n      int[] newStates = new int[upto];\n      System.arraycopy(states, 0, newStates, 0, upto);\n      states = newStates;\n    }\n\n    // Reverse the order:\n    for(int i=0;i<states.length/2;i++) {\n      int s = states[i];\n      states[i] = states[states.length-1-i];\n      states[states.length-1-i] = s;\n    }\n\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"],"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["13b60e3f947fc4f9e2fd81e1929a6809327ff537","54297202372099824b9eb2d6897335b221455496"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54297202372099824b9eb2d6897335b221455496":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54297202372099824b9eb2d6897335b221455496"]},"commit2Childs":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54297202372099824b9eb2d6897335b221455496"],"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"],"54297202372099824b9eb2d6897335b221455496":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}