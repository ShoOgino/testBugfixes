{"path":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"9140d3568539d7cd892885f2979289c780ba93c8","date":1458041347,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param cmd the update command in input conaining the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input conaining the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input conaining the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input conaining the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(trainingClassField);\n    if (documentClass == null) {\n      List<ClassificationResult<BytesRef>> assignedClassifications = classifier.getClasses(luceneDocument, maxOutputClasses);\n      if (assignedClassifications != null) {\n        for (ClassificationResult<BytesRef> singleClassification : assignedClassifications) {\n          assignedClass = singleClassification.getAssignedClass().utf8ToString();\n          doc.addField(predictedClassField, assignedClass);\n        }\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(trainingClassField);\n    if (documentClass == null) {\n      List<ClassificationResult<BytesRef>> assignedClassifications = classifier.getClasses(luceneDocument, maxOutputClasses);\n      if (assignedClassifications != null) {\n        for (ClassificationResult<BytesRef> singleClassification : assignedClassifications) {\n          assignedClass = singleClassification.getAssignedClass().utf8ToString();\n          doc.addField(predictedClassField, assignedClass);\n        }\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(trainingClassField);\n    if (documentClass == null) {\n      List<ClassificationResult<BytesRef>> assignedClassifications = classifier.getClasses(luceneDocument, maxOutputClasses);\n      if (assignedClassifications != null) {\n        for (ClassificationResult<BytesRef> singleClassification : assignedClassifications) {\n          assignedClass = singleClassification.getAssignedClass().utf8ToString();\n          doc.addField(predictedClassField, assignedClass);\n        }\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  /**\n   * @param cmd the update command in input containing the Document to classify\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Override\n  public void processAdd(AddUpdateCommand cmd)\n      throws IOException {\n    SolrInputDocument doc = cmd.getSolrInputDocument();\n    Document luceneDocument = cmd.getLuceneDocument();\n    String assignedClass;\n    Object documentClass = doc.getFieldValue(classFieldName);\n    if (documentClass == null) {\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(luceneDocument);\n      if (classificationResult != null) {\n        assignedClass = classificationResult.getAssignedClass().utf8ToString();\n        doc.addField(classFieldName, assignedClass);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9140d3568539d7cd892885f2979289c780ba93c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["d470c8182e92b264680e34081b75e70a9f2b3c89","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9140d3568539d7cd892885f2979289c780ba93c8","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9140d3568539d7cd892885f2979289c780ba93c8","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["9140d3568539d7cd892885f2979289c780ba93c8"]},"commit2Childs":{"9140d3568539d7cd892885f2979289c780ba93c8":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9140d3568539d7cd892885f2979289c780ba93c8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","75babd1dfc2521603bfeb0968042e921d8c6c652","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}