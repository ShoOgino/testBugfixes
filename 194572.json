{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobRead#getApis().mjava","commits":[{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobRead#getApis().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Collection<Api> getApis() {\n      return Collections.singleton(new Api(Utils.getSpec(\"node.blob.GET\")) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String sha256 = ((V2HttpCall) req.getHttpSolrCall()).getUrlParts().get(\"sha256\");\n          if (sha256 == null) {\n            rsp.add(\"blob\", getFiles());\n          } else {\n            try {\n              ByteBuffer buf = getFromLocalFs(sha256);\n              if(buf == null){\n                throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such blob\");\n              } else {\n                ModifiableSolrParams solrParams = new ModifiableSolrParams();\n                solrParams.add(CommonParams.WT, FILE_STREAM);\n                req.setParams( SolrParams.wrapDefaults(solrParams, req.getParams()));\n                rsp.add(FILE_STREAM, (SolrCore.RawWriter) os -> os.write(buf.array(), buf.arrayOffset(), buf.limit()));\n              }\n\n            } catch (IOException e) {\n              throw new SolrException(SERVER_ERROR,e);\n            }\n          }\n\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobRead#getApis().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Collection<Api> getApis() {\n      return Collections.singleton(new Api(Utils.getSpec(\"node.blob.GET\")) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String sha256 = ((V2HttpCall) req.getHttpSolrCall()).getUrlParts().get(\"sha256\");\n          if (sha256 == null) {\n            rsp.add(\"blob\", getFiles());\n          } else {\n            try {\n              ByteBuffer buf = getFromLocalFs(sha256);\n              if(buf == null){\n                throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such blob\");\n              } else {\n                ModifiableSolrParams solrParams = new ModifiableSolrParams();\n                solrParams.add(CommonParams.WT, FILE_STREAM);\n                req.setParams( SolrParams.wrapDefaults(solrParams, req.getParams()));\n                rsp.add(FILE_STREAM, (SolrCore.RawWriter) os -> os.write(buf.array(), buf.arrayOffset(), buf.limit()));\n              }\n\n            } catch (IOException e) {\n              throw new SolrException(SERVER_ERROR,e);\n            }\n          }\n\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository.BlobRead#getApis().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Collection<Api> getApis() {\n      return Collections.singleton(new Api(Utils.getSpec(\"node.blob.GET\")) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String sha256 = ((V2HttpCall) req.getHttpSolrCall()).getUrlParts().get(\"sha256\");\n          if (sha256 == null) {\n            rsp.add(\"blob\", getFiles());\n          } else {\n            try {\n              ByteBuffer buf = getFromLocalFs(sha256);\n              if(buf == null){\n                throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such blob\");\n              } else {\n                ModifiableSolrParams solrParams = new ModifiableSolrParams();\n                solrParams.add(CommonParams.WT, FILE_STREAM);\n                req.setParams( SolrParams.wrapDefaults(solrParams, req.getParams()));\n                rsp.add(FILE_STREAM, (SolrCore.RawWriter) os -> os.write(buf.array(), buf.arrayOffset(), buf.limit()));\n              }\n\n            } catch (IOException e) {\n              throw new SolrException(SERVER_ERROR,e);\n            }\n          }\n\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}