{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    \n    if (maxWordCount < DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    \n    if (termBufferLength < maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int termBufferLength = termAtt.length();\n    char[] backup = null;\n    \n    if (maxWordCount < DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    \n    if (termBufferLength < maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > maxWordCount) {\n        termAtt.copyBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}