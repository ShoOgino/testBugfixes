{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testOffsetReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testOffsetReader().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testOffsetReader().mjava","sourceNew":"  public void testOffsetReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testOffsetReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#testOffsetReader().mjava","sourceNew":null,"sourceOld":"  public void testOffsetReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    String[] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}