{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","commits":[{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e85ecff3137b73bf5d618c381c368a2c5e84858f","date":1566336543,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b91012493e4750b9dc169cf1ae8cdd91493b42","date":1569935879,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73e9c1914a76cfa16576e9d7165e286cc35c36e","date":1593099382,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThreshold\", memoryCircuitBreakerThreshold);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c24f8f07a3e4a885c0e19286d51575df197a611b","date":1593281672,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThreshold\", memoryCircuitBreakerThreshold);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef8e4fae9bcd156a117f5758819aeabdae3e963","date":1593674028,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memoryCircuitBreakerThresholdPct);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memoryCircuitBreakerThresholdPct);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memoryCircuitBreakerThresholdPct);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"cpuCircuitBreakerEnabled\", cpuCBEnabled);\n    m.put(\"memoryCircuitBreakerEnabled\", memCBEnabled);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memCBThreshold);\n    m.put(\"cpuCircuitBreakerThreshold\", cpuCBThreshold);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memoryCircuitBreakerThresholdPct);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef286034ca1be064a363aaec38e34e64a59154c","date":1598517382,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    m.put(\"useCircuitBreakers\", useCircuitBreakers);\n    m.put(\"cpuCircuitBreakerEnabled\", cpuCBEnabled);\n    m.put(\"memoryCircuitBreakerEnabled\", memCBEnabled);\n    m.put(\"memoryCircuitBreakerThresholdPct\", memCBThreshold);\n    m.put(\"cpuCircuitBreakerThreshold\", cpuCBThreshold);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b0cd5829a0e3199112abe5b3a9026c15584748","date":1598689121,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    if(luceneMatchVersion != null) result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion.toString());\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(IndexSchema.LUCENE_MATCH_VERSION_PARAM, luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) {\n          //TODO remove after fixing https://issues.apache.org/jira/browse/SOLR-13706\n          if (info.type.equals(\"searchComponent\") && info.name.equals(\"highlight\")) continue;\n          items.put(info.name, info);\n        }\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ef286034ca1be064a363aaec38e34e64a59154c":["a761febaf4b3c09d4490395eb90617263016fc2a"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"1f1f31880696765d6aec499d3b01fa501129af45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b73e9c1914a76cfa16576e9d7165e286cc35c36e":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"e85ecff3137b73bf5d618c381c368a2c5e84858f":["816521ebaad5add9cb96bb88c577394e2938c40b"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["c24f8f07a3e4a885c0e19286d51575df197a611b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a761febaf4b3c09d4490395eb90617263016fc2a":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"c24f8f07a3e4a885c0e19286d51575df197a611b":["b73e9c1914a76cfa16576e9d7165e286cc35c36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f1f31880696765d6aec499d3b01fa501129af45"],"f2b0cd5829a0e3199112abe5b3a9026c15584748":["0ef286034ca1be064a363aaec38e34e64a59154c"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["e85ecff3137b73bf5d618c381c368a2c5e84858f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b0cd5829a0e3199112abe5b3a9026c15584748"],"b0b597c65628ca9e73913a07e81691f8229bae35":["e85ecff3137b73bf5d618c381c368a2c5e84858f","73b91012493e4750b9dc169cf1ae8cdd91493b42"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0ef286034ca1be064a363aaec38e34e64a59154c":["f2b0cd5829a0e3199112abe5b3a9026c15584748"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["a761febaf4b3c09d4490395eb90617263016fc2a"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["b73e9c1914a76cfa16576e9d7165e286cc35c36e"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b73e9c1914a76cfa16576e9d7165e286cc35c36e":["c24f8f07a3e4a885c0e19286d51575df197a611b"],"e85ecff3137b73bf5d618c381c368a2c5e84858f":["73b91012493e4750b9dc169cf1ae8cdd91493b42","b0b597c65628ca9e73913a07e81691f8229bae35"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e85ecff3137b73bf5d618c381c368a2c5e84858f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a761febaf4b3c09d4490395eb90617263016fc2a":["0ef286034ca1be064a363aaec38e34e64a59154c"],"c24f8f07a3e4a885c0e19286d51575df197a611b":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f2b0cd5829a0e3199112abe5b3a9026c15584748":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["75237075d8425856bf4bbf52a6be4f9162b8187d","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}