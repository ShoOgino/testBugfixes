{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","commits":[{"id":"f1f60cafc4f1179da2c866dd61207060117456e8","date":1454946102,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    try {\n      leafCollector.collect(1);\n      fail();\n    } catch (CollectionTerminatedException e) {\n      // expected\n    }\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    try {\n      leafCollector.collect(1);\n      fail();\n    } catch (CollectionTerminatedException e) {\n      // expected\n    }\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","bugFix":["f1f60cafc4f1179da2c866dd61207060117456e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff113a9993e8c54238f321fd07b74e8b28913b85","date":1531207054,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n\n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n\n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n\n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n    \n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testSetScorerAfterCollectionTerminated().mjava","sourceNew":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n\n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorable scorer = new ScoreAndDoc();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","sourceOld":"  public void testSetScorerAfterCollectionTerminated() throws IOException {\n    Collector collector1 = new TotalHitCountCollector();\n    Collector collector2 = new TotalHitCountCollector();\n\n    AtomicBoolean setScorerCalled1 = new AtomicBoolean();\n    collector1 = new SetScorerCollector(collector1, setScorerCalled1);\n\n    AtomicBoolean setScorerCalled2 = new AtomicBoolean();\n    collector2 = new SetScorerCollector(collector2, setScorerCalled2);\n\n    collector1 = new TerminateAfterCollector(collector1, 1);\n    collector2 = new TerminateAfterCollector(collector2, 2);\n\n    Scorer scorer = new FakeScorer();\n\n    List<Collector> collectors = Arrays.asList(collector1, collector2);\n    Collections.shuffle(collectors, random());\n    Collector collector = MultiCollector.wrap(collectors);\n\n    LeafCollector leafCollector = collector.getLeafCollector(null);\n    leafCollector.setScorer(scorer);\n    assertTrue(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    leafCollector.collect(0);\n    leafCollector.collect(1);\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertTrue(setScorerCalled2.get());\n\n    expectThrows(CollectionTerminatedException.class, () -> {\n      leafCollector.collect(1);\n    });\n\n    setScorerCalled1.set(false);\n    setScorerCalled2.set(false);\n    leafCollector.setScorer(scorer);\n    assertFalse(setScorerCalled1.get());\n    assertFalse(setScorerCalled2.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["05fe562aa248790944d43cdd478f512572835ba0","ff113a9993e8c54238f321fd07b74e8b28913b85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["ff113a9993e8c54238f321fd07b74e8b28913b85"],"05fe562aa248790944d43cdd478f512572835ba0":["f1f60cafc4f1179da2c866dd61207060117456e8"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["05fe562aa248790944d43cdd478f512572835ba0"],"f1f60cafc4f1179da2c866dd61207060117456e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["05fe562aa248790944d43cdd478f512572835ba0","ff113a9993e8c54238f321fd07b74e8b28913b85"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1f60cafc4f1179da2c866dd61207060117456e8"],"05fe562aa248790944d43cdd478f512572835ba0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ff113a9993e8c54238f321fd07b74e8b28913b85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f1f60cafc4f1179da2c866dd61207060117456e8":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}