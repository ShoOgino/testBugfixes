{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340c74377cb6e5e48360c014b3fc076221746443","date":1476809457,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad214b6ec1400de3c40b6c120126abe89d51a9ce","date":1476818670,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LegacyNumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestDirectPacked#testSimple().mjava","sourceNew":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    LongValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** simple encode/decode */\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    int bitsPerValue = DirectWriter.bitsRequired(2);\n    IndexOutput output = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    DirectWriter writer = DirectWriter.getInstance(output, 5, bitsPerValue);\n    writer.add(1);\n    writer.add(0);\n    writer.add(2);\n    writer.add(1);\n    writer.add(2);\n    writer.finish();\n    output.close();\n    IndexInput input = dir.openInput(\"foo\", IOContext.DEFAULT);\n    NumericDocValues reader = DirectReader.getInstance(input.randomAccessSlice(0, input.length()), bitsPerValue, 0);\n    assertEquals(1, reader.get(0));\n    assertEquals(0, reader.get(1));\n    assertEquals(2, reader.get(2));\n    assertEquals(1, reader.get(3));\n    assertEquals(2, reader.get(4));\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","340c74377cb6e5e48360c014b3fc076221746443"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"340c74377cb6e5e48360c014b3fc076221746443":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a870f9917149dc600c4ad4417d615c1795de5864":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"]},"commit2Childs":{"ad214b6ec1400de3c40b6c120126abe89d51a9ce":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad214b6ec1400de3c40b6c120126abe89d51a9ce","340c74377cb6e5e48360c014b3fc076221746443"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a870f9917149dc600c4ad4417d615c1795de5864"],"340c74377cb6e5e48360c014b3fc076221746443":["ad214b6ec1400de3c40b6c120126abe89d51a9ce"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}