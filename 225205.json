{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","commits":[{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers().mjava","sourceNew":"  public static void endTrackingSearchers(int waitSeconds, boolean failTest) {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > waitSeconds) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         if (failTest) fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers() {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > 120) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","sourceNew":"  public static void endTrackingSearchers(int waitSeconds, boolean failTest) {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > waitSeconds) {\n         break;\n       }\n       if (retries % 10 == 0) {\n         log.info(\"Waiting for all SolrIndexSearchers to be released at end of test\");\n        if (retries > 10) {\n          TraceFormatting tf = new TraceFormatting();\n          Map<Thread,StackTraceElement[]> stacksMap = Thread.getAllStackTraces();\n          Set<Entry<Thread,StackTraceElement[]>> entries = stacksMap.entrySet();\n          for (Entry<Thread,StackTraceElement[]> entry : entries) {\n            String stack = tf.formatStackTrace(entry.getValue());\n            System.err.println(entry.getKey().getName() + \":\\n\" + stack);\n          }\n        }\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     log.info(\"------------------------------------------------------- Done waiting for all SolrIndexSearchers to be released\");\n     \n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         if (failTest) fail(msg);\n       }\n     }\n  }\n\n","sourceOld":"  public static void endTrackingSearchers(int waitSeconds, boolean failTest) {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > waitSeconds) {\n         break;\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         if (failTest) fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed2d3cbea990a1cd6c54a591a294f629964b01be","date":1488991463,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#endTrackingSearchers(int,boolean).mjava","sourceNew":null,"sourceOld":"  public static void endTrackingSearchers(int waitSeconds, boolean failTest) {\n     long endNumOpens = SolrIndexSearcher.numOpens.get();\n     long endNumCloses = SolrIndexSearcher.numCloses.get();\n\n     // wait a bit in case any ending threads have anything to release\n     int retries = 0;\n     while (endNumOpens - numOpens != endNumCloses - numCloses) {\n       if (retries++ > waitSeconds) {\n         break;\n       }\n       if (retries % 10 == 0) {\n         log.info(\"Waiting for all SolrIndexSearchers to be released at end of test\");\n        if (retries > 10) {\n          TraceFormatting tf = new TraceFormatting();\n          Map<Thread,StackTraceElement[]> stacksMap = Thread.getAllStackTraces();\n          Set<Entry<Thread,StackTraceElement[]>> entries = stacksMap.entrySet();\n          for (Entry<Thread,StackTraceElement[]> entry : entries) {\n            String stack = tf.formatStackTrace(entry.getValue());\n            System.err.println(entry.getKey().getName() + \":\\n\" + stack);\n          }\n        }\n       }\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {}\n       endNumOpens = SolrIndexSearcher.numOpens.get();\n       endNumCloses = SolrIndexSearcher.numCloses.get();\n     }\n\n     log.info(\"------------------------------------------------------- Done waiting for all SolrIndexSearchers to be released\");\n     \n     SolrIndexSearcher.numOpens.getAndSet(0);\n     SolrIndexSearcher.numCloses.getAndSet(0);\n\n     if (endNumOpens-numOpens != endNumCloses-numCloses) {\n       String msg = \"ERROR: SolrIndexSearcher opens=\" + (endNumOpens-numOpens) + \" closes=\" + (endNumCloses-numCloses);\n       log.error(msg);\n       // if it's TestReplicationHandler, ignore it. the test is broken and gets no love\n       if (\"TestReplicationHandler\".equals(RandomizedContext.current().getTargetClass().getSimpleName())) {\n         log.warn(\"TestReplicationHandler wants to fail!: \" + msg);\n       } else {\n         if (failTest) fail(msg);\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["536b47681314488eb94706248be6047a3f142841"],"ed2d3cbea990a1cd6c54a591a294f629964b01be":["ad28156288ac00b91352582904d97e6653205757"],"536b47681314488eb94706248be6047a3f142841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed2d3cbea990a1cd6c54a591a294f629964b01be"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["ed2d3cbea990a1cd6c54a591a294f629964b01be"],"536b47681314488eb94706248be6047a3f142841":["ad28156288ac00b91352582904d97e6653205757"],"ed2d3cbea990a1cd6c54a591a294f629964b01be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536b47681314488eb94706248be6047a3f142841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}