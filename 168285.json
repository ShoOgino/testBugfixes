{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e8768e9769f9e5175b1d99dcd27600bc9d4374","date":1342373687,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n    addItem();\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n    addItem();\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#getNextDocData(DocData).mjava","sourceNew":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n    addItem();\n\n    return docData;\n  }\n\n","sourceOld":"  @Override\n  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {\n    String name = null;\n    StringBuilder docBuf = getDocBuffer();\n    ParsePathType parsedPathType;\n    \n    // protect reading from the TREC files by multiple threads. The rest of the\n    // method, i.e., parsing the content and returning the DocData can run unprotected.\n    synchronized (lock) {\n      if (reader == null) {\n        openNextFile();\n      }\n      \n      // 1. skip until doc start - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOC, false, false);\n      \n      // save parsedFile for passing trecDataParser after the sync block, in \n      // case another thread will open another file in between.\n      parsedPathType = currPathType;\n      \n      // 2. name - required for all TREC formats\n      docBuf.setLength(0);\n      read(docBuf, DOCNO, true, false);\n      name = docBuf.substring(DOCNO.length(), docBuf.indexOf(TERMINATING_DOCNO,\n          DOCNO.length())).trim();\n      \n      if (!excludeDocnameIteration) {\n        name = name + \"_\" + iteration;\n      }\n\n      // 3. read all until end of doc\n      docBuf.setLength(0);\n      read(docBuf, TERMINATING_DOC, false, true);\n    }\n      \n    // count char length of text to be parsed (may be larger than the resulted plain doc body text).\n    addBytes(docBuf.length()); \n\n    // This code segment relies on HtmlParser being thread safe. When we get \n    // here, everything else is already private to that thread, so we're safe.\n    try {\n      docData = trecDocParser.parse(docData, name, this, docBuf, parsedPathType);\n      addItem();\n    } catch (InterruptedException ie) {\n      throw new ThreadInterruptedException(ie);\n    }\n\n    return docData;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e8768e9769f9e5175b1d99dcd27600bc9d4374"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","91e8768e9769f9e5175b1d99dcd27600bc9d4374","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}