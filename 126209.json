{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","pathOld":"/dev/null","sourceNew":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      }\n      else\n        for (Token token = input.next(); token != null; token = input.next())\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          }\n          else if (!token.termText().equals(\"stop\"))\n            return token;\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","sourceNew":"\tpublic Token next() throws IOException {\n\t    if (inPhrase) {\n\t\tinPhrase = false;\n\t\treturn new Token(\"phrase2\", savedStart, savedEnd);\n\t    }\n\t    else\n\t\tfor (Token token = input.next(); token != null; token = input.next()) {\n\t\t    if (token.termText().equals(\"phrase\")) {\n\t\t\tinPhrase = true;\n\t\t\tsavedStart = token.startOffset();\n\t\t\tsavedEnd = token.endOffset();\n\t\t\treturn new Token(\"phrase1\", savedStart, savedEnd);\n\t\t    }\n\t\t    else if (!token.termText().equals(\"stop\"))\n\t\t\treturn token;\n\t\t}\n\t    return null;\n\t}\n\n","sourceOld":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      }\n      else\n        for (Token token = input.next(); token != null; token = input.next())\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          }\n          else if (!token.termText().equals(\"stop\"))\n            return token;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","sourceNew":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token token = input.next(); token != null; token = input.next()) {\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          } else if (!token.termText().equals(\"stop\"))\n            return token;\n        }\n      return null;\n    }\n\n","sourceOld":"\tpublic Token next() throws IOException {\n\t    if (inPhrase) {\n\t\tinPhrase = false;\n\t\treturn new Token(\"phrase2\", savedStart, savedEnd);\n\t    }\n\t    else\n\t\tfor (Token token = input.next(); token != null; token = input.next()) {\n\t\t    if (token.termText().equals(\"phrase\")) {\n\t\t\tinPhrase = true;\n\t\t\tsavedStart = token.startOffset();\n\t\t\tsavedEnd = token.endOffset();\n\t\t\treturn new Token(\"phrase1\", savedStart, savedEnd);\n\t\t    }\n\t\t    else if (!token.termText().equals(\"stop\"))\n\t\t\treturn token;\n\t\t}\n\t    return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next().mjava","sourceNew":null,"sourceOld":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token token = input.next(); token != null; token = input.next()) {\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          } else if (!token.termText().equals(\"stop\"))\n            return token;\n        }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}