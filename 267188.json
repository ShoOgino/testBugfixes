{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40dcf585f281c731bd0a97da2f92a720802c80e","date":1319743848,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["d1d45f506004b0206f0f82c53160c379cf6ab2da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.logOnce(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1d45f506004b0206f0f82c53160c379cf6ab2da","date":1328129718,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          defaultResponseWriter = writer;\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered ignoring: \" + old.getClass().getName());\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":["d40dcf585f281c731bd0a97da2f92a720802c80e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4887c5c418866929f0db7419c3c766cbcf99fb92","date":1329217123,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    NamedList emptyList = new NamedList();\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) {\n        responseWriters.put(entry.getKey(), entry.getValue());\n        // call init so any logic in the default writers gets invoked\n        entry.getValue().init(emptyList);\n      }\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    NamedList emptyList = new NamedList();\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) {\n        responseWriters.put(entry.getKey(), entry.getValue());\n        // call init so any logic in the default writers gets invoked\n        entry.getValue().init(emptyList);\n      }\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<PluginInfo,QueryResponseWriter>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    NamedList emptyList = new NamedList();\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) {\n        responseWriters.put(entry.getKey(), entry.getValue());\n        // call init so any logic in the default writers gets invoked\n        entry.getValue().init(emptyList);\n      }\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    responseWriters.init(DEFAULT_RESPONSE_WRITERS, this);\n    // configure the default response writer; this one should never be null\n    if (responseWriters.getDefault() == null) responseWriters.setDefault(\"standard\");\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    NamedList emptyList = new NamedList();\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) {\n        responseWriters.put(entry.getKey(), entry.getValue());\n        // call init so any logic in the default writers gets invoked\n        entry.getValue().init(emptyList);\n      }\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    responseWriters.init(DEFAULT_RESPONSE_WRITERS, this);\n    // configure the default response writer; this one should never be null\n    if (responseWriters.getDefault() == null) responseWriters.setDefault(\"standard\");\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    // use link map so we iterate in the same order\n    Map<PluginInfo,QueryResponseWriter> writers = new LinkedHashMap<>();\n    for (PluginInfo info : solrConfig.getPluginInfos(QueryResponseWriter.class.getName())) {\n      try {\n        QueryResponseWriter writer;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy queryResponseWriter: \" + info.className);\n            writer = new LazyQueryResponseWriterWrapper(this, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          writer = createQueryResponseWriter(info.className);\n        }\n        writers.put(info,writer);\n        QueryResponseWriter old = registerResponseWriter(info.name, writer);\n        if(old != null) {\n          log.warn(\"Multiple queryResponseWriter registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          if(defaultResponseWriter != null)\n            log.warn(\"Multiple default queryResponseWriter registered, using: \" + info.name);\n          defaultResponseWriter = writer;\n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          SolrException e = new SolrException\n            (SolrException.ErrorCode.SERVER_ERROR, \"QueryResponseWriter init failure\", ex);\n          SolrException.log(log,null,e);\n          throw e;\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,QueryResponseWriter> entry : writers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      QueryResponseWriter writer = entry.getValue();\n      responseWriters.put(info.name, writer);\n      if (writer instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) writer).init(info);\n      } else{\n        writer.init(info.initArgs);\n      }\n    }\n\n    NamedList emptyList = new NamedList();\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) {\n        responseWriters.put(entry.getKey(), entry.getValue());\n        // call init so any logic in the default writers gets invoked\n        entry.getValue().init(emptyList);\n      }\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /**\n   * Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured.\n   */\n  private void initWriters() {\n    responseWriters.init(DEFAULT_RESPONSE_WRITERS, this);\n    // configure the default response writer; this one should never be null\n    if (responseWriters.getDefault() == null) responseWriters.setDefault(\"standard\");\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    responseWriters.init(DEFAULT_RESPONSE_WRITERS, this);\n    // configure the default response writer; this one should never be null\n    if (responseWriters.getDefault() == null) responseWriters.setDefault(\"standard\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4887c5c418866929f0db7419c3c766cbcf99fb92"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d40dcf585f281c731bd0a97da2f92a720802c80e":["c26f00b574427b55127e869b935845554afde1fa"],"4887c5c418866929f0db7419c3c766cbcf99fb92":["d1d45f506004b0206f0f82c53160c379cf6ab2da"],"d1d45f506004b0206f0f82c53160c379cf6ab2da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9aea0485ecacb6734c17da2d02569816c23a69c1"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["d40dcf585f281c731bd0a97da2f92a720802c80e"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"c26f00b574427b55127e869b935845554afde1fa":["d40dcf585f281c731bd0a97da2f92a720802c80e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d40dcf585f281c731bd0a97da2f92a720802c80e":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"4887c5c418866929f0db7419c3c766cbcf99fb92":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d1d45f506004b0206f0f82c53160c379cf6ab2da":["4887c5c418866929f0db7419c3c766cbcf99fb92"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d1d45f506004b0206f0f82c53160c379cf6ab2da","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}