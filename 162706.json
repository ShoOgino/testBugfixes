{"path":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["77e6111c8c695bcab271a048bf5aae6b05cf415b","77e6111c8c695bcab271a048bf5aae6b05cf415b","77e6111c8c695bcab271a048bf5aae6b05cf415b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","pathOld":"src/java/org/apache/solr/handler/FieldAnalysisRequestHandler#analyzeValues(FieldAnalysisRequest,FieldType,String).mjava","sourceNew":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the index value (if it exists) and the query value (if it exists) in the given AnalysisRequest, using\n   * the Analyzers of the given field type.\n   *\n   * @param analysisRequest AnalysisRequest from where the index and query values will be taken\n   * @param fieldType       Type of field whose analyzers will be used\n   * @param fieldName       Name of the field to be analyzed.  Can be {@code null}\n   *\n   * @return NamedList containing the tokens produced by the analyzers of the given field, separated into an index and\n   *         a query group\n   */\n  private NamedList<NamedList> analyzeValues(FieldAnalysisRequest analysisRequest, FieldType fieldType, String fieldName) {\n\n    Set<String> termsToMatch = new HashSet<String>();\n    String queryValue = analysisRequest.getQuery();\n    if (queryValue != null && analysisRequest.isShowMatch()) {\n      List<Token> tokens = analyzeValue(queryValue, fieldType.getQueryAnalyzer());\n      for (Token token : tokens) {\n        termsToMatch.add(token.term());\n      }\n    }\n\n    NamedList<NamedList> analyzeResults = new SimpleOrderedMap<NamedList>();\n    if (analysisRequest.getFieldValue() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getAnalyzer(), termsToMatch);\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getFieldValue(), context);\n      analyzeResults.add(\"index\", analyzedTokens);\n    }\n    if (analysisRequest.getQuery() != null) {\n      AnalysisContext context = new AnalysisContext(fieldName, fieldType, fieldType.getQueryAnalyzer());\n      NamedList analyzedTokens = analyzeValue(analysisRequest.getQuery(), context);\n      analyzeResults.add(\"query\", analyzedTokens);\n    }\n\n    return analyzeResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}