{"path":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long version = delegate.getVersion();\n      Long reserve = reserves.get(version);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(version)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.currentTimeMillis() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if (savedCommits.containsKey(gen)) return;\n      if (snapshotMgr.isSnapshotted(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if (savedCommits.containsKey(gen)) return;\n      if (snapshotMgr.isSnapshotted(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if (savedCommits.containsKey(gen)) return;\n      if (snapshotMgr.isSnapshotted(gen)) return;\n      delegate.delete();\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if(savedCommits.containsKey(gen)) return;\n      delegate.delete();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.IndexCommitWrapper#delete().mjava","sourceNew":"    @Override\n    public void delete() {\n      // Box it now to prevent multiple autoboxing when doing multiple map lookups\n      final Long gen = delegate.getGeneration();\n\n      // synchronize on the policy wrapper so that we don't delegate the delete call\n      // concurrently with another thread trying to save this commit\n      synchronized (IndexDeletionPolicyWrapper.this) {\n        if ( (System.nanoTime() < reserves.getOrDefault(gen, 0L)) ||\n             savedCommits.containsKey(gen) ||\n             snapshotMgr.isSnapshotted(gen) ||\n             (null != latestCommit && gen.longValue() == latestCommit.getGeneration()) ) {\n          return; // skip deletion\n        }\n        log.debug(\"Deleting generation={}\", gen);\n        delegate.delete(); // delegate deletion\n      }\n    }\n\n","sourceOld":"    @Override\n    public void delete() {\n      Long gen = delegate.getGeneration();\n      Long reserve = reserves.get(gen);\n      if (reserve != null && System.nanoTime() < reserve) return;\n      if (savedCommits.containsKey(gen)) return;\n      if (snapshotMgr.isSnapshotted(gen)) return;\n      delegate.delete();\n    }\n\n","bugFix":["fd5bc858b8426d40bbe90b94120ead37c77d7954","91e2345fb81b6c1c7faefa550ee5eaafadc54486","c01638f4dd94981c1d3d52c4f7991246a5a24aba","97fc5a00245e9b31c118c53df88b1376237ea87b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fd5bc858b8426d40bbe90b94120ead37c77d7954","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"19f02bb04467ed179738a398a7da80bbbe161c16":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["fd5bc858b8426d40bbe90b94120ead37c77d7954","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f02bb04467ed179738a398a7da80bbbe161c16"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["fd5bc858b8426d40bbe90b94120ead37c77d7954"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["fd5bc858b8426d40bbe90b94120ead37c77d7954","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"19f02bb04467ed179738a398a7da80bbbe161c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","19f02bb04467ed179738a398a7da80bbbe161c16","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}