{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter#startDoc(int,int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // Have collected a block of docs, and get a new doc. \n    // Should write skip data as well as postings list for\n    // current block.\n    if (lastBlockDocID != -1 && docBufferUpto == 0) {\n      skipWriter.bufferSkip(lastBlockDocID, competitiveFreqNormAccumulator, docCount,\n          lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockPayloadByteUpto);\n      competitiveFreqNormAccumulator.clear();\n    }\n\n    final int docDelta = docID - lastDocID;\n\n    if (docID < 0 || (docCount > 0 && docDelta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\", docOut);\n    }\n\n    docDeltaBuffer[docBufferUpto] = docDelta;\n    if (writeFreqs) {\n      freqBuffer[docBufferUpto] = termDocFreq;\n    }\n    \n    docBufferUpto++;\n    docCount++;\n\n    if (docBufferUpto == BLOCK_SIZE) {\n      forDeltaUtil.encodeDeltas(docDeltaBuffer, docOut);\n      if (writeFreqs) {\n        pforUtil.encode(freqBuffer, docOut);\n      }\n      // NOTE: don't set docBufferUpto back to 0 here;\n      // finishDoc will do so (because it needs to see that\n      // the block was filled so it can save skip data)\n    }\n\n\n    lastDocID = docID;\n    lastPosition = 0;\n    lastStartOffset = 0;\n\n    long norm;\n    if (fieldHasNorms) {\n      boolean found = norms.advanceExact(docID);\n      if (found == false) {\n        // This can happen if indexing hits a problem after adding a doc to the\n        // postings but before buffering the norm. Such documents are written\n        // deleted and will go away on the first merge.\n        norm = 1L;\n      } else {\n        norm = norms.longValue();\n        assert norm != 0 : docID;\n      }\n    } else {\n      norm = 1L;\n    }\n\n    competitiveFreqNormAccumulator.add(writeFreqs ? termDocFreq : 1, norm);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}