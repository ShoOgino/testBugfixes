{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDataDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#markRightTree(long,int,PathSlice,LongBitSet).mjava","sourceNew":null,"sourceOld":"  /** Marks bits for the ords (points) that belong in the right sub tree (those docs that have values >= the splitValue). */\n  private byte[] markRightTree(long rightCount, int splitDim, PathSlice source, LongBitSet ordBitSet) throws IOException {\n\n    // Now we mark ords that fall into the right half, so we can partition on all other dims that are not the split dim:\n\n    // Read the split value, then mark all ords in the right tree (larger than the split value):\n\n    // TODO: find a way to also checksum this reader?  If we changed to markLeftTree, and scanned the final chunk, it could work?\n    try (PointReader reader = source.writer.getReader(source.start + source.count - rightCount, rightCount)) {\n      boolean result = reader.next();\n      assert result;\n      System.arraycopy(reader.packedValue(), splitDim*bytesPerDim, scratch1, 0, bytesPerDim);\n      if (numDataDims > 1) {\n        assert ordBitSet.get(reader.ord()) == false;\n        ordBitSet.set(reader.ord());\n        // Subtract 1 from rightCount because we already did the first value above (so we could record the split value):\n        reader.markOrds(rightCount-1, ordBitSet);\n      }\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n\n    return scratch1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"f6652c943595e92c187ee904c382863013eae28f":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["f6652c943595e92c187ee904c382863013eae28f"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}