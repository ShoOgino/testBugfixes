{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = (SrndQuery) q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery#makeLuceneQueryNoBoost(BasicQueryFactory).mjava","sourceNew":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","sourceOld":"  public Query makeLuceneQueryNoBoost(BasicQueryFactory qf) {\n    if (fieldNames.size() == 1) { /* single field name: no new queries needed */\n      return q.makeLuceneQueryFieldNoBoost(fieldNames.get(0), qf);\n    } else { /* OR query over the fields */\n      List<SrndQuery> queries = new ArrayList<SrndQuery>();\n      Iterator<String> fni = getFieldNames().listIterator();\n      SrndQuery qc;\n      while (fni.hasNext()) {\n        qc = q.clone();\n        queries.add( new FieldsQuery( qc, fni.next(), fieldOp));\n      }\n      OrQuery oq = new OrQuery(queries,\n                              true /* infix OR for field names */,\n                              OrOperatorName);\n      System.out.println(getClass().toString() + \", fields expanded: \" + oq.toString()); /* needs testing */\n      return oq.makeLuceneQueryField(null, qf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a53a291ad9b1cc050d846b68758c061a55d52734":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}