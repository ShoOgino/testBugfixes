{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44549822b9113925bd45e53c1e0028ab2e1d1d7f","date":1330898600,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n\n    if (uncaughtExceptionsRule.hasUncaughtExceptions()) {\n      testsFailed = true;\n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n\n    if (uncaughtExceptionsRule.hasUncaughtExceptions()) {\n      testsFailed = true;\n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n\n    if (!\"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n\n    if (uncaughtExceptionsRule.hasUncaughtExceptions()) {\n      testsFailed = true;\n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n\n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n\n    if (uncaughtExceptionsRule.hasUncaughtExceptions()) {\n      testsFailed = true;\n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":null,"sourceOld":"  @AfterClass\n  static void afterClassLuceneTestCaseJ4() {\n    for (Map.Entry<String,String> e : restoreProperties.entrySet()) {\n      if (e.getValue() == null) {\n        System.clearProperty(e.getKey());\n      } else {\n        System.setProperty(e.getKey(), e.getValue());\n      }\n    }\n    restoreProperties.clear();\n\n    Throwable problem = null;\n\n    if (!\"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n\n    if (uncaughtExceptionsRule.hasUncaughtExceptions()) {\n      testsFailed = true;\n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n\n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"1e6d0f38037e0125421d8e737992d511b5567b26":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1e6d0f38037e0125421d8e737992d511b5567b26","44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["1e6d0f38037e0125421d8e737992d511b5567b26"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"1e6d0f38037e0125421d8e737992d511b5567b26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","44549822b9113925bd45e53c1e0028ab2e1d1d7f"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e6d0f38037e0125421d8e737992d511b5567b26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"44549822b9113925bd45e53c1e0028ab2e1d1d7f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}