{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient,int,int).mjava","commits":[{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient,\n      int connectionTimeoutMillis, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .withConnectionTimeout(connectionTimeoutMillis)\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .withConnectionTimeout(connectionTimeoutMillis)\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient,\n      int connectionTimeoutMillis, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .withConnectionTimeout(connectionTimeoutMillis)\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .withConnectionTimeout(connectionTimeoutMillis)\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#getCloudSolrClient(String,boolean,HttpClient,int,int).mjava","sourceNew":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient,\n      int connectionTimeoutMillis, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .withConnectionTimeout(connectionTimeoutMillis)\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .withConnectionTimeout(connectionTimeoutMillis)\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n\n","sourceOld":"  /**\n   * This method <i>may</i> randomize unspecified aspects of the resulting SolrClient.\n   * Tests that do not wish to have any randomized behavior should use the \n   * {@link org.apache.solr.client.solrj.impl.CloudSolrClient.Builder} class directly\n   */ \n  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient,\n      int connectionTimeoutMillis, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .withConnectionTimeout(connectionTimeoutMillis)\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .withConnectionTimeout(connectionTimeoutMillis)\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n\n","bugFix":["43d1e498704edd2bba13548a189eed4dfccff11b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43d1e498704edd2bba13548a189eed4dfccff11b"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}