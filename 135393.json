{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSequenceCtor().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSequenceCtor().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSequenceCtor().mjava","sourceNew":"  @Test \n  public void testCharSequenceCtor() throws Exception {\n    CategoryPath[] testPaths = {\n        new CategoryPath(new CS(\"hi\"), new CS(\"there\"), new CS(\"man\")),\n        new CategoryPath(new CS(\"hello\")),\n        new CategoryPath(new CS(\"date\"), new CS(\"2009\"), new CS(\"May\"), new CS(\"13\"),\n            new CS(\"14\"), new CS(\"59\"), new CS(\"00\")),\n        new CategoryPath(),\n        new CategoryPath(new CS(\"another\"), new CS(\"example\"))\n    };\n    assertEquals(\"Wrong capacity\", 10, testPaths[0].capacityChars());\n    assertEquals(\"Wrong capacity\", 5, testPaths[1].capacityChars());\n    assertEquals(\"Wrong capacity\", 19, testPaths[2].capacityChars());\n    assertEquals(\"Wrong capacity\", 0, testPaths[3].capacityChars());\n    assertEquals(\"Wrong capacity\", 14, testPaths[4].capacityChars());\n\n    assertEquals(\"Wrong component\", \"hi\", testPaths[0].getComponent(0));\n    assertEquals(\"Wrong component\", \"there\", testPaths[0].getComponent(1));\n    assertEquals(\"Wrong component\", \"man\", testPaths[0].getComponent(2));\n    assertEquals(\"Wrong component\", \"hello\", testPaths[1].getComponent(0));\n    assertEquals(\"Wrong component\", \"date\", testPaths[2].getComponent(0));\n    assertEquals(\"Wrong component\", \"2009\", testPaths[2].getComponent(1));\n    assertEquals(\"Wrong component\", \"May\", testPaths[2].getComponent(2));\n    assertEquals(\"Wrong component\", \"13\", testPaths[2].getComponent(3));\n    assertEquals(\"Wrong component\", \"14\", testPaths[2].getComponent(4));\n    assertEquals(\"Wrong component\", \"59\", testPaths[2].getComponent(5));\n    assertEquals(\"Wrong component\", \"00\", testPaths[2].getComponent(6));\n    assertNull(\"Not null component\", testPaths[3].getComponent(0));\n    assertEquals(\"Wrong component\", \"another\", testPaths[4].getComponent(0));\n    assertEquals(\"Wrong component\", \"example\", testPaths[4].getComponent(1));\n  }\n\n","sourceOld":"  @Test \n  public void testCharSequenceCtor() throws Exception {\n    CategoryPath[] testPaths = {\n        new CategoryPath(new CS(\"hi\"), new CS(\"there\"), new CS(\"man\")),\n        new CategoryPath(new CS(\"hello\")),\n        new CategoryPath(new CS(\"date\"), new CS(\"2009\"), new CS(\"May\"), new CS(\"13\"),\n            new CS(\"14\"), new CS(\"59\"), new CS(\"00\")),\n        new CategoryPath(),\n        new CategoryPath(new CS(\"another\"), new CS(\"example\"))\n    };\n    assertEquals(\"Wrong capacity\", 10, testPaths[0].capacityChars());\n    assertEquals(\"Wrong capacity\", 5, testPaths[1].capacityChars());\n    assertEquals(\"Wrong capacity\", 19, testPaths[2].capacityChars());\n    assertEquals(\"Wrong capacity\", 0, testPaths[3].capacityChars());\n    assertEquals(\"Wrong capacity\", 14, testPaths[4].capacityChars());\n\n    assertEquals(\"Wrong component\", \"hi\", testPaths[0].getComponent(0));\n    assertEquals(\"Wrong component\", \"there\", testPaths[0].getComponent(1));\n    assertEquals(\"Wrong component\", \"man\", testPaths[0].getComponent(2));\n    assertEquals(\"Wrong component\", \"hello\", testPaths[1].getComponent(0));\n    assertEquals(\"Wrong component\", \"date\", testPaths[2].getComponent(0));\n    assertEquals(\"Wrong component\", \"2009\", testPaths[2].getComponent(1));\n    assertEquals(\"Wrong component\", \"May\", testPaths[2].getComponent(2));\n    assertEquals(\"Wrong component\", \"13\", testPaths[2].getComponent(3));\n    assertEquals(\"Wrong component\", \"14\", testPaths[2].getComponent(4));\n    assertEquals(\"Wrong component\", \"59\", testPaths[2].getComponent(5));\n    assertEquals(\"Wrong component\", \"00\", testPaths[2].getComponent(6));\n    assertNull(\"Not null component\", testPaths[3].getComponent(0));\n    assertEquals(\"Wrong component\", \"another\", testPaths[4].getComponent(0));\n    assertEquals(\"Wrong component\", \"example\", testPaths[4].getComponent(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSequenceCtor().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharSequenceCtor() throws Exception {\n    CategoryPath[] testPaths = {\n        new CategoryPath(new CS(\"hi\"), new CS(\"there\"), new CS(\"man\")),\n        new CategoryPath(new CS(\"hello\")),\n        new CategoryPath(new CS(\"date\"), new CS(\"2009\"), new CS(\"May\"), new CS(\"13\"),\n            new CS(\"14\"), new CS(\"59\"), new CS(\"00\")),\n        new CategoryPath(),\n        new CategoryPath(new CS(\"another\"), new CS(\"example\"))\n    };\n    assertEquals(\"Wrong capacity\", 10, testPaths[0].capacityChars());\n    assertEquals(\"Wrong capacity\", 5, testPaths[1].capacityChars());\n    assertEquals(\"Wrong capacity\", 19, testPaths[2].capacityChars());\n    assertEquals(\"Wrong capacity\", 0, testPaths[3].capacityChars());\n    assertEquals(\"Wrong capacity\", 14, testPaths[4].capacityChars());\n\n    assertEquals(\"Wrong component\", \"hi\", testPaths[0].getComponent(0));\n    assertEquals(\"Wrong component\", \"there\", testPaths[0].getComponent(1));\n    assertEquals(\"Wrong component\", \"man\", testPaths[0].getComponent(2));\n    assertEquals(\"Wrong component\", \"hello\", testPaths[1].getComponent(0));\n    assertEquals(\"Wrong component\", \"date\", testPaths[2].getComponent(0));\n    assertEquals(\"Wrong component\", \"2009\", testPaths[2].getComponent(1));\n    assertEquals(\"Wrong component\", \"May\", testPaths[2].getComponent(2));\n    assertEquals(\"Wrong component\", \"13\", testPaths[2].getComponent(3));\n    assertEquals(\"Wrong component\", \"14\", testPaths[2].getComponent(4));\n    assertEquals(\"Wrong component\", \"59\", testPaths[2].getComponent(5));\n    assertEquals(\"Wrong component\", \"00\", testPaths[2].getComponent(6));\n    assertNull(\"Not null component\", testPaths[3].getComponent(0));\n    assertEquals(\"Wrong component\", \"another\", testPaths[4].getComponent(0));\n    assertEquals(\"Wrong component\", \"example\", testPaths[4].getComponent(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testCharSequenceCtor().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testCharSequenceCtor() throws Exception {\n    CategoryPath[] testPaths = {\n        new CategoryPath(new CS(\"hi\"), new CS(\"there\"), new CS(\"man\")),\n        new CategoryPath(new CS(\"hello\")),\n        new CategoryPath(new CS(\"date\"), new CS(\"2009\"), new CS(\"May\"), new CS(\"13\"),\n            new CS(\"14\"), new CS(\"59\"), new CS(\"00\")),\n        new CategoryPath(),\n        new CategoryPath(new CS(\"another\"), new CS(\"example\"))\n    };\n    assertEquals(\"Wrong capacity\", 10, testPaths[0].capacityChars());\n    assertEquals(\"Wrong capacity\", 5, testPaths[1].capacityChars());\n    assertEquals(\"Wrong capacity\", 19, testPaths[2].capacityChars());\n    assertEquals(\"Wrong capacity\", 0, testPaths[3].capacityChars());\n    assertEquals(\"Wrong capacity\", 14, testPaths[4].capacityChars());\n\n    assertEquals(\"Wrong component\", \"hi\", testPaths[0].getComponent(0));\n    assertEquals(\"Wrong component\", \"there\", testPaths[0].getComponent(1));\n    assertEquals(\"Wrong component\", \"man\", testPaths[0].getComponent(2));\n    assertEquals(\"Wrong component\", \"hello\", testPaths[1].getComponent(0));\n    assertEquals(\"Wrong component\", \"date\", testPaths[2].getComponent(0));\n    assertEquals(\"Wrong component\", \"2009\", testPaths[2].getComponent(1));\n    assertEquals(\"Wrong component\", \"May\", testPaths[2].getComponent(2));\n    assertEquals(\"Wrong component\", \"13\", testPaths[2].getComponent(3));\n    assertEquals(\"Wrong component\", \"14\", testPaths[2].getComponent(4));\n    assertEquals(\"Wrong component\", \"59\", testPaths[2].getComponent(5));\n    assertEquals(\"Wrong component\", \"00\", testPaths[2].getComponent(6));\n    assertNull(\"Not null component\", testPaths[3].getComponent(0));\n    assertEquals(\"Wrong component\", \"another\", testPaths[4].getComponent(0));\n    assertEquals(\"Wrong component\", \"example\", testPaths[4].getComponent(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}