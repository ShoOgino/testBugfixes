{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","commits":[{"id":"232252bc7056b698c1e1c550f4b97a9a3c00e520","date":1372943634,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  // nocommit: need to check all-zero case?\n  // so we can reuse one long[] \n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    // nocommit: necessary?\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];  // nocommit: reuse\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      assert(accum[pos] >= 0);\n      pos++;\n    }\n    TempMetaData ret;\n    if (t2.bytes != null) {\n      ret = new TempMetaData(accum, t2.bytes);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  // nocommit: need to check all-zero case?\n  // so we can reuse one long[] \n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];  // nocommit: reuse?\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      assert(accum[pos] >= 0);\n      pos++;\n    }\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  // nocommit: need to check all-zero case?\n  // so we can reuse one long[] \n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    // nocommit: necessary?\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];  // nocommit: reuse\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      assert(accum[pos] >= 0);\n      pos++;\n    }\n    TempMetaData ret;\n    if (t2.bytes != null) {\n      ret = new TempMetaData(accum, t2.bytes);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce","date":1373299712,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n    TempMetaData ret;\n    ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  // nocommit: need to check all-zero case?\n  // so we can reuse one long[] \n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs != null;\n    assert t2.longs != null;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];  // nocommit: reuse?\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      assert(accum[pos] >= 0);\n      pos++;\n    }\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b","date":1373471768,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n    TempMetaData ret;\n    ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#add(TempMetaData,TempMetaData).mjava","sourceNew":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","sourceOld":"  // nocommit: we might refactor out an 'addSelf' later, \n  // which improves 5~7% for fuzzy queries\n  @Override\n  public TempMetaData add(TempMetaData t1, TempMetaData t2) {\n    if (DEBUG) System.out.print(\"add(\"+t1+\", \"+t2+\") = \");\n    if (t1 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t2);\n      return t2;\n    } else if (t2 == NO_OUTPUT) {\n      if (DEBUG) System.out.println(\"ret:\"+t1);\n      return t1;\n    }\n    assert t1.longs.length == t2.longs.length;\n\n    int pos = 0;\n    long[] accum = new long[longsSize];\n\n    while (pos < longsSize) {\n      accum[pos] = t1.longs[pos] + t2.longs[pos];\n      pos++;\n    }\n\n    TempMetaData ret;\n    if (t2.bytes != null || t2.docFreq > 0) {\n      ret = new TempMetaData(accum, t2.bytes, t2.docFreq, t2.totalTermFreq);\n    } else {\n      ret = new TempMetaData(accum, t1.bytes, t1.docFreq, t1.totalTermFreq);\n    }\n    if (DEBUG) System.out.println(\"ret:\"+ret);\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b":["f962e7e670c8f2b5f205969d2ab166dd92d4a5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["050ba1ba249733cac50c2612418b7179591d2df9"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["232252bc7056b698c1e1c550f4b97a9a3c00e520"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b"]},"commit2Childs":{"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b":["050ba1ba249733cac50c2612418b7179591d2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232252bc7056b698c1e1c550f4b97a9a3c00e520","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f962e7e670c8f2b5f205969d2ab166dd92d4a5ce":["0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["f962e7e670c8f2b5f205969d2ab166dd92d4a5ce"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"050ba1ba249733cac50c2612418b7179591d2df9":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}