{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97ba94eef1fc33c5451259a7aa2ac682646c1af","date":1488285427,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(dir).getIndexCreatedVersion();\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir, indexCreatedVersion);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      int indexCreatedVersion = SegmentInfos.readLatestCommit(dir).getIndexCreatedVersionMajor();\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir, indexCreatedVersion);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(dir).getIndexCreatedVersion();\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir, indexCreatedVersion);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testUpgradeOldIndex().mjava","sourceNew":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      int indexCreatedVersion = SegmentInfos.readLatestCommit(dir).getIndexCreatedVersionMajor();\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir, indexCreatedVersion);\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testUpgradeOldIndex() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    for(String name : names) {\n      if (VERBOSE) {\n        System.out.println(\"testUpgradeOldIndex: index=\" +name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(dir).getIndexCreatedVersion();\n\n      newIndexUpgrader(dir).upgrade();\n\n      checkAllSegmentsUpgraded(dir, indexCreatedVersion);\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}