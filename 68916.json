{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    try {\n      byte[] data = factory.getData(path);\n      if (data != null) {\n        this.buffer = data;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        this.buffer = syncData.data;\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    try {\n      byte[] data = factory.getData(path);\n      if (data != null) {\n        this.buffer = data;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        this.buffer = syncData.data;\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    try {\n      byte[] data = factory.getData(path);\n      if (data != null) {\n        this.buffer = data;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        this.buffer = syncData.data;\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    try {\n      byte[] data = factory.getData(path);\n      if (data != null) {\n        this.buffer = data;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d29562959e4f9c21557f699a0d964bb0c98f8e","date":1556102028,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        setBuffer(syncData.data);\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        this.buffer = syncData.data;\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#SolrRrdBackend(String,boolean,SolrRrdBackendFactory).mjava","sourceNew":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        setBuffer(syncData.data);\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from {}, store will be readOnly\", path, e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","sourceOld":"  public SolrRrdBackend(String path, boolean readOnly, SolrRrdBackendFactory factory) {\n    super(path);\n    this.factory = factory;\n    this.lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n    try {\n      SyncData syncData = factory.getData(path);\n      if (syncData != null) {\n        setBuffer(syncData.data);\n        this.lastModifiedTime = syncData.timestamp;\n      }\n    } catch (IOException e) {\n      log.warn(\"Exception retrieving data from \" + path + \", store will be readOnly\", e);\n      readOnly = true;\n    }\n    this.readOnly = readOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["58d29562959e4f9c21557f699a0d964bb0c98f8e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58d29562959e4f9c21557f699a0d964bb0c98f8e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}