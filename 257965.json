{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"/dev/null","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["985161df9b1c14b4aa862d74d48cf51561579e62"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(term, new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareTo(enumerator.prev())> 0)\n\t    || term.compareTo(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareTo(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareTo(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":["773f3441f7263f3a1b78e69ba2a38600c336c420"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":null,"sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["2aafd88401639311b0404e67c94e829e123a0e45"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}