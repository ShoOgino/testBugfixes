{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<Cell>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getNodes(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getNode(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Node> getNodes(Point p, int detailLevel, boolean inclParents) {\n    Node cell = getNode(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Node> cells = new ArrayList<Node>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getNode(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<Cell>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc64259f3c8f43dfc6841ffad77df3b9446e3a5","date":1395149462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));//TODO refactor: add a cell.getParent()\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    assert !cell.isLeaf();\n    if (!inclParents || detailLevel == 1) {\n      return Collections.singletonList(cell);\n    }\n\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = detailLevel-1; true; i--) {\n      cells[i] = cell;\n      if (i == 0)\n        break;\n      cell = cell.getParent();\n    }\n    return Arrays.asList(cells);\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));//TODO refactor: add a cell.getParent()\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","sourceNew":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    assert !cell.isLeaf();\n    if (!inclParents || detailLevel == 1) {\n      return Collections.singletonList(cell);\n    }\n\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = detailLevel-1; true; i--) {\n      cells[i] = cell;\n      if (i == 0)\n        break;\n      cell = cell.getParent();\n    }\n    return Arrays.asList(cells);\n  }\n\n","sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   * <p/>\n   * This implementation depends on {@link #getCell(String)} being fast, as its\n   * called repeatedly when incPlarents is true.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    if (!inclParents) {\n      return Collections.singletonList(cell);\n    }\n\n    String endToken = cell.getTokenString();\n    assert endToken.length() == detailLevel;\n    List<Cell> cells = new ArrayList<>(detailLevel);\n    for (int i = 1; i < detailLevel; i++) {\n      cells.add(getCell(endToken.substring(0, i)));//TODO refactor: add a cell.getParent()\n    }\n    cells.add(cell);\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getCells(Point,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Point-optimized implementation of\n   * {@link #getCells(com.spatial4j.core.shape.Shape, int, boolean, boolean)}. That\n   * method in facts calls this for points.\n   */\n  public List<Cell> getCells(Point p, int detailLevel, boolean inclParents) {\n    Cell cell = getCell(p, detailLevel);\n    assert !cell.isLeaf();\n    if (!inclParents || detailLevel == 1) {\n      return Collections.singletonList(cell);\n    }\n\n    //fill in reverse order to be sorted\n    Cell[] cells = new Cell[detailLevel];\n    for (int i = detailLevel-1; true; i--) {\n      cells[i] = cell;\n      if (i == 0)\n        break;\n      cell = cell.getParent();\n    }\n    return Arrays.asList(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8259c159da2de2e8528524fb76b244b46cbded59"],"efc64259f3c8f43dfc6841ffad77df3b9446e3a5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5"],"efc64259f3c8f43dfc6841ffad77df3b9446e3a5":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}