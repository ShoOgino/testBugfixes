{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","sourceNew":"        public boolean hasNext () {\n            has_next_called=true;\n            try {\n                line=in.readLine();\n            }\n            catch (IOException ex) {\n                ex.printStackTrace();\n                line=null;\n                return false;\n            }\n            return (line!=null)?true:false;\n        }\n\n","sourceOld":"        public boolean hasNext () {\n            has_next_called=true;\n            try {\n                line=in.readLine();\n            }\n            catch (IOException ex) {\n                ex.printStackTrace();\n                line=null;\n                return false;\n            }\n            return (line!=null)?true:false;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      has_next_called = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        line = null;\n        return false;\n      }\n      return (line != null) ? true : false;\n    }\n\n","sourceOld":"        public boolean hasNext () {\n            has_next_called=true;\n            try {\n                line=in.readLine();\n            }\n            catch (IOException ex) {\n                ex.printStackTrace();\n                line=null;\n                return false;\n            }\n            return (line!=null)?true:false;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66c7d9ba90489bb25ccef63953d2b19871ddca9b","date":1150608774,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        line = null;\n        return false;\n      }\n      return (line != null) ? true : false;\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      has_next_called = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        line = null;\n        return false;\n      }\n      return (line != null) ? true : false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n      return (line != null) ? true : false;\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        line = null;\n        return false;\n      }\n      return (line != null) ? true : false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/PlainTextDictionary.fileIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n      return (line != null) ? true : false;\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      hasNextCalled = true;\n      try {\n        line = in.readLine();\n      } catch (IOException ex) {\n        throw new RuntimeException(ex);\n      }\n      return (line != null) ? true : false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66c7d9ba90489bb25ccef63953d2b19871ddca9b":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96308b901685e8ec12a3856f788a7d9d98c22e50":["66c7d9ba90489bb25ccef63953d2b19871ddca9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["96308b901685e8ec12a3856f788a7d9d98c22e50"]},"commit2Childs":{"66c7d9ba90489bb25ccef63953d2b19871ddca9b":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["66c7d9ba90489bb25ccef63953d2b19871ddca9b"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}