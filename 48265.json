{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#reopen().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#reopen().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#reopen().mjava","sourceNew":null,"sourceOld":"  /**\n   * Refreshes an IndexReader if the index has changed since this instance \n   * was (re)opened. \n   * <p>\n   * Opening an IndexReader is an expensive operation. This method can be used\n   * to refresh an existing IndexReader to reduce these costs. This method \n   * tries to only load segments that have changed or were created after the \n   * IndexReader was (re)opened.\n   * <p>\n   * If the index has not changed since this instance was (re)opened, then this\n   * call is a NOOP and returns this instance. Otherwise, a new instance is \n   * returned. The old instance is <b>not</b> closed and remains usable.<br>\n   * <p>   \n   * If the reader is reopened, even though they share\n   * resources internally, it's safe to make changes\n   * (deletions, norms) with the new reader.  All shared\n   * mutable state obeys \"copy on write\" semantics to ensure\n   * the changes are not seen by other readers.\n   * <p>\n   * You can determine whether a reader was actually reopened by comparing the\n   * old instance with the instance returned by this method: \n   * <pre>\n   * IndexReader reader = ... \n   * ...\n   * IndexReader newReader = r.reopen();\n   * if (newReader != reader) {\n   * ...     // reader was reopened\n   *   reader.close(); \n   * }\n   * reader = newReader;\n   * ...\n   * </pre>\n   *\n   * Be sure to synchronize that code so that other threads,\n   * if present, can never use reader after it has been\n   * closed and before it's switched to newReader.\n   *\n   * <p><b>NOTE</b>: If this reader is a near real-time\n   * reader (obtained from {@link IndexWriter#getReader()},\n   * reopen() will simply call writer.getReader() again for\n   * you, though this may change in the future.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */  \n  public synchronized IndexReader reopen() throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not support reopen().\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}