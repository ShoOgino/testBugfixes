{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SimOp#prepareCurrentParams(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SimOp#prepareCurrentParams(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * This method prepares a copy of initial params (and sets the value of {@link #params}\n     * with all property references resolved against the current {@link SimScenario#context}\n     * and system properties. This method should always be called before invoking\n     * {@link #execute(SimScenario)}.\n     * @param scenario current scenario\n     */\n    public void prepareCurrentParams(SimScenario scenario) {\n      Properties props = new Properties();\n      scenario.context.forEach((k, v) -> {\n        if (v instanceof String[]) {\n          v = String.join(\",\", (String[]) v);\n        } else if (v instanceof Collection) {\n          StringBuilder sb = new StringBuilder();\n          for (Object o : (Collection<Object>)v) {\n            if (sb.length() > 0) {\n              sb.append(',');\n            }\n            if ((o instanceof String) || (o instanceof Number)) {\n              sb.append(o);\n            } else {\n              // skip all values\n              return;\n            }\n          }\n          v = sb.toString();\n        } else if ((v instanceof String) || (v instanceof Number)) {\n          // don't convert, put as is\n        } else {\n          // skip\n          return;\n        }\n        props.put(k, v);\n      });\n      ModifiableSolrParams currentParams = new ModifiableSolrParams();\n      initParams.forEach(e -> {\n        String newKey = PropertiesUtil.substituteProperty(e.getKey(), props);\n        if (newKey == null) {\n          newKey = e.getKey();\n        }\n        String[] newValues;\n        if (e.getValue() != null && e.getValue().length > 0) {\n          String[] values = e.getValue();\n          newValues = new String[values.length];\n          for (int k = 0; k < values.length; k++) {\n            String newVal = PropertiesUtil.substituteProperty(values[k], props);\n            if (newVal == null) {\n              newVal = values[k];\n            }\n            newValues[k] = newVal;\n          }\n        } else {\n          newValues = e.getValue();\n        }\n        currentParams.add(newKey, newValues);\n      });\n      params = currentParams;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SimOp#prepareCurrentParams(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SimOp#prepareCurrentParams(SimScenario).mjava","sourceNew":"    /**\n     * This method prepares a copy of initial params (and sets the value of {@link #params}\n     * with all property references resolved against the current {@link SimScenario#context}\n     * and system properties. This method should always be called before invoking\n     * {@link #execute(SimScenario)}.\n     * @param scenario current scenario\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public void prepareCurrentParams(SimScenario scenario) {\n      Properties props = new Properties();\n      scenario.context.forEach((k, v) -> {\n        if (v instanceof String[]) {\n          v = String.join(\",\", (String[]) v);\n        } else if (v instanceof Collection) {\n          StringBuilder sb = new StringBuilder();\n          for (Object o : (Collection<Object>)v) {\n            if (sb.length() > 0) {\n              sb.append(',');\n            }\n            if ((o instanceof String) || (o instanceof Number)) {\n              sb.append(o);\n            } else {\n              // skip all values\n              return;\n            }\n          }\n          v = sb.toString();\n        } else if ((v instanceof String) || (v instanceof Number)) {\n          // don't convert, put as is\n        } else {\n          // skip\n          return;\n        }\n        props.put(k, v);\n      });\n      ModifiableSolrParams currentParams = new ModifiableSolrParams();\n      initParams.forEach(e -> {\n        String newKey = PropertiesUtil.substituteProperty(e.getKey(), props);\n        if (newKey == null) {\n          newKey = e.getKey();\n        }\n        String[] newValues;\n        if (e.getValue() != null && e.getValue().length > 0) {\n          String[] values = e.getValue();\n          newValues = new String[values.length];\n          for (int k = 0; k < values.length; k++) {\n            String newVal = PropertiesUtil.substituteProperty(values[k], props);\n            if (newVal == null) {\n              newVal = values[k];\n            }\n            newValues[k] = newVal;\n          }\n        } else {\n          newValues = e.getValue();\n        }\n        currentParams.add(newKey, newValues);\n      });\n      params = currentParams;\n    }\n\n","sourceOld":"    /**\n     * This method prepares a copy of initial params (and sets the value of {@link #params}\n     * with all property references resolved against the current {@link SimScenario#context}\n     * and system properties. This method should always be called before invoking\n     * {@link #execute(SimScenario)}.\n     * @param scenario current scenario\n     */\n    public void prepareCurrentParams(SimScenario scenario) {\n      Properties props = new Properties();\n      scenario.context.forEach((k, v) -> {\n        if (v instanceof String[]) {\n          v = String.join(\",\", (String[]) v);\n        } else if (v instanceof Collection) {\n          StringBuilder sb = new StringBuilder();\n          for (Object o : (Collection<Object>)v) {\n            if (sb.length() > 0) {\n              sb.append(',');\n            }\n            if ((o instanceof String) || (o instanceof Number)) {\n              sb.append(o);\n            } else {\n              // skip all values\n              return;\n            }\n          }\n          v = sb.toString();\n        } else if ((v instanceof String) || (v instanceof Number)) {\n          // don't convert, put as is\n        } else {\n          // skip\n          return;\n        }\n        props.put(k, v);\n      });\n      ModifiableSolrParams currentParams = new ModifiableSolrParams();\n      initParams.forEach(e -> {\n        String newKey = PropertiesUtil.substituteProperty(e.getKey(), props);\n        if (newKey == null) {\n          newKey = e.getKey();\n        }\n        String[] newValues;\n        if (e.getValue() != null && e.getValue().length > 0) {\n          String[] values = e.getValue();\n          newValues = new String[values.length];\n          for (int k = 0; k < values.length; k++) {\n            String newVal = PropertiesUtil.substituteProperty(values[k], props);\n            if (newVal == null) {\n              newVal = values[k];\n            }\n            newValues[k] = newVal;\n          }\n        } else {\n          newValues = e.getValue();\n        }\n        currentParams.add(newKey, newValues);\n      });\n      params = currentParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.SimOp#prepareCurrentParams(SimScenario).mjava","sourceNew":null,"sourceOld":"    /**\n     * This method prepares a copy of initial params (and sets the value of {@link #params}\n     * with all property references resolved against the current {@link SimScenario#context}\n     * and system properties. This method should always be called before invoking\n     * {@link #execute(SimScenario)}.\n     * @param scenario current scenario\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public void prepareCurrentParams(SimScenario scenario) {\n      Properties props = new Properties();\n      scenario.context.forEach((k, v) -> {\n        if (v instanceof String[]) {\n          v = String.join(\",\", (String[]) v);\n        } else if (v instanceof Collection) {\n          StringBuilder sb = new StringBuilder();\n          for (Object o : (Collection<Object>)v) {\n            if (sb.length() > 0) {\n              sb.append(',');\n            }\n            if ((o instanceof String) || (o instanceof Number)) {\n              sb.append(o);\n            } else {\n              // skip all values\n              return;\n            }\n          }\n          v = sb.toString();\n        } else if ((v instanceof String) || (v instanceof Number)) {\n          // don't convert, put as is\n        } else {\n          // skip\n          return;\n        }\n        props.put(k, v);\n      });\n      ModifiableSolrParams currentParams = new ModifiableSolrParams();\n      initParams.forEach(e -> {\n        String newKey = PropertiesUtil.substituteProperty(e.getKey(), props);\n        if (newKey == null) {\n          newKey = e.getKey();\n        }\n        String[] newValues;\n        if (e.getValue() != null && e.getValue().length > 0) {\n          String[] values = e.getValue();\n          newValues = new String[values.length];\n          for (int k = 0; k < values.length; k++) {\n            String newVal = PropertiesUtil.substituteProperty(values[k], props);\n            if (newVal == null) {\n              newVal = values[k];\n            }\n            newValues[k] = newVal;\n          }\n        } else {\n          newValues = e.getValue();\n        }\n        currentParams.add(newKey, newValues);\n      });\n      params = currentParams;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}