{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // first let delegee accumulate without labeling at all (though\n    // currently it doesn't matter because we have to label all returned anyhow)\n    boolean origAllowLabeling = isAllowLabeling();\n    setAllowLabeling(false);\n    \n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    setAllowLabeling(origAllowLabeling);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetResultsHandler frh = fres.getFacetRequest().createFacetResultsHandler(\n          taxonomyReader);\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams)\n          .fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n                                              // arranging it needs to\n      // final labeling if allowed (because labeling is a costly operation)\n      if (isAllowLabeling()) {\n        frh.labelResult(fres);\n      }\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // first let delegee accumulate without labeling at all (though\n    // currently it doesn't matter because we have to label all returned anyhow)\n    boolean origAllowLabeling = isAllowLabeling();\n    setAllowLabeling(false);\n    \n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    setAllowLabeling(origAllowLabeling);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetResultsHandler frh = fres.getFacetRequest().createFacetResultsHandler(\n          taxonomyReader);\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams)\n          .fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n                                              // arranging it needs to\n      // final labeling if allowed (because labeling is a costly operation)\n      if (isAllowLabeling()) {\n        frh.labelResult(fres);\n      }\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any arranging it needs to\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n\n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // first let delegee accumulate without labeling at all (though\n    // currently it doesn't matter because we have to label all returned anyhow)\n    boolean origAllowLabeling = isAllowLabeling();\n    setAllowLabeling(false);\n    \n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    setAllowLabeling(origAllowLabeling);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      FacetResultsHandler frh = fres.getFacetRequest().createFacetResultsHandler(\n          taxonomyReader);\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams)\n          .fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n                                              // arranging it needs to\n      // final labeling if allowed (because labeling is a costly operation)\n      if (isAllowLabeling()) {\n        frh.labelResult(fres);\n      }\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","bugFix":null,"bugIntro":["4b31c82c6df2339d0c31b592f919be77383dac10","c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/SamplingAccumulator#accumulate(ScoredDocIDs).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any arranging it needs to\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n\n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {\n    // Replacing the original searchParams with the over-sampled\n    FacetSearchParams original = searchParams;\n    searchParams = sampler.overSampledSearchParams(original);\n    \n    List<FacetResult> sampleRes = super.accumulate(docids);\n    \n    List<FacetResult> fixedRes = new ArrayList<FacetResult>();\n    for (FacetResult fres : sampleRes) {\n      // for sure fres is not null because this is guaranteed by the delegee.\n      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());\n      // fix the result of current request\n      sampler.getSampleFixer(indexReader, taxonomyReader, searchParams).fixResult(docids, fres);\n      \n      fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any arranging it needs to\n\n      // Using the sampler to trim the extra (over-sampled) results\n      fres = sampler.trimResult(fres);\n\n      // final labeling if allowed (because labeling is a costly operation)\n      frh.labelResult(fres);\n      fixedRes.add(fres); // add to final results\n    }\n    \n    searchParams = original; // Back to original params\n    \n    return fixedRes; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}