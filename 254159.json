{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","sourceNew":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","sourceOld":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","sourceNew":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","sourceOld":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMultipleWithCollections().mjava","sourceNew":null,"sourceOld":"  public void testMultipleWithCollections() throws Exception {\n    String prefix = \"testMultipleWithCollections\";\n    String xyz = prefix + \"_xyz\";\n    String xyz2 = prefix + \"_xyz2\";\n    String abc = prefix + \"_abc\";\n    String abc2 = prefix + \"_abc2\";\n\n    // start 2 more nodes so we have 4 in total\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String chosenNode2 = cluster.getJettySolrRunner(1).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode2, abc2);\n    CollectionAdminRequest.createCollection(abc2, 1, 1)\n        .setCreateNodeSet(chosenNode2)\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz2, 1, 1)\n        .setWithCollection(abc2)\n        .process(solrClient);\n\n    // refresh\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    DocCollection withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, chosenNode2, withCollection); // no replica should be on chosenNode2\n    assertColocated(collection2, chosenNode, withCollection2); // no replica should be on chosenNode\n\n    String chosenNode3 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz, \"shard1\")\n        .setNode(chosenNode3)\n        .process(solrClient);\n    String chosenNode4 = cluster.getJettySolrRunner(2).getNodeName();\n    CollectionAdminRequest.addReplicaToShard(xyz2, \"shard1\")\n        .setNode(chosenNode4)\n        .process(solrClient);\n\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    collection2 = solrClient.getZkStateReader().getClusterState().getCollection(xyz2);\n    withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    withCollection2 = solrClient.getZkStateReader().getClusterState().getCollection(abc2);\n\n    // sanity check\n    assertColocated(collection, null, withCollection);\n    assertColocated(collection2, null, withCollection2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"27639bb5e041490ce599065875dd2f6d8beef62a":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}