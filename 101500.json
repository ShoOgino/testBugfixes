{"path":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        Directory d = new  RAMDirectory();\n\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        Directory d = new  RAMDirectory();\n\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockRAMDirectory d = new  MockRAMDirectory();\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        Directory d = new  RAMDirectory();\n\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockRAMDirectory d = new  MockRAMDirectory();\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        Directory d = new  RAMDirectory();\n\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n            BitVector compare = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", IOContext.DEFAULT);\n            BitVector compare = new BitVector(d, \"TESTBV\", IOContext.DEFAULT);\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\");\n            BitVector compare = new BitVector(d, \"TESTBV\");\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestBitVector#doTestWriteRead(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBitVector#doTestWriteRead(int).mjava","sourceNew":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","sourceOld":"    private void doTestWriteRead(int n) throws Exception {\n        MockDirectoryWrapper d = new  MockDirectoryWrapper(random, new RAMDirectory());\n        d.setPreventDoubleWrite(false);\n        BitVector bv = new BitVector(n);\n        // test count when incrementally setting bits\n        for(int i=0;i<bv.size();i++) {\n            assertFalse(bv.get(i));\n            assertEquals(i,bv.count());\n            bv.set(i);\n            assertTrue(bv.get(i));\n            assertEquals(i+1,bv.count());\n            bv.write(d, \"TESTBV\", newIOContext(random));\n            BitVector compare = new BitVector(d, \"TESTBV\", newIOContext(random));\n            // compare bit vectors with bits set incrementally\n            assertTrue(doCompare(bv,compare));\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["ddc4c914be86e34b54f70023f45a60fa7f04e929","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["53a31399f2471493d67b19a95c028a74e0113b6a","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["53a31399f2471493d67b19a95c028a74e0113b6a","b6f9be74ca7baaef11857ad002cad40419979516"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["ddc4c914be86e34b54f70023f45a60fa7f04e929","e3a73b15d807e41306466aec106b4cb85b8d5335"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["fd92b8bcc88e969302510acf77bd6970da3994c4","e3a73b15d807e41306466aec106b4cb85b8d5335","5d004d0e0b3f65bb40da76d476d659d7888270e8","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fd92b8bcc88e969302510acf77bd6970da3994c4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}