{"path":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","commits":[{"id":"172df63033c2189512184145d4d45c79b230d45e","date":1311519908,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RefCntRamDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      Directory openNew(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.open(path);\n    Directory dir2 = factory.open(path);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir1);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", directory, dir2);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["2cf65de5ffe215f49df0b92ef7ff4eadc7a6878c","c194d5d82aa52be285a8de7cbfb68645e01c4f0e","3d6a7bde407a8c57099e269492b3d2fa0ce839e4"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) throws IOException {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, null);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, null);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, null);\n    Directory dir2 = factory.get(path, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a5f916afbd74e1875b20198b0925849fc7091d","date":1410737177,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, null);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, null);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ba470831f135c6146ebded0fac228b6142f01b","date":1450376475,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n    factory.close();\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n    factory.close();\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, \"single\");\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, \"single\");\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n    factory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenReturnsTheSameForSamePath().mjava","sourceNew":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new ByteBuffersDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n    factory.close();\n  }\n\n","sourceOld":"  private void dotestOpenReturnsTheSameForSamePath() throws IOException {\n    final Directory directory = new RAMDirectory();\n    RAMDirectoryFactory factory = new RAMDirectoryFactory()  {\n      @Override\n      protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) {\n        return directory;\n      }\n    };\n    String path = \"/fake/path\";\n    Directory dir1 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    Directory dir2 = factory.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    assertEquals(\"RAMDirectoryFactory should not create new instance of RefCntRamDirectory \" +\n        \"every time open() is called for the same path\", dir1, dir2);\n\n    factory.release(dir1);\n    factory.release(dir2);\n    factory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["42a5f916afbd74e1875b20198b0925849fc7091d"],"f5ba470831f135c6146ebded0fac228b6142f01b":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d77dafd89756a5161d244985903e3487ca109182":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"42a5f916afbd74e1875b20198b0925849fc7091d":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"172df63033c2189512184145d4d45c79b230d45e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["f5ba470831f135c6146ebded0fac228b6142f01b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e22ffe8cc51a892ae103df018822d7873e901c2a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["172df63033c2189512184145d4d45c79b230d45e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["f5ba470831f135c6146ebded0fac228b6142f01b"],"f5ba470831f135c6146ebded0fac228b6142f01b":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","42a5f916afbd74e1875b20198b0925849fc7091d"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42a5f916afbd74e1875b20198b0925849fc7091d":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"172df63033c2189512184145d4d45c79b230d45e":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["d77dafd89756a5161d244985903e3487ca109182"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["172df63033c2189512184145d4d45c79b230d45e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}