{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next().mjava","commits":[{"id":"962b2790491d84618a387a768d018c54e9809f91","date":1166830997,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    // if we already returned the edge n-gram, we are done\n    if (started)\n      return null;\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n    // if the input is too short, we can't generate any n-grams\n    if (gramSize > inLen)\n      return null;\n    if (side == Side.FRONT)\n      return new Token(inStr.substring(0, gramSize), 0, gramSize);\n    else\n      return new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);            \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65611ed302763dd12bf8f4676760c1a4c82761ab","date":1172758977,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return null;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return null;\n    }\n\n    Token tok;\n    if (side == Side.FRONT) {\n      tok = new Token(inStr.substring(0, gramSize), 0, gramSize);\n    }\n    else {\n      tok = new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);\n    }\n\n    gramSize++;\n    return tok;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    // if we already returned the edge n-gram, we are done\n    if (started)\n      return null;\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n    // if the input is too short, we can't generate any n-grams\n    if (gramSize > inLen)\n      return null;\n    if (side == Side.FRONT)\n      return new Token(inStr.substring(0, gramSize), 0, gramSize);\n    else\n      return new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);            \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any leading or trailing spaces\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return null;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return null;\n    }\n\n    // grab gramSize chars from front or back\n    int start = side == Side.FRONT ? 0 : inLen - gramSize;\n    int end = start + gramSize;\n    reusableToken.setTermBuffer(inStr, start, gramSize);\n    reusableToken.setStartOffset(start);\n    reusableToken.setEndOffset(end);\n    gramSize++;\n    return reusableToken;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    // if we are just starting, read the whole input\n    if (!started) {\n      started = true;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings\n      inLen = inStr.length();\n      gramSize = minGram;\n    }\n\n    // if the remaining input is too short, we can't generate any n-grams\n    if (gramSize > inLen) {\n      return null;\n    }\n\n    // if we have hit the end of our n-gram size range, quit\n    if (gramSize > maxGram) {\n      return null;\n    }\n\n    Token tok;\n    if (side == Side.FRONT) {\n      tok = new Token(inStr.substring(0, gramSize), 0, gramSize);\n    }\n    else {\n      tok = new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);\n    }\n\n    gramSize++;\n    return tok;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["65611ed302763dd12bf8f4676760c1a4c82761ab"],"962b2790491d84618a387a768d018c54e9809f91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65611ed302763dd12bf8f4676760c1a4c82761ab":["962b2790491d84618a387a768d018c54e9809f91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962b2790491d84618a387a768d018c54e9809f91":["65611ed302763dd12bf8f4676760c1a4c82761ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["962b2790491d84618a387a768d018c54e9809f91"],"65611ed302763dd12bf8f4676760c1a4c82761ab":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}