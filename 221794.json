{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,SortedDocValues).mjava","commits":[{"id":"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5","date":1396311813,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","sourceNew":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs, SortedDocValues values) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs, values);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","sourceNew":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs, SortedDocValues values) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs, values);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntIntOpenHashMap,SortedDocValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet,SortedDocValues).mjava","sourceNew":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntIntOpenHashMap boostDocs, SortedDocValues values) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs, values);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs, SortedDocValues values) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs, values);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["5eb2511ababf862ea11e10761c70ee560cd84510","a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}