{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","sourceNew":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (NumericType type : NumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","sourceOld":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (NumericType type : NumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","sourceNew":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","sourceOld":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (NumericType type : NumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertSimpleQuery(NumberType,int).mjava","sourceNew":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","sourceOld":"  public void assertSimpleQuery(NumberType numberType, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    StringBuilder sb = new StringBuilder();\n    \n    for (LegacyNumericType type : LegacyNumericType.values()) {\n      String numberStr = numberToString(getNumberType(numberType, type.name()));\n      sb.append('+').append(type.name()).append(\":\\\"\").append(numberStr)\n          .append(\"\\\" \");\n    }\n    \n    String dateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(numberType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append('+').append(DATE_FIELD_NAME).append(\":\\\"\").append(dateStr)\n        .append('\"');\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["770342641f7b505eaa8dccdc666158bff2419109"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"770342641f7b505eaa8dccdc666158bff2419109":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}