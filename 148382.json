{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","commits":[{"id":"61eadeb75db46a857947318760374f73002b0354","date":1480710364,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Fields fields = MultiFields.getFields(r);\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    Terms terms = fields.terms(\"field\");\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Fields fields = MultiFields.getFields(r);\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    Terms terms = fields.terms(\"field\");\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Fields fields = MultiFields.getFields(r);\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    Terms terms = fields.terms(\"field\");\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Fields fields = MultiFields.getFields(r);\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    Terms terms = fields.terms(\"field\");\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Fields fields = MultiFields.getFields(r);\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    Terms terms = fields.terms(\"field\");\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testIntersectRegexp().mjava","sourceNew":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Terms terms = MultiTerms.getTerms(r, \"field\");\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-7576\n  public void testIntersectRegexp() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"foobar\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(\"do_not_match_anything\").toAutomaton());\n    String message = expectThrows(IllegalArgumentException.class, () -> {terms.intersect(automaton, null);}).getMessage();\n    assertEquals(\"please use CompiledAutomaton.getTermsEnum instead\", message);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61eadeb75db46a857947318760374f73002b0354":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["61eadeb75db46a857947318760374f73002b0354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["28288370235ed02234a64753cdbf0c6ec096304a"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61eadeb75db46a857947318760374f73002b0354"],"28288370235ed02234a64753cdbf0c6ec096304a":["61eadeb75db46a857947318760374f73002b0354","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["61eadeb75db46a857947318760374f73002b0354","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"61eadeb75db46a857947318760374f73002b0354":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","9856095f7afb5a607bf5e65077615ed91273508c","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61eadeb75db46a857947318760374f73002b0354","9856095f7afb5a607bf5e65077615ed91273508c"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"28288370235ed02234a64753cdbf0c6ec096304a":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}