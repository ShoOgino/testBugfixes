{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#CheckDaemonStream(StreamContext,DaemonStream).mjava","commits":[{"id":"d5fc8ecbf23873760f4072d6643a3d2e97597030","date":1555542126,"type":0,"author":"erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#CheckDaemonStream(StreamContext,DaemonStream).mjava","pathOld":"/dev/null","sourceNew":"  private void CheckDaemonStream(StreamContext context, DaemonStream daemonStream) throws IOException, SolrServerException {\n    // Wait for the checkpoint\n    JettySolrRunner jetty = cluster.getJettySolrRunners().get(0);\n\n    SolrParams sParams1 = mapParams(\"qt\", \"/get\", \"ids\", \"50000000\", \"fl\", \"id\");\n    int count = 0;\n    while (count == 0) {\n      SolrStream solrStream = new SolrStream(jetty.getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS, sParams1);\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      count = tuples.size();\n      if (count > 0) {\n        Tuple t = tuples.get(0);\n        assertTrue(t.getLong(\"id\") == 50000000);\n      } else {\n        System.out.println(\"###### Waiting for checkpoint #######:\" + count);\n      }\n    }\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello0\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for (int i = 0; i < 5; i++) {\n      daemonStream.read();\n    }\n\n    new UpdateRequest()\n        .add(id, \"5\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"6\", \"a_s\", \"hello0\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    for (int i = 0; i < 2; i++) {\n      daemonStream.read();\n    }\n\n    daemonStream.shutdown();\n\n    Tuple tuple = daemonStream.read();\n\n    assertTrue(tuple.EOF);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5fc8ecbf23873760f4072d6643a3d2e97597030"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}