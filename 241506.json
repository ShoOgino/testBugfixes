{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    maxValue++;\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = Math.abs(rnd2.nextLong() % maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    maxValue++;\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = Math.abs(rnd2.nextLong() % maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    maxValue++;\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = Math.abs(rnd2.nextLong() % maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fc791afc075c00a9ce29ca03eca7a6c143c28a","date":1341671452,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = _TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,int,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#fill(PackedInts.Mutable,long,long).mjava","sourceNew":"  private static void fill(PackedInts.Mutable packedInt, int bitsPerValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    final long maxValue = bitsPerValue == 64 ? Long.MAX_VALUE : (1L << bitsPerValue) - 1;\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = bitsPerValue == 64 ? random().nextLong() : TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","sourceOld":"  private static void fill(PackedInts.Mutable packedInt, long maxValue, long randomSeed) {\n    Random rnd2 = new Random(randomSeed);\n    for (int i = 0 ; i < packedInt.size() ; i++) {\n      long value = TestUtil.nextLong(rnd2, 0, maxValue);\n      packedInt.set(i, value);\n      assertEquals(String.format(Locale.ROOT,\n              \"The set/get of the value at index %d should match for %s\",\n              i, packedInt.getClass().getSimpleName()),\n              value, packedInt.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","829d9441b99897377d279219000bb71b50c026be"],"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["829d9441b99897377d279219000bb71b50c026be"],"829d9441b99897377d279219000bb71b50c026be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","c1fc791afc075c00a9ce29ca03eca7a6c143c28a"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"46d8ada1fff8d18cb197c38c7983225162599948":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["829d9441b99897377d279219000bb71b50c026be","46d8ada1fff8d18cb197c38c7983225162599948"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["c1fc791afc075c00a9ce29ca03eca7a6c143c28a","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}