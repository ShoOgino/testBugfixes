{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(Edge[],int,int).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(Edge[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Edge[],int,int).mjava","sourceNew":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(EdgeTree[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(Edge[],int,int).mjava","sourceNew":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static EdgeTree createTree(EdgeTree edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    EdgeTree newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(Edge[],int,int).mjava","sourceNew":null,"sourceOld":"  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["e4fccad460342b1af30cb328cc8297751a218d78","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}