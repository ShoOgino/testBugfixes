{"path":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1161f19bd84204b140d97fea16ff621e86ce7ab4","date":1235924971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ce0b034b2cf25b7a620cccd4fb63d766d216f27","date":1258978478,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ad94625fb8d088209f46650c8097196fec67f00c":["7ce0b034b2cf25b7a620cccd4fb63d766d216f27"],"7ce0b034b2cf25b7a620cccd4fb63d766d216f27":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["7ce0b034b2cf25b7a620cccd4fb63d766d216f27"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7ce0b034b2cf25b7a620cccd4fb63d766d216f27":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}