{"path":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermEnum termEnum = (SegmentTermEnum) reader.terms();\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.prev().text());\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertFalse(termEnum.next());\n    assertEquals(\"bbb\", termEnum.prev().text());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermEnum termEnum = (SegmentTermEnum) reader.terms();\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.prev().text());\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertFalse(termEnum.next());\n    assertEquals(\"bbb\", termEnum.prev().text());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermEnum termEnum = (SegmentTermEnum) reader.terms();\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.term().text());\n    assertTrue(termEnum.next());\n    assertEquals(\"aaa\", termEnum.prev().text());\n    assertEquals(\"bbb\", termEnum.term().text());\n    assertFalse(termEnum.next());\n    assertEquals(\"bbb\", termEnum.prev().text());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB = terms.ord();\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(ordB));\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator();\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir, false));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#testPrevTermAtEnd().mjava","sourceNew":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","sourceOld":"  public void testPrevTermAtEnd() throws IOException\n  {\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    addDoc(writer, \"aaa bbb\");\n    writer.close();\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    TermsEnum terms = reader.fields().terms(\"content\").iterator(null);\n    assertNotNull(terms.next());\n    assertEquals(\"aaa\", terms.term().utf8ToString());\n    assertNotNull(terms.next());\n    long ordB;\n    try {\n      ordB = terms.ord();\n    } catch (UnsupportedOperationException uoe) {\n      // ok -- codec is not required to support ord\n      reader.close();\n      return;\n    }\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    assertNull(terms.next());\n\n    terms.seekExact(ordB);\n    assertEquals(\"bbb\", terms.term().utf8ToString());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["56da903869515527852ee21ea7ef7bfe414cd40d"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","56da903869515527852ee21ea7ef7bfe414cd40d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["d572389229127c297dd1fa5ce4758e1cec41e799","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7b91922b55d15444d554721b352861d028eb8278":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"56da903869515527852ee21ea7ef7bfe414cd40d":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["fd9cc9d77712aba3662f24632df7539ab75e3667","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","7b91922b55d15444d554721b352861d028eb8278"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d572389229127c297dd1fa5ce4758e1cec41e799":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"56da903869515527852ee21ea7ef7bfe414cd40d":["f2c5f0cb44df114db4228c8f77861714b5cabaea","70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}