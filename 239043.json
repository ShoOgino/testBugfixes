{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = (AtomicReaderContext) reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = (AtomicReaderContext) reader.getTopReaderContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit)\n              break;\n\n            reader.deleteDocument(doc);\n            // as we use getLiveDocs() to filter out already deleted documents,\n            // we only delete live documents, so the counting is right:\n            delCount++;\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = (AtomicReaderContext) reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = (AtomicReaderContext) reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, readerContext.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],IndexWriter.ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, IndexWriter.ReadersAndLiveDocs rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getTopReaderContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}