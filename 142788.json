{"path":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","commits":[{"id":"cbb7f1f4cf1e9a820364c090bb7e9a590f351339","date":1478603266,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64e822dccd1b346ce9d46853cebd9bc5550e8a55","date":1497302501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbb7f1f4cf1e9a820364c090bb7e9a590f351339"],"28288370235ed02234a64753cdbf0c6ec096304a":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cbb7f1f4cf1e9a820364c090bb7e9a590f351339":["64e822dccd1b346ce9d46853cebd9bc5550e8a55","199dfa410f1fdbfd3294106b04096cce5ed34b21","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbb7f1f4cf1e9a820364c090bb7e9a590f351339","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"28288370235ed02234a64753cdbf0c6ec096304a":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}