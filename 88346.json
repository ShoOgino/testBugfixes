{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","commits":[{"id":"3106630d90d0d9e238f170a5cb83cd1dee5ddd72","date":1343657007,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(TEST_VERSION_CURRENT, tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"/dev/null","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"/dev/null","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestElision#testElision().mjava","sourceNew":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","sourceOld":"  public void testElision() throws Exception {\n    String test = \"Plop, juste pour voir l'embrouille avec O'brian. M'enfin.\";\n    Tokenizer tokenizer = new StandardTokenizer(TEST_VERSION_CURRENT, newAttributeFactory());\n    tokenizer.setReader(new StringReader(test));\n    CharArraySet articles = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"l\", \"M\"), false);\n    TokenFilter filter = new ElisionFilter(tokenizer, articles);\n    List<String> tas = filter(filter);\n    assertEquals(\"embrouille\", tas.get(4));\n    assertEquals(\"O'brian\", tas.get(6));\n    assertEquals(\"enfin\", tas.get(7));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}