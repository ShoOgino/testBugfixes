{"path":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","commits":[{"id":"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","date":1295834280,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84e740e39a90ea9fbf66e3487ce9fc0396572954","date":1303645723,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList mapping = (NamedList) fieldMappings.get(\"mapping\", i);\n      String typeName = (String) mapping.get(\"type\");\n      String featureName = (String) mapping.get(\"feature\");\n      String mappedFieldName = (String) mapping.get(\"field\");\n      Map<String, String> subMap = new HashMap<String, String>();\n      subMap.put(featureName, mappedFieldName);\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList mapping = (NamedList) fieldMappings.get(\"mapping\", i);\n      String typeName = (String) mapping.get(\"type\");\n      String featureName = (String) mapping.get(\"feature\");\n      String mappedFieldName = (String) mapping.get(\"field\");\n      Map<String, String> subMap = new HashMap<String, String>();\n      subMap.put(featureName, mappedFieldName);\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList mapping = (NamedList) fieldMappings.get(\"mapping\", i);\n      String typeName = (String) mapping.get(\"type\");\n      String featureName = (String) mapping.get(\"feature\");\n      String mappedFieldName = (String) mapping.get(\"field\");\n      Map<String, String> subMap = new HashMap<String, String>();\n      subMap.put(featureName, mappedFieldName);\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e32373bc887cf6f807e6cee6580c2867e296fba6","date":1304738580,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, String> subMap = new HashMap<String, String>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String mappedFieldName = (String) mapping.get(\"field\");\n        subMap.put(featureName, mappedFieldName);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList mapping = (NamedList) fieldMappings.get(\"mapping\", i);\n      String typeName = (String) mapping.get(\"type\");\n      String featureName = (String) mapping.get(\"feature\");\n      String mappedFieldName = (String) mapping.get(\"field\");\n      Map<String, String> subMap = new HashMap<String, String>();\n      subMap.put(featureName, mappedFieldName);\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7af39ddfe08efa20e4c56e454a0d5935a085c53","date":1304952961,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, String> subMap = new HashMap<String, String>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String mappedFieldName = (String) mapping.get(\"field\");\n        subMap.put(featureName, mappedFieldName);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList mapping = (NamedList) fieldMappings.get(\"mapping\", i);\n      String typeName = (String) mapping.get(\"type\");\n      String featureName = (String) mapping.get(\"feature\");\n      String mappedFieldName = (String) mapping.get(\"field\");\n      Map<String, String> subMap = new HashMap<String, String>();\n      subMap.put(featureName, mappedFieldName);\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();\n\n    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);\n    /* iterate over UIMA types */\n    if (fieldMappingNode.hasChildNodes()) {\n      NodeList typeNodes = fieldMappingNode.getChildNodes();\n      for (int i = 0; i < typeNodes.getLength(); i++) {\n        /* <type> node */\n        Node typeNode = typeNodes.item(i);\n        if (typeNode.getNodeType() != Node.TEXT_NODE) {\n          Node typeNameAttribute = typeNode.getAttributes().getNamedItem(\"name\");\n          /* get a UIMA typename */\n          String typeName = typeNameAttribute.getNodeValue();\n          /* create entry for UIMA type */\n          map.put(typeName, new HashMap<String, String>());\n          if (typeNode.hasChildNodes()) {\n            /* iterate over features */\n            NodeList featuresNodeList = typeNode.getChildNodes();\n            for (int j = 0; j < featuresNodeList.getLength(); j++) {\n              Node mappingNode = featuresNodeList.item(j);\n              if (mappingNode.getNodeType() != Node.TEXT_NODE) {\n                /* get field name */\n                Node fieldNameNode = mappingNode.getAttributes().getNamedItem(\"field\");\n                String mappedFieldName = fieldNameNode.getNodeValue();\n                /* get feature name */\n                Node featureNameNode = mappingNode.getAttributes().getNamedItem(\"feature\");\n                String featureName = featureNameNode.getNodeValue();\n                /* map the feature to the field for the specified type */\n                map.get(typeName).put(featureName, mappedFieldName);\n              }\n            }\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d5df8e07c035d62d982894b439322da40e0938":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","84e740e39a90ea9fbf66e3487ce9fc0396572954"],"84e740e39a90ea9fbf66e3487ce9fc0396572954":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"c26f00b574427b55127e869b935845554afde1fa":["a7af39ddfe08efa20e4c56e454a0d5935a085c53","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","84e740e39a90ea9fbf66e3487ce9fc0396572954"],"e32373bc887cf6f807e6cee6580c2867e296fba6":["84e740e39a90ea9fbf66e3487ce9fc0396572954"],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["e32373bc887cf6f807e6cee6580c2867e296fba6"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"a3776dccca01c11e7046323cfad46a3b4a471233":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d4d5df8e07c035d62d982894b439322da40e0938":[],"84e740e39a90ea9fbf66e3487ce9fc0396572954":["d4d5df8e07c035d62d982894b439322da40e0938","135621f3a0670a9394eb563224a3b76cc4dddc0f","e32373bc887cf6f807e6cee6580c2867e296fba6"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"e32373bc887cf6f807e6cee6580c2867e296fba6":["a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["84e740e39a90ea9fbf66e3487ce9fc0396572954","bb9b72f7c3d7827c64dd4ec580ded81778da361d","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["d4d5df8e07c035d62d982894b439322da40e0938"],"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}