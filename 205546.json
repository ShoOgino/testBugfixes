{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":"  protected void ensureCanWrite(String name) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    File file = new File(directory, name);\n    if (file.exists() && !file.delete())          // delete existing, if any\n      throw new IOException(\"Cannot overwrite: \" + file);\n  }\n\n","sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    File file = new File(directory, name);\n    if (file.exists() && !file.delete())          // delete existing, if any\n      throw new IOException(\"Cannot overwrite: \" + file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":"  protected void ensureCanWrite(String name) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    File file = new File(directory, name);\n    Files.deleteIfExists(file.toPath()); // delete existing, if any\n  }\n\n","sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    File file = new File(directory, name);\n    if (file.exists() && !file.delete())          // delete existing, if any\n      throw new IOException(\"Cannot overwrite: \" + file);\n  }\n\n","bugFix":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":"  protected void ensureCanWrite(String name) throws IOException {\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    File file = new File(directory, name);\n    Files.deleteIfExists(file.toPath()); // delete existing, if any\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":"  protected void ensureCanWrite(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new IOException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be overwritten\");\n    }\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1153e47b15f8f40c4635a2b8371678a4b0e4d825","date":1454495732,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":null,"sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":null,"sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    deletePendingFiles();\n    if (pendingDeletes.contains(name)) {\n      throw new IOException(\"file \\\"\" + name + \"\\\" is pending delete and cannot be overwritten\");\n    }\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#ensureCanWrite(String).mjava","sourceNew":null,"sourceOld":"  protected void ensureCanWrite(String name) throws IOException {\n    Files.deleteIfExists(directory.resolve(name)); // delete existing, if any\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbc3688252d4a8045d69a164236b2cf87b721f17":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","1153e47b15f8f40c4635a2b8371678a4b0e4d825"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"1153e47b15f8f40c4635a2b8371678a4b0e4d825":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1153e47b15f8f40c4635a2b8371678a4b0e4d825"]},"commit2Childs":{"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"1153e47b15f8f40c4635a2b8371678a4b0e4d825":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1153e47b15f8f40c4635a2b8371678a4b0e4d825"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}