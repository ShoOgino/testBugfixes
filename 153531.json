{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(DataConfig.Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      List<DataConfig.Field> field = entity.colNameVsField.get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getConfig().lowerNameVsSchemaField.get(key.toLowerCase(Locale.ENGLISH));\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (DataConfig.Field f : field) {\n            String name = f.getName();\n            if(f.dynamicName){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(DataConfig.Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      List<DataConfig.Field> field = entity.colNameVsField.get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getConfig().lowerNameVsSchemaField.get(key.toLowerCase(Locale.ENGLISH));\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (DataConfig.Field f : field) {\n            String name = f.getName();\n            if(f.dynamicName){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(DataConfig.Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      List<DataConfig.Field> field = entity.colNameVsField.get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getConfig().lowerNameVsSchemaField.get(key.toLowerCase(Locale.ENGLISH));\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (DataConfig.Field f : field) {\n            String name = f.getName();\n            if(f.dynamicName){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(DataConfig.Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      List<DataConfig.Field> field = entity.colNameVsField.get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getConfig().lowerNameVsSchemaField.get(key.toLowerCase(Locale.ENGLISH));\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (DataConfig.Field f : field) {\n            String name = f.getName();\n            if(f.dynamicName){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#addFields(DataConfig.Entity,DocWrapper,Map[String,Object],VariableResolver).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      Set<EntityField> field = entity.getColNameVsField().get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getSchemaField(key);\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (EntityField f : field) {\n            String name = f.getName();\n            if(f.isDynamicName()){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.isToWrite()) {\n              addFieldToDoc(entry.getValue(), name, f.getBoost(), f.isMultiValued(), doc);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void addFields(DataConfig.Entity entity, DocWrapper doc,\n                         Map<String, Object> arow, VariableResolver vr) {\n    for (Map.Entry<String, Object> entry : arow.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value == null)  continue;\n      if (key.startsWith(\"$\")) continue;\n      List<DataConfig.Field> field = entity.colNameVsField.get(key);\n      if (field == null && dataImporter.getSchema() != null) {\n        // This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)\n        SchemaField sf = dataImporter.getSchema().getFieldOrNull(key);\n        if (sf == null) {\n          sf = dataImporter.getConfig().lowerNameVsSchemaField.get(key.toLowerCase(Locale.ENGLISH));\n        }\n        if (sf != null) {\n          addFieldToDoc(entry.getValue(), sf.getName(), 1.0f, sf.multiValued(), doc);\n        }\n        //else do nothing. if we add it it may fail\n      } else {\n        if (field != null) {\n          for (DataConfig.Field f : field) {\n            String name = f.getName();\n            if(f.dynamicName){\n              name =  vr.replaceTokens(name);\n            }\n            if (f.toWrite) addFieldToDoc(entry.getValue(), name, f.boost, f.multiValued, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}