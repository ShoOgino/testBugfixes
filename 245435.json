{"path":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,int,int,String,String,int,boolean).mjava","sourceNew":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames, \n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","sourceOld":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames, \n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration, \n              int autoReplicaFailoverWorkLoopDelay, int autoReplicaFailoverBadNodeExpiration, String zkCredentialsProviderClass, \n              String zkACLProviderClass, int createCollectionWaitTimeTillActive, boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.autoReplicaFailoverWorkLoopDelay = autoReplicaFailoverWorkLoopDelay;\n    this.autoReplicaFailoverBadNodeExpiration = autoReplicaFailoverBadNodeExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames, \n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames, \n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","sourceNew":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames,\n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","sourceOld":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames, \n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":5,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CloudConfig#CloudConfig(String,int,int,String,String,boolean,int,int,int,String,String,int,boolean).mjava","sourceNew":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames,\n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive, String pkiHandlerPrivateKeyPath, String pkiHandlerPublicKeyPath) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n    this.pkiHandlerPrivateKeyPath = pkiHandlerPrivateKeyPath;\n    this.pkiHandlerPublicKeyPath = pkiHandlerPublicKeyPath;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","sourceOld":"  CloudConfig(String zkHost, int zkClientTimeout, int hostPort, String hostName, String hostContext, boolean useGenericCoreNames,\n              int leaderVoteWait, int leaderConflictResolveWait, int autoReplicaFailoverWaitAfterExpiration,\n              String zkCredentialsProviderClass, String zkACLProviderClass, int createCollectionWaitTimeTillActive,\n              boolean createCollectionCheckLeaderActive) {\n    this.zkHost = zkHost;\n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostName = hostName;\n    this.hostContext = hostContext;\n    this.useGenericCoreNames = useGenericCoreNames;\n    this.leaderVoteWait = leaderVoteWait;\n    this.leaderConflictResolveWait = leaderConflictResolveWait;\n    this.autoReplicaFailoverWaitAfterExpiration = autoReplicaFailoverWaitAfterExpiration;\n    this.zkCredentialsProviderClass = zkCredentialsProviderClass;\n    this.zkACLProviderClass = zkACLProviderClass;\n    this.createCollectionWaitTimeTillActive = createCollectionWaitTimeTillActive;\n    this.createCollectionCheckLeaderActive = createCollectionCheckLeaderActive;\n\n    if (this.hostPort == -1)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostPort' must be configured to run SolrCloud\");\n    if (this.hostContext == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"'hostContext' must be configured to run SolrCloud\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b409047f69fb85704c506753bc23a37d7ad37b54":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b409047f69fb85704c506753bc23a37d7ad37b54"]},"commit2Childs":{"b409047f69fb85704c506753bc23a37d7ad37b54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["b409047f69fb85704c506753bc23a37d7ad37b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}