{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testIsFinite().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testIsFinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), Operations.isFinite(a));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(a));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testIsFinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testIsFinite().mjava","sourceNew":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), Operations.isFinite(a));\n    }\n  }\n\n","sourceOld":"  /**\n   * tests against the original brics implementation.\n   */\n  public void testIsFinite() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      Automaton b = a.clone();\n      assertEquals(AutomatonTestUtil.isFiniteSlow(a), SpecialOperations.isFinite(b));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}