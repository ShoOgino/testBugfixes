{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d615ef411046679022f6728bb2b876273d13ae","date":1400253450,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efcf27cd5ca23def8376b4c321970c14dd71623","date":1400662679,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      if (DEBUG) {\n        System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      if (DEBUG) {\n        System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      if (DEBUG) {\n        System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //  System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //    BytesRef suffixBytes = new BytesRef(suffix);\n          //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //    suffixBytes.length = suffix;\n          //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      if (DEBUG) {\n        System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          if (DEBUG) {\n             BytesRef suffixBytes = new BytesRef(suffix);\n             System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n             suffixBytes.length = suffix;\n             System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            if (DEBUG) {\n               BytesRef suffixBytes = new BytesRef(suffix);\n               System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n               suffixBytes.length = suffix;\n               System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca044bd4a0bea8391cbebb44a34aba53a9b50541","date":1400784655,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //  System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      // int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //    BytesRef suffixBytes = new BytesRef(suffix);\n          //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //    suffixBytes.length = suffix;\n          //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //  System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //    BytesRef suffixBytes = new BytesRef(suffix);\n          //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //    suffixBytes.length = suffix;\n          //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //  System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      // int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //    BytesRef suffixBytes = new BytesRef(suffix);\n          //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //    suffixBytes.length = suffix;\n          //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //  System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<Pair<BytesRef,Long>>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      long maxVersionInBlock = -1;\n\n      // int countx = 0;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //    BytesRef suffixBytes = new BytesRef(suffix);\n          //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //    suffixBytes.length = suffix;\n          //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            maxVersionInBlock = Math.max(maxVersionInBlock, ((IDVersionTermState) state).idVersion);\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write term suffix=\" + toString(suffixBytes));\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            maxVersionInBlock = Math.max(maxVersionInBlock, block.maxVersion);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //    BytesRef suffixBytes = new BytesRef(suffix);\n            //    System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //    suffixBytes.length = suffix;\n            //    System.out.println(\"    \" + (countx++) + \": write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, maxVersionInBlock, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["b7d615ef411046679022f6728bb2b876273d13ae"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"b7d615ef411046679022f6728bb2b876273d13ae":["6256acedd658c13275a01e4ba106a621956a22f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"0efcf27cd5ca23def8376b4c321970c14dd71623":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"6256acedd658c13275a01e4ba106a621956a22f6":["b7d615ef411046679022f6728bb2b876273d13ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"b7d615ef411046679022f6728bb2b876273d13ae":["0efcf27cd5ca23def8376b4c321970c14dd71623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}