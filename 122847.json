{"path":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","commits":[{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos();\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96609ea54585d552d1498d27226f664b5e88d337","date":1223921531,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, \n      IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, closeDir, deletionPolicy, autoCommit, maxFieldLength, DocumentsWriter.DefaultIndexingChain);\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.commit(directory);\n      } else {\n        segmentInfos.read(directory);\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        for(int i=0;i<segmentInfos.size();i++) {\n          final SegmentInfo info = segmentInfos.info(i);\n          List files = info.files();\n          for(int j=0;j<files.size();j++)\n            synced.add(files.get(j));\n        }\n      }\n\n      this.autoCommit = autoCommit;\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","sourceNew":null,"sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, \n      IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, create, closeDir, deletionPolicy, autoCommit, maxFieldLength, DocumentsWriter.DefaultIndexingChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"455aeff4fef915340c5b19d71d5e147034e83093":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96609ea54585d552d1498d27226f664b5e88d337":["2586f96f60332eb97ecd2934b0763791462568b2"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"2586f96f60332eb97ecd2934b0763791462568b2":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["455aeff4fef915340c5b19d71d5e147034e83093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["96609ea54585d552d1498d27226f664b5e88d337"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["e82780afe6097066eb5befb86e9432f077667e3d"],"455aeff4fef915340c5b19d71d5e147034e83093":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"96609ea54585d552d1498d27226f664b5e88d337":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["455aeff4fef915340c5b19d71d5e147034e83093"],"e82780afe6097066eb5befb86e9432f077667e3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"2586f96f60332eb97ecd2934b0763791462568b2":["96609ea54585d552d1498d27226f664b5e88d337"],"5350389bf83287111f7760b9e3db3af8e3648474":["2586f96f60332eb97ecd2934b0763791462568b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}