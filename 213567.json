{"path":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","commits":[{"id":"835adbfe7017665e672833c6251cb109d5a1d00c","date":1102763751,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"/dev/null","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    Query query = QueryParser.parse(\"text\", \"fieldname\", analyzer);\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0c839e28bbf8e26233e9cb58aa45188ae669f2be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39307c77a13486fd8c765bd6b67159625b2ca470","date":1116960801,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    Query query = QueryParser.parse(\"text\", \"fieldname\", analyzer);\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    Query query = QueryParser.parse(\"text\", \"fieldname\", analyzer);\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n      QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    Query query = QueryParser.parse(\"text\", \"fieldname\", analyzer);\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d45e6235b05f07658e393f3cf9e590dc334c1f51","date":1154631641,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n      QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          IndexWriter.MaxFieldLength.LIMITED);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d9637651e2bd0a7040acb5f63bdd6b922b244ef","date":1202418455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          IndexWriter.MaxFieldLength.LIMITED);\n    iwriter.setMaxFieldLength(25000);\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    Hits hits = isearcher.search(query);\n    assertEquals(1, hits.length());\n    // Iterate through the results:\n    for (int i = 0; i < hits.length(); i++) {\n      Document hitDoc = hits.doc(i);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.TOKENIZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79d07e6e4a7a886c21c71e1285bc52bce00b1b7f","date":1223846485,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead (note that the \n    // parameter true will overwrite the index in that directory\n    // if one exists):\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\", true);\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.getDirectory(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575d1542af85a3abde8d0dd485aef5923244708a","date":1251225368,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer();\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n\n    _TestUtil.checkIndex(directory);\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory);\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(\"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxFieldLength(25000));\n    \n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxFieldLength(25000));\n    \n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxFieldLength(25000));\n    \n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxFieldLength(25000));\n    \n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxFieldLength(25000));\n    \n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d45e6235b05f07658e393f3cf9e590dc334c1f51":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["d45e6235b05f07658e393f3cf9e590dc334c1f51"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"39307c77a13486fd8c765bd6b67159625b2ca470":["835adbfe7017665e672833c6251cb109d5a1d00c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"575d1542af85a3abde8d0dd485aef5923244708a":["ba712167ee848727018d8b77aa0c273839fbe15c"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"835adbfe7017665e672833c6251cb109d5a1d00c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba1116b3450a9c1642c89445d131b37344055245":["575d1542af85a3abde8d0dd485aef5923244708a"],"ba712167ee848727018d8b77aa0c273839fbe15c":["79d07e6e4a7a886c21c71e1285bc52bce00b1b7f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["39307c77a13486fd8c765bd6b67159625b2ca470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79d07e6e4a7a886c21c71e1285bc52bce00b1b7f":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"5350389bf83287111f7760b9e3db3af8e3648474":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"d45e6235b05f07658e393f3cf9e590dc334c1f51":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"39307c77a13486fd8c765bd6b67159625b2ca470":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"575d1542af85a3abde8d0dd485aef5923244708a":["ba1116b3450a9c1642c89445d131b37344055245"],"835adbfe7017665e672833c6251cb109d5a1d00c":["39307c77a13486fd8c765bd6b67159625b2ca470"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["79d07e6e4a7a886c21c71e1285bc52bce00b1b7f"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba712167ee848727018d8b77aa0c273839fbe15c":["575d1542af85a3abde8d0dd485aef5923244708a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["d45e6235b05f07658e393f3cf9e590dc334c1f51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835adbfe7017665e672833c6251cb109d5a1d00c"],"79d07e6e4a7a886c21c71e1285bc52bce00b1b7f":["ba712167ee848727018d8b77aa0c273839fbe15c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}