{"path":"backwards/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/NumberTools#longToString(long).mjava","sourceNew":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","sourceOld":"    /**\n     * Converts a long to a String suitable for indexing.\n     */\n    public static String longToString(long l) {\n\n        if (l == Long.MIN_VALUE) {\n            // special case, because long is not symmetric around zero\n            return MIN_STRING_VALUE;\n        }\n\n        StringBuilder buf = new StringBuilder(STR_SIZE);\n\n        if (l < 0) {\n            buf.append(NEGATIVE_PREFIX);\n            l = Long.MAX_VALUE + l + 1;\n        } else {\n            buf.append(POSITIVE_PREFIX);\n        }\n        String num = Long.toString(l, RADIX);\n\n        int padLen = STR_SIZE - num.length() - buf.length();\n        while (padLen-- > 0) {\n            buf.append('0');\n        }\n        buf.append(num);\n\n        return buf.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}