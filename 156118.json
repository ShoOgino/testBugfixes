{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}