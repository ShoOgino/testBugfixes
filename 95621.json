{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSort(T[],int,int,Comparator[#-super-T]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void quickSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).quickSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void quickSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).quickSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_introSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_quickSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the intro sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void introSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    new ArrayIntroSorter<>(a, comp).sort(fromIndex, toIndex);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the quick sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void quickSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).quickSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}