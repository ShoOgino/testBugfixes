{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":"  private void doTest(boolean withCache, boolean plantWrongData) throws IOException, Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws IOException, Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws IOException, Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws IOException, Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    final CategoryListCache clCache;\n    if (withCache) {\n      //let's use a cached cl data\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iParams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n    } else {\n      clCache = null;\n    }\n    List<FacetRequest> req = new ArrayList<FacetRequest>();\n    req.add(new CountFacetRequest(cp, 10));\n    final FacetSearchParams sParams = new FacetSearchParams(req, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    final CategoryListCache clCache;\n    if (withCache) {\n      //let's use a cached cl data\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iParams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n    } else {\n      clCache = null;\n    }\n    List<FacetRequest> req = new ArrayList<FacetRequest>();\n    req.add(new CountFacetRequest(cp, 10));\n    final FacetSearchParams sParams = new FacetSearchParams(req, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test \n    CountFacetRequest frq = new CountFacetRequest(cp, 10);\n    FacetSearchParams sParams = getFacetedSearchParams();\n    sParams.addFacetRequest(frq);\n    if (withCache) {\n      //let's use a cached cl data\n      FacetIndexingParams iparams = sParams.getFacetIndexingParams();\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      CategoryListCache clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iparams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n      sParams.setClCache(clCache);\n    }\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    final CategoryListCache clCache;\n    if (withCache) {\n      //let's use a cached cl data\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iParams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n    } else {\n      clCache = null;\n    }\n    List<FacetRequest> req = new ArrayList<FacetRequest>();\n    req.add(new CountFacetRequest(cp, 10));\n    final FacetSearchParams sParams = new FacetSearchParams(req, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestCategoryListCache#doTest(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void doTest(boolean withCache, boolean plantWrongData) throws Exception {\n    Map<CategoryPath,Integer> truth = facetCountsTruth();\n    CategoryPath cp = (CategoryPath) truth.keySet().toArray()[0]; // any category path will do for this test\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n    final CategoryListCache clCache;\n    if (withCache) {\n      //let's use a cached cl data\n      CategoryListParams clp = new CategoryListParams(); // default term ok as only single list\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, indexReader, taxoReader, iParams);\n      if (plantWrongData) {\n        // let's mess up the cached data and then expect a wrong result...\n        messCachedData(clCache, clp);\n      }\n    } else {\n      clCache = null;\n    }\n    List<FacetRequest> req = new ArrayList<FacetRequest>();\n    req.add(new CountFacetRequest(cp, 10));\n    final FacetSearchParams sParams = new FacetSearchParams(req, iParams) {\n      @Override\n      public CategoryListCache getCategoryListCache() {\n        return clCache;\n      }\n    };\n    FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader);\n    searcher.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> res = fc.getFacetResults();\n    try {\n      assertCountsAndCardinality(truth, res);\n      assertFalse(\"Correct results not expected when wrong data was cached\", plantWrongData);\n    } catch (Throwable e) {\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", withCache);\n      assertTrue(\"Wrong results not expected unless wrong data was cached\", plantWrongData);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}