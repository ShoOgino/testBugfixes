{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#twoPhaseIterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper previous = topScorers;\n          for (DisiWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper<Scorer> w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper<Scorer> topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper<Scorer> previous = topScorers;\n          for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac8ce4febd838561b4317a75f81313066e6d91c3","date":1449851410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return twoPhase;\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper previous = topScorers;\n          for (DisiWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac8ce4febd838561b4317a75f81313066e6d91c3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac8ce4febd838561b4317a75f81313066e6d91c3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"ac8ce4febd838561b4317a75f81313066e6d91c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}