{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n      Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n      Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n      exists = coreStatus != null && coreStatus.containsKey(NAME);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf","date":1452801849,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n      Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n      Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n      Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n      String errorMsg = (String) failureStatus.get(coreName);\n      exists = coreStatus != null && coreStatus.containsKey(NAME) || errorMsg != null;\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n      Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n      Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n      exists = coreStatus != null && coreStatus.containsKey(NAME);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6130fcaa36d42a71fc464c80399af8098c42de5a","date":1493878512,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n      Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n      Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n      Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n      String errorMsg = (String) failureStatus.get(coreName);\n      exists = coreStatus != null && coreStatus.containsKey(NAME) || errorMsg != null;\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n      Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n      Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n      Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n      String errorMsg = (String) failureStatus.get(coreName);\n      exists = coreStatus != null && coreStatus.containsKey(NAME) || errorMsg != null;\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#safeCheckCoreExists(String,String).mjava","sourceNew":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        @SuppressWarnings(\"unchecked\")\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","sourceOld":"  public static boolean safeCheckCoreExists(String coreStatusUrl, String coreName) {\n    boolean exists = false;\n    try {\n      boolean wait = false;\n      final long startWaitAt = System.nanoTime();\n      do{\n        if (wait) {\n          final int clamPeriodForStatusPollMs = 1000;\n          Thread.sleep(clamPeriodForStatusPollMs);\n        }\n        Map<String,Object> existsCheckResult = getJson(coreStatusUrl);\n        Map<String,Object> status = (Map<String, Object>)existsCheckResult.get(\"status\");\n        Map<String,Object> coreStatus = (Map<String, Object>)status.get(coreName);\n        Map<String,Object> failureStatus = (Map<String, Object>)existsCheckResult.get(\"initFailures\");\n        String errorMsg = (String) failureStatus.get(coreName);\n        final boolean hasName = coreStatus != null && coreStatus.containsKey(NAME);\n        exists = hasName || errorMsg != null;\n        wait = hasName && errorMsg==null && \"true\".equals(coreStatus.get(\"isLoading\"));\n      }while (wait &&\n          System.nanoTime() - startWaitAt < MAX_WAIT_FOR_CORE_LOAD_NANOS);\n    } catch (Exception exc) {\n      // just ignore it since we're only interested in a positive result here\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf","6130fcaa36d42a71fc464c80399af8098c42de5a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6130fcaa36d42a71fc464c80399af8098c42de5a","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6130fcaa36d42a71fc464c80399af8098c42de5a":["b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["6130fcaa36d42a71fc464c80399af8098c42de5a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6130fcaa36d42a71fc464c80399af8098c42de5a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b09d7cb8f3c2bf07ec3bc7a33ed04054deff20cf":["e9017cf144952056066919f1ebc7897ff9bd71b1","6130fcaa36d42a71fc464c80399af8098c42de5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"6130fcaa36d42a71fc464c80399af8098c42de5a":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ee8fbffa595c312bc0437f2c9bb6376a29c1b427","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}