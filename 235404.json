{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : 'replica:*,cores:<5', autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : 'replica:*,cores:<5', autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48419e0df1475bc7b18833208ff3ea0105f79c1b","date":1495161343,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : 'replica:*,cores:<5', autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : 'replica:*,cores:<5', autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();\n    ApiBag apiBag = new ApiBag(false);\n    Collection<Api> apis = collectionsHandler.getApis();\n    for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":["397b96a886ece05a1444aa3771e10825e1145c1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }\", null,\n        \"{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b6680904fafe5905f847812d32dc7ad79c96a0","date":1600243603,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler,null);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92d579a5d677457eb3cbac9551000f590be33b55","date":1600915032,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      apiBag.registerObject(new CollectionsAPI(collectionsHandler));\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler,null);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n    ApiBag apiBag;\n    try (MockCollectionsHandler collectionsHandler = new MockCollectionsHandler()) {\n      apiBag = new ApiBag(false);\n      Collection<Api> apis = collectionsHandler.getApis();\n      for (Api api : apis) apiBag.register(api, Collections.emptyMap());\n\n      ClusterAPI clusterAPI = new ClusterAPI(collectionsHandler,null);\n      apiBag.registerObject(clusterAPI);\n      apiBag.registerObject(clusterAPI.commands);\n    }\n    //test a simple create collection call\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n    \n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, nrtReplicas:2, tlogReplicas:2, pullReplicas:2 }}\", null,\n        \"{name:newcoll, fromApi:'true', nrtReplicas:'2', replicationFactor:'2', tlogReplicas:'2', pullReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create}\");\n\n    //test a create collection with custom properties\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}\", null,\n        \"{name:newcoll, fromApi:'true', replicationFactor:'2', nrtReplicas:'2', collection.configName:schemaless, numShards:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}\");\n\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{create-alias:{name: aliasName , collections:[c1,c2] }}\", null, \"{operation : createalias, name: aliasName, collections:[c1,c2] }\");\n\n    compareOutput(apiBag, \"/collections\", POST,\n        \"{delete-alias:{ name: aliasName}}\", null, \"{operation : deletealias, name: aliasName}\");\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{reload:{}}\", null,\n        \"{name:collName, operation :reload}\");\n\n    compareOutput(apiBag, \"/collections/collName\", DELETE,\n        null, null,\n        \"{name:collName, operation :delete}\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1 , operation :deleteshard }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true\", DELETE,\n        null, null,\n        \"{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }\");\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}\", null,\n        \"{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'TLOG' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: TLOG}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'PULL' }}\", null,\n        \"{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, type: PULL}\"\n    );\n    \n    assertErrorContains(apiBag, \"/collections/collName/shards\", POST,\n        \"{add-replica:{shard: shard1, node: 'localhost_8978' , type:'foo' }}\", null,\n        \"Value of enum must be one of\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }\", null,\n        \"{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}\"\n    );\n\n    compareOutput(apiBag, \"/collections/collName\", POST,\n        \"{modify : {rule : ['replica:*, cores:<5']} }\", null,\n        \"{collection: collName, operation : modifycollection , rule : [{replica: '*', cores : '<5' }]}\"\n    );\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{add-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : addrole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/cluster\", POST,\n        \"{remove-role : {role : overseer, node : 'localhost_8978'} }\", null,\n        \"{operation : removerole ,role : overseer, node : 'localhost_8978'}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{balance-shard-unique : {property: preferredLeader} }\", null,\n        \"{operation : balanceshardunique ,collection : coll1, property : preferredLeader}\"\n    );\n\n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }\", null,\n        \"{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}\"\n    );\n    \n    compareOutput(apiBag, \"/collections/coll1\", POST,\n        \"{set-collection-property : {name: 'foo', value:'bar'} }\", null,\n        \"{operation : collectionprop, name : coll1, propertyName:'foo', propertyValue:'bar'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["ba055e19afc289adcb5bedaf68513793a7254012"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["48419e0df1475bc7b18833208ff3ea0105f79c1b"],"397b96a886ece05a1444aa3771e10825e1145c1f":["de3459a54b4c8751d9ef19b035577e2418064be7"],"3f504512a03d978990cbff30db0522b354e846db":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["3f504512a03d978990cbff30db0522b354e846db"],"1852cb03cf4922477072449dd9de2fab588d1adb":["680b6449f09827f58fe987aff279e014c311d966"],"28288370235ed02234a64753cdbf0c6ec096304a":["48419e0df1475bc7b18833208ff3ea0105f79c1b","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["48419e0df1475bc7b18833208ff3ea0105f79c1b","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"48419e0df1475bc7b18833208ff3ea0105f79c1b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"680b6449f09827f58fe987aff279e014c311d966":["3f504512a03d978990cbff30db0522b354e846db","c0b6680904fafe5905f847812d32dc7ad79c96a0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["de3459a54b4c8751d9ef19b035577e2418064be7","397b96a886ece05a1444aa3771e10825e1145c1f"],"ba055e19afc289adcb5bedaf68513793a7254012":["397b96a886ece05a1444aa3771e10825e1145c1f"],"de3459a54b4c8751d9ef19b035577e2418064be7":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92d579a5d677457eb3cbac9551000f590be33b55":["1852cb03cf4922477072449dd9de2fab588d1adb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92d579a5d677457eb3cbac9551000f590be33b55"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["de3459a54b4c8751d9ef19b035577e2418064be7","397b96a886ece05a1444aa3771e10825e1145c1f"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["3f504512a03d978990cbff30db0522b354e846db"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"397b96a886ece05a1444aa3771e10825e1145c1f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba055e19afc289adcb5bedaf68513793a7254012","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3f504512a03d978990cbff30db0522b354e846db":["c0b6680904fafe5905f847812d32dc7ad79c96a0","680b6449f09827f58fe987aff279e014c311d966"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e9017cf144952056066919f1ebc7897ff9bd71b1","48419e0df1475bc7b18833208ff3ea0105f79c1b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"c0b6680904fafe5905f847812d32dc7ad79c96a0":["680b6449f09827f58fe987aff279e014c311d966"],"1852cb03cf4922477072449dd9de2fab588d1adb":["92d579a5d677457eb3cbac9551000f590be33b55"],"28288370235ed02234a64753cdbf0c6ec096304a":["de3459a54b4c8751d9ef19b035577e2418064be7"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"48419e0df1475bc7b18833208ff3ea0105f79c1b":["4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"680b6449f09827f58fe987aff279e014c311d966":["1852cb03cf4922477072449dd9de2fab588d1adb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ba055e19afc289adcb5bedaf68513793a7254012":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"de3459a54b4c8751d9ef19b035577e2418064be7":["397b96a886ece05a1444aa3771e10825e1145c1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"92d579a5d677457eb3cbac9551000f590be33b55":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}