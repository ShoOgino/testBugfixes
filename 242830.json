{"path":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","commits":[{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertEquals(nodeAddedName, doc.getFieldValue(\"event.property.nodeName_s\"));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac33581fb1b367872631f9f8502383b7c14c155","date":1503489920,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertEquals(nodeAddedName, doc.getFieldValue(\"event.property.nodeName_s\"));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b601288e006e49c9026865fcd27630ea3a9e532","date":1506112044,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    if (docs.size() != 8) {\n      zkClient().printLayoutToStdOut();\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_DIAGNOSTICS_PATH);\n      log.info(\"Diagnostic output: \", solrClient.query(query).getResponse());\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1731940c33a40712c51bf2f36ad3a8732f2143d1","date":1506533115,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = solrClient.query(query).getResults();\n    if (docs.size() != 8) {\n      zkClient().printLayoutToStdOut();\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_DIAGNOSTICS_PATH);\n      log.info(\"Diagnostic output: \", solrClient.query(query).getResponse());\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3cbda95649439c9769e17e19639b442eaa4666d","date":1507742760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    String node0Name = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"### Stopping node \" + node0Name);\n    cluster.stopJettySolrRunner(0);\n    log.info(\"### Stopped node \" + node0Name);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1ff601a12d12d08405c7e451d64604d94292953","date":1507795721,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    String node0Name = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"### Stopping node \" + node0Name);\n    cluster.stopJettySolrRunner(0);\n    log.info(\"### Stopped node \" + node0Name);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    cluster.stopJettySolrRunner(0);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    String node0Name = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"### Stopping node \" + node0Name);\n    cluster.stopJettySolrRunner(0);\n    log.info(\"### Stopped node \" + node0Name);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n    // todo remove this workaround after SOLR-9440\n    cluster.getSolrClient().getZkStateReader().registerCore(\".system\");\n    cluster.getSolrClient().getZkStateReader().registerCore(PREFIX + \"_collection\");\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    String node0Name = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"### Stopping node \" + node0Name);\n    cluster.stopJettySolrRunner(0);\n    log.info(\"### Stopped node \" + node0Name);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063","date":1519154132,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 5) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 5) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n\n    assertEquals(5, docs.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", PREFIX + \"_collection\",\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 3));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n    // commit on the history collection\n    Thread.sleep(2000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(2000);\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latch\n    resetLatch();\n\n    // kill a node\n    String node0Name = cluster.getJettySolrRunner(0).getNodeName();\n    log.info(\"### Stopping node \" + node0Name);\n    cluster.stopJettySolrRunner(0);\n    log.info(\"### Stopped node \" + node0Name);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(PREFIX + \"_collection\");\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, PREFIX + \"_collection\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b75f2455c630dc7bec970dca143c8eed7c0e813","date":1519649815,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    QueryResponse rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 8) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 5) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n    assertEquals(5, docs.size());\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    rsp = solrClient.query(query);\n    docs = rsp.getResults();\n    if (docs.size() != 5) {\n      log.info(\"Cluster state: \" + solrClient.getZkStateReader().getClusterState());\n      query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH);\n      log.info(\"Wrong response: \", rsp);\n      log.info(\"Full response: \" + solrClient.query(query));\n    }\n\n    assertEquals(5, docs.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab2f54aa3920f7b4a9b92e45334237f6427b20d3","date":1522384863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  // commented out 26-Mar-2018\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  // commented out 26-Mar-2018\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  // commented out 26-Mar-2018\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  // commented out 26-Mar-2018\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ac431b87e175f05332a264b139265fc338c053","date":1527623551,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes())) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94817e0018f71a66456868be09aae5da4e4c2664","date":1546444516,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    DocCollection system = state.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    Set<String> systemLeaderNodes;\n    if (system != null) {\n      systemLeaderNodes = system.getReplicas().stream()\n          .filter(r -> r.getBool(\"leader\", false))\n          .map(r -> r.getNodeName())\n          .collect(Collectors.toSet());\n    } else {\n      systemLeaderNodes = Collections.emptySet();\n    }\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        if (systemLeaderNodes.contains(r.getNodeName())) {\n          log.info(\"--skipping .system leader replica {}\", r);\n          continue;\n        }\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node {}\", nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    DocCollection system = state.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    Set<String> systemLeaderNodes;\n    if (system != null) {\n      systemLeaderNodes = system.getReplicas().stream()\n          .filter(r -> r.getBool(\"leader\", false))\n          .map(r -> r.getNodeName())\n          .collect(Collectors.toSet());\n    } else {\n      systemLeaderNodes = Collections.emptySet();\n    }\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        if (systemLeaderNodes.contains(r.getNodeName())) {\n          log.info(\"--skipping .system leader replica {}\", r);\n          continue;\n        }\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node {}\", nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node {}\", nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node \" + nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    DocCollection system = state.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    Set<String> systemLeaderNodes;\n    if (system != null) {\n      systemLeaderNodes = system.getReplicas().stream()\n          .filter(r -> r.getBool(\"leader\", false))\n          .map(r -> r.getNodeName())\n          .collect(Collectors.toSet());\n    } else {\n      systemLeaderNodes = Collections.emptySet();\n    }\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        if (systemLeaderNodes.contains(r.getNodeName())) {\n          log.info(\"--skipping .system leader replica {}\", r);\n          continue;\n        }\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node \" + nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node \" + nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#testHistory().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHistory() throws Exception {\n    waitForState(\"Timed out wait for collection be active\", COLL_NAME,\n        clusterShape(1, 3));\n    waitForState(\"Timed out wait for collection be active\", CollectionAdminParams.SYSTEM_COLL,\n        clusterShape(1, 1));\n\n    log.info(\"### Start add node...\");\n    JettySolrRunner jetty = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    String nodeAddedName = jetty.getNodeName();\n    log.info(\"### Added node {}\", nodeAddedName);\n    boolean await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    waitForRecovery(COLL_NAME);\n\n    // commit on the history collection\n    Thread.sleep(5000);\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    // verify that new docs exist\n    ModifiableSolrParams query = params(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE,\n      CommonParams.FQ, \"event.source_s:\" + PREFIX + \"_node_added_trigger\");\n    QueryResponse resp = solrClient.query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n      AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_added_trigger\");\n    docs = queryAndAssertDocs(query, solrClient, 8);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.STAGE_PARAM, \"STARTED\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(1, docs.size());\n    assertEquals(\"NODEADDED\", docs.get(0).getFieldValue(\"event.type_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.NODE_PARAM, nodeAddedName);\n    docs = queryAndAssertDocs(query, solrClient, 8);\n    for (SolrDocument doc : docs) {\n      assertTrue(doc.getFieldValues(\"event.property.nodeNames_ss\").contains(nodeAddedName));\n    }\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.ACTION_PARAM, \"test\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(2, docs.size());\n    assertEquals(\"BEFORE_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"AFTER_ACTION\", docs.get(1).getFieldValue(\"stage_s\"));\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n    assertEquals(\"AFTER_ACTION\", docs.get(0).getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", docs.get(0).getFieldValue(\"action_s\"));\n\n    // reset latches\n    resetLatches();\n\n    // kill a node where a replica exists - BUT not the Overseer\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    ClusterState state = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection coll = state.getCollection(COLL_NAME);\n    DocCollection system = state.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    Set<String> systemLeaderNodes;\n    if (system != null) {\n      systemLeaderNodes = system.getReplicas().stream()\n          .filter(r -> r.getBool(\"leader\", false))\n          .map(r -> r.getNodeName())\n          .collect(Collectors.toSet());\n    } else {\n      systemLeaderNodes = Collections.emptySet();\n    }\n    String nodeToKill = null;\n    for (Replica r : coll.getReplicas()) {\n      if (r.isActive(state.getLiveNodes()) &&\n          !r.getNodeName().equals(overseerLeader)) {\n        if (systemLeaderNodes.contains(r.getNodeName())) {\n          log.info(\"--skipping .system leader replica {}\", r);\n          continue;\n        }\n        nodeToKill = r.getNodeName();\n        break;\n      }\n    }\n    assertNotNull(\"no suitable node found\", nodeToKill);\n    log.info(\"### Stopping node {}\", nodeToKill);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(nodeToKill)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    log.info(\"### Stopped node {}\", nodeToKill);\n    await = actionFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not execute\", await);\n\n    await = listenerFiredLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"listener did not execute\", await);\n\n    // wait for recovery\n    waitForRecovery(COLL_NAME);\n\n    Thread.sleep(5000);\n    // commit on the history collection\n    log.info(\"### Commit .system\");\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n    Thread.sleep(5000);\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\");\n    docs = solrClient.query(query).getResults();\n    assertEquals(docs.toString(), 8, docs.size());\n\n    query = params(CommonParams.QT, CommonParams.AUTOSCALING_HISTORY_PATH,\n        AutoscalingHistoryHandler.TRIGGER_PARAM, PREFIX + \"_node_lost_trigger\",\n        AutoscalingHistoryHandler.COLLECTION_PARAM, COLL_NAME);\n    docs = queryAndAssertDocs(query, solrClient, 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1731940c33a40712c51bf2f36ad3a8732f2143d1"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0b75f2455c630dc7bec970dca143c8eed7c0e813"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["94817e0018f71a66456868be09aae5da4e4c2664"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2138c838f1c8052d94d61eb1e205dce7fa6932ef","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"94817e0018f71a66456868be09aae5da4e4c2664":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b75f2455c630dc7bec970dca143c8eed7c0e813":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2138c838f1c8052d94d61eb1e205dce7fa6932ef","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"3f504512a03d978990cbff30db0522b354e846db":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"fac33581fb1b367872631f9f8502383b7c14c155":["3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1731940c33a40712c51bf2f36ad3a8732f2143d1":["1b601288e006e49c9026865fcd27630ea3a9e532"],"e1ff601a12d12d08405c7e451d64604d94292953":["560c18d71dad43d675158783c3840f8c80d6d39c","f3cbda95649439c9769e17e19639b442eaa4666d"],"6b87d1f8719d7f05be003f3477450b74af13706a":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"1b601288e006e49c9026865fcd27630ea3a9e532":["fac33581fb1b367872631f9f8502383b7c14c155"],"f3cbda95649439c9769e17e19639b442eaa4666d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["e1ff601a12d12d08405c7e451d64604d94292953"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"75ac431b87e175f05332a264b139265fc338c053":["6b87d1f8719d7f05be003f3477450b74af13706a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["6b87d1f8719d7f05be003f3477450b74af13706a","75ac431b87e175f05332a264b139265fc338c053"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["94817e0018f71a66456868be09aae5da4e4c2664"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["3f504512a03d978990cbff30db0522b354e846db"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"94817e0018f71a66456868be09aae5da4e4c2664":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"0b75f2455c630dc7bec970dca143c8eed7c0e813":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e1ff601a12d12d08405c7e451d64604d94292953","f3cbda95649439c9769e17e19639b442eaa4666d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fac33581fb1b367872631f9f8502383b7c14c155":["1b601288e006e49c9026865fcd27630ea3a9e532"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["fac33581fb1b367872631f9f8502383b7c14c155"],"1731940c33a40712c51bf2f36ad3a8732f2143d1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e1ff601a12d12d08405c7e451d64604d94292953":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"6b87d1f8719d7f05be003f3477450b74af13706a":["75ac431b87e175f05332a264b139265fc338c053","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063":["0b75f2455c630dc7bec970dca143c8eed7c0e813"],"1b601288e006e49c9026865fcd27630ea3a9e532":["1731940c33a40712c51bf2f36ad3a8732f2143d1"],"f3cbda95649439c9769e17e19639b442eaa4666d":["e1ff601a12d12d08405c7e451d64604d94292953"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["9a8dc3df9d0e1b412e951ff68a2f0a6a0538d063"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"75ac431b87e175f05332a264b139265fc338c053":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}