{"path":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getLatestSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getLatestSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getLatestSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = bq.clauses();\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req(\"df\", \"text\");\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, QueryParsing.getDefaultField(req.getSchema(), req.getParams().get(\"df\")));\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 qp.getDefaultField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getLatestSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req(\"df\", \"text\");\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getParams().get(\"df\"));\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 qp.getDefaultField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req(\"df\", \"text\");\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, QueryParsing.getDefaultField(req.getSchema(), req.getParams().get(\"df\")));\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 qp.getDefaultField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDisjunctionMaxQueryParser().mjava","sourceNew":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req(\"df\", \"text\");\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getParams().get(\"df\"));\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 qp.getDefaultField(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","sourceOld":"  @Test  \n  public void testDisjunctionMaxQueryParser() throws Exception {\n        \n    Query out;\n    String t;\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"hi\", \"dismax\", req);\n\n    DisjunctionMaxQueryParser qp =\n      new SolrPluginUtils.DisjunctionMaxQueryParser(qparser, req.getSchema().getDefaultSearchFieldName());\n\n    qp.addAlias(\"hoss\", 0.01f, SolrPluginUtils.parseFieldBoosts\n                (\"title^2.0 title_stemmed name^1.2 subject^0.5\"));\n    qp.addAlias(\"test\", 0.01f, SolrPluginUtils.parseFieldBoosts(\"text^2.0\"));\n    qp.addAlias(\"unused\", 1.0f, SolrPluginUtils.parseFieldBoosts\n                (\"subject^0.5 sind^1.5\"));\n                     \n\n    /* first some sanity tests that don't use aliasing at all */\n\n    t = \"XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\",\n                 h.getCore().getLatestSchema().getDefaultSearchFieldName(),\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((TermQuery)out).getTerm().field());\n\n    /* field has untokenzied type, so this should be a term anyway */\n    t = \"sind:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't TermQuery: \" + out.getClass(),\n               out instanceof TermQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"sind\",\n                 ((TermQuery)out).getTerm().field());\n\n    t = \"subject:\\\"simple phrase\\\"\";\n    out = qp.parse(t);\n    assertNotNull(t+\" sanity test gave back null\", out);\n    assertTrue(t+\" sanity test isn't PhraseQuery: \" + out.getClass(),\n               out instanceof PhraseQuery);\n    assertEquals(t+\" sanity test is wrong field\", \"subject\",\n                 ((PhraseQuery)out).getTerms()[0].field());\n\n        \n    /* now some tests that use aliasing */\n\n    /* basic usage of single \"term\" */\n    t = \"hoss:XXXXXXXX\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 4,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n\n    /* odd case, but should still work, DMQ of one clause */\n    t = \"test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a DMQ:\" + out.getClass(),\n               out instanceof DisjunctionMaxQuery);\n    assertEquals(t+\" wrong number of clauses\", 1,\n                 countItems(((DisjunctionMaxQuery)out).iterator()));\n        \n    /* basic usage of multiple \"terms\" */\n    t = \"hoss:XXXXXXXX test:YYYYY\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses\", 1,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n            \n    /* a phrase, and a term that is a stop word for some fields */\n    t = \"hoss:\\\"XXXXXX YYYYY\\\" hoss:the\";\n    out = qp.parse(t);\n    assertNotNull(t+\" was null\", out);\n    assertTrue(t+\" wasn't a boolean:\" + out.getClass(),\n               out instanceof BooleanQuery);\n    {\n      BooleanQuery bq = (BooleanQuery)out;\n      List<BooleanClause> clauses = new ArrayList<>(bq.clauses());\n      assertEquals(t+\" wrong number of clauses\", 2,\n                   clauses.size());\n      Query sub = clauses.get(0).getQuery();\n      assertTrue(t+\" first wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" first had wrong number of clauses\", 4,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n      sub = clauses.get(1).getQuery();\n      assertTrue(t+\" second wasn't a DMQ:\" + sub.getClass(),\n                 sub instanceof DisjunctionMaxQuery);\n      assertEquals(t+\" second had wrong number of clauses (stop words)\", 2,\n                   countItems(((DisjunctionMaxQuery)sub).iterator()));\n    }\n        \n\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["08970e5b8411182a29412c177eff67ec1110095b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a144790859eb303122988cd315215ff30f449d2":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["1a144790859eb303122988cd315215ff30f449d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1a144790859eb303122988cd315215ff30f449d2":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08970e5b8411182a29412c177eff67ec1110095b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}