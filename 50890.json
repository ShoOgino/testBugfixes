{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(SolrIndexSearcher,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(SolrIndexSearcher,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","pathOld":"/dev/null","sourceNew":"    public FloatValueCollapse(SolrIndexSearcher searcher,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(searcher, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceae51e37bbff02dcdeaa12303fec10d3eaaa004","date":1387382773,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(int,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(SolrIndexSearcher,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","sourceNew":"    public FloatValueCollapse(int maxDoc,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(maxDoc, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","sourceOld":"    public FloatValueCollapse(SolrIndexSearcher searcher,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(searcher, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.FloatValueCollapse#FloatValueCollapse(SolrIndexSearcher,String,int,int[],boolean,boolean,IntOpenHashSet).mjava","sourceNew":null,"sourceOld":"    public FloatValueCollapse(SolrIndexSearcher searcher,\n                              String field,\n                              int nullPolicy,\n                              int[] ords,\n                              boolean max,\n                              boolean needsScores,\n                              IntOpenHashSet boostDocs) throws IOException {\n      super(searcher, field, nullPolicy, max, needsScores, boostDocs);\n      this.ords = ords;\n      this.ordVals = new float[ords.length];\n      Arrays.fill(ords, -1);\n\n      if(max) {\n        comp = new MaxFloatComp();\n        Arrays.fill(ordVals, -Float.MAX_VALUE );\n      } else {\n        this.nullVal = Float.MAX_VALUE;\n        comp = new MinFloatComp();\n        Arrays.fill(ordVals, Float.MAX_VALUE);\n      }\n\n      if(needsScores) {\n        this.scores = new float[ords.length];\n        if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          nullScores = new FloatArrayList();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceae51e37bbff02dcdeaa12303fec10d3eaaa004"]},"commit2Childs":{"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ceae51e37bbff02dcdeaa12303fec10d3eaaa004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ceae51e37bbff02dcdeaa12303fec10d3eaaa004":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}