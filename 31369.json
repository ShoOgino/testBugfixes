{"path":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void add(int docID, long v) throws IOException {\n\n      if (!started) {\n        minValue = maxValue = v;\n        minDocID = maxDocID = docID;\n        started = true;\n\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n        if (docID < minDocID) {\n          minDocID = docID;\n        } else if (docID > maxDocID) {\n          maxDocID = docID;\n        }\n      }\n      if (docID >= docToValue.length) {\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, long v) throws IOException {\n\n      if (!started) {\n        minValue = maxValue = v;\n        minDocID = maxDocID = docID;\n        started = true;\n\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n        if (docID < minDocID) {\n          minDocID = docID;\n        } else if (docID > maxDocID) {\n          maxDocID = docID;\n        }\n      }\n      if (docID >= docToValue.length) {\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length ;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length ;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    public synchronized void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      defaultValues.set(docID);\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        defaultValues.ensureCapacity(docToValue.length);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#add(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#add(int,long).mjava","sourceNew":"    @Override\n    public void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, long v) throws IOException {\n      assert lastDocId < docID;\n      if (!started) {\n        started = true;\n        minValue = maxValue = v;\n      } else {\n        if (v < minValue) {\n          minValue = v;\n        } else if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n      lastDocId = docID;\n\n      if (docID >= docToValue.length) {\n        final long len = docToValue.length;\n        docToValue = ArrayUtil.grow(docToValue, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG\n            * ((docToValue.length) - len));\n      }\n      docToValue[docID] = v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"605b061fadf71aa6458c0005eaae83a98350c403":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"605b061fadf71aa6458c0005eaae83a98350c403":[],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["605b061fadf71aa6458c0005eaae83a98350c403","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}