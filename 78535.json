{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,Object,FieldType).mjava","commits":[{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,Object,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newField(Random,String,String,FieldType).mjava","sourceNew":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, Object value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return createField(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return createField(name, value, newType);\n  }\n\n","sourceOld":"  // TODO: if we can pull out the \"make term vector options\n  // consistent across all instances of the same field name\"\n  // write-once schema sort of helper class then we can\n  // remove the sync here.  We can also fold the random\n  // \"enable norms\" (now commented out, below) into that:\n  public synchronized static Field newField(Random random, String name, String value, FieldType type) {\n\n    // Defeat any consumers that illegally rely on intern'd\n    // strings (we removed this from Lucene a while back):\n    name = new String(name);\n\n    FieldType prevType = fieldToType.get(name);\n\n    if (usually(random) || type.indexOptions() == IndexOptions.NONE || prevType != null) {\n      // most of the time, don't modify the params\n      if (prevType == null) {\n        fieldToType.put(name, new FieldType(type));\n      } else {\n        type = mergeTermVectorOptions(type, prevType);\n      }\n\n      return new Field(name, value, type);\n    }\n\n    // TODO: once all core & test codecs can index\n    // offsets, sometimes randomly turn on offsets if we are\n    // already indexing positions...\n\n    FieldType newType = new FieldType(type);\n    if (!newType.stored() && random.nextBoolean()) {\n      newType.setStored(true); // randomly store it\n    }\n\n    // Randomly turn on term vector options, but always do\n    // so consistently for the same field name:\n    if (!newType.storeTermVectors() && random.nextBoolean()) {\n      newType.setStoreTermVectors(true);\n      if (!newType.storeTermVectorPositions()) {\n        newType.setStoreTermVectorPositions(random.nextBoolean());\n        \n        if (newType.storeTermVectorPositions()) {\n          if (!newType.storeTermVectorPayloads()) {\n            newType.setStoreTermVectorPayloads(random.nextBoolean());\n          }\n        }\n      }\n      \n      if (!newType.storeTermVectorOffsets()) {\n        newType.setStoreTermVectorOffsets(random.nextBoolean());\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"NOTE: LuceneTestCase: upgrade name=\" + name + \" type=\" + newType);\n      }\n    }\n    newType.freeze();\n    fieldToType.put(name, newType);\n\n    // TODO: we need to do this, but smarter, ie, most of\n    // the time we set the same value for a given field but\n    // sometimes (rarely) we change it up:\n    /*\n    if (newType.omitNorms()) {\n      newType.setOmitNorms(random.nextBoolean());\n    }\n    */\n    \n    return new Field(name, value, newType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d127639ae13222a8545b50e0ac545a6bcd2d7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}