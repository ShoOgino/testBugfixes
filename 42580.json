{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitLongRange().mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitLongRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60dca40a2dbc1f396046c3f87a7a03a995cd157","date":1239722886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitLongRange().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      new Long(0x800000000000251cL),new Long(0x800000000000251cL)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitLongRange().mjava","sourceNew":null,"sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),\n      new Long(0x8000000000002510L),new Long(0x800000000000251cL),\n      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),\n      new Long(0x800000000000250L), new Long(0x800000000000250L),\n      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),\n      new Long(0x80000000000020L),  new Long(0x80000000000024L),\n      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{\n      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{\n      new Long(0x800000000000040L), new Long(0x800000000000043L),\n      new Long(0x80000000000000L),  new Long(0x80000000000003L)\n    }).iterator());\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{\n      new Long(0x00L),new Long(0xffL)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0xfL)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x3L)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{\n      new Long(0x0L),new Long(0x1L)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{\n      new Long(0x800000000000251cL),new Long(0x800000000000251cL)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}