{"path":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}