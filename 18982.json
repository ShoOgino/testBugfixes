{"path":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"/dev/null","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, PostingsEnum.FLAG_FREQS), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, PostingsEnum.FLAG_NONE), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, PostingsEnum.FLAG_FREQS), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, PostingsEnum.FLAG_NONE), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq, 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.COMPLETE), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.COMPLETE), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, true), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, false), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.COMPLETE), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits.value); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.COMPLETE), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708f948b384f9aa85c665caee4486eb2d9e197d","date":1533106881,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNeedsScores#testProhibitedClause().mjava","sourceNew":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.TOP_SCORES), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits.value); // we exclude 3\n  }\n\n","sourceOld":"  /** prohibited clauses in booleanquery don't need scoring */\n  public void testProhibitedClause() throws Exception {\n    Query required = new TermQuery(new Term(\"field\", \"this\"));\n    Query prohibited = new TermQuery(new Term(\"field\", \"3\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new AssertNeedsScores(required, ScoreMode.COMPLETE), BooleanClause.Occur.MUST);\n    bq.add(new AssertNeedsScores(prohibited, ScoreMode.COMPLETE_NO_SCORES), BooleanClause.Occur.MUST_NOT);\n    assertEquals(4, searcher.search(bq.build(), 5).totalHits.value); // we exclude 3\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"954e59be3da8dc1b046646ad7af4b466852009d3":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"417142ff08fda9cf0b72d5133e63097a166c6458":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}