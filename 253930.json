{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitAfterFailedSplit().mjava","commits":[{"id":"0bf7adf1ef036dfc4a41cfc97d66997a0d54a0ca","date":1534412996,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitAfterFailedSplit().mjava","pathOld":"/dev/null","sourceNew":"  private void splitAfterFailedSplit() throws KeeperException, InterruptedException {\n    try {\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      splitShard.setShardName(SHARD1);\n      splitShard.process(cloudClient);\n      fail(\"Shard split was not supposed to succeed after failure injection!\");\n    } catch (Exception e) {\n      // expected\n    }\n\n    // assert that sub-shards cores exist and sub-shard is in construction state\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n    ClusterState state = zkStateReader.getClusterState();\n    DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n\n    // should be cleaned up\n    Slice shard10 = collection.getSlice(SHARD1_0);\n    assertNull(shard10);\n\n    Slice shard11 = collection.getSlice(SHARD1_1);\n    assertNull(shard11);\n\n    // lets retry the split\n    TestInjection.reset(); // let the split succeed\n    try {\n      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);\n      splitShard.setShardName(SHARD1);\n      splitShard.process(cloudClient);\n      // Yay!\n    } catch (Exception e) {\n      log.error(\"Shard split failed\", e);\n      fail(\"Shard split did not succeed after a previous failed split attempt left sub-shards in construction state\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bf7adf1ef036dfc4a41cfc97d66997a0d54a0ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bf7adf1ef036dfc4a41cfc97d66997a0d54a0ca"]},"commit2Childs":{"0bf7adf1ef036dfc4a41cfc97d66997a0d54a0ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bf7adf1ef036dfc4a41cfc97d66997a0d54a0ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}