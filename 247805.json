{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#getCodec().mjava","sourceNew":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointFormat#TestLucene60PointFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","sourceNew":"  public TestLucene60PointFormat() {\n    // standard issue\n    Codec defaultCodec = TestUtil.getDefaultCodec();\n    if (random().nextBoolean()) {\n      // randomize parameters\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 3.0 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      // sneaky impersonation!\n      codec = new FilterCodec(defaultCodec.getName(), defaultCodec) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      // standard issue\n      codec = defaultCodec;\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","25b2820b242e28867a2f4edae536382216c511dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d15e34266d75e4e8b95da046cd0afc812367b38"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}