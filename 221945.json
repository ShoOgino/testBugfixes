{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#shutdown(boolean).mjava","commits":[{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#shutdown(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Gracefully shut down this {@code IndexWriter}\n   *  instance, with control over whether to wait for\n   *  merges.  See {@link #shutdown()}. */\n  public void shutdown(boolean waitForMerges) throws IOException {\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"cannot shutdown: prepareCommit was already called with no corresponding call to commit\");\n    }\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now flush at shutdown\");\n    }\n    boolean success = false;\n    try {\n      flush(waitForMerges, true);\n      finishMerges(waitForMerges);\n      commit();\n      // TODO: we could just call rollback, but ... it's nice\n      // to catch IW bugs where after waitForMerges/commit we\n      // still have running merges / uncommitted changes, or\n      // tests that illegally leave threads indexing and then\n      // try to use shutdown:\n      close();\n      success = true;\n    } finally {\n      if (success == false) {\n        // Be certain to close the index on any exception\n        try {\n          rollback();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#shutdown(boolean).mjava","sourceNew":null,"sourceOld":"  /** Gracefully shut down this {@code IndexWriter}\n   *  instance, with control over whether to wait for\n   *  merges.  See {@link #shutdown()}. */\n  public void shutdown(boolean waitForMerges) throws IOException {\n    if (pendingCommit != null) {\n      throw new IllegalStateException(\"cannot shutdown: prepareCommit was already called with no corresponding call to commit\");\n    }\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"now flush at shutdown\");\n    }\n    boolean success = false;\n    try {\n      flush(waitForMerges, true);\n      finishMerges(waitForMerges);\n      commit();\n      // TODO: we could just call rollback, but ... it's nice\n      // to catch IW bugs where after waitForMerges/commit we\n      // still have running merges / uncommitted changes, or\n      // tests that illegally leave threads indexing and then\n      // try to use shutdown:\n      close();\n      success = true;\n    } finally {\n      if (success == false) {\n        // Be certain to close the index on any exception\n        try {\n          rollback();\n        } catch (Throwable t) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}