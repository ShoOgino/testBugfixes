{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,Config,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, Config cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String rawName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"name\", null), new Properties());\n      String instanceDir = DOMUtil.getAttr(node, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = DOMUtil.substituteProperty(DOMUtil.getAttr(node, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    \n    log.info(\"bootstraping config for \" + allCoreNames.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      System.out.println(\"idir:\" + idir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    log.info(\"bootstraping config into ZooKeeper using solr.xml\");\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    \n    log.info(\"bootstraping config for \" + allCoreNames.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      System.out.println(\"idir:\" + idir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,ConfigSolr,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, ConfigSolr cfg, String solrHome) throws IOException,\n      KeeperException, InterruptedException {\n\n    List<String> allCoreNames = cfg.getAllCoreNames();\n    \n    log.info(\"bootstraping config for \" + allCoreNames.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (String coreName : allCoreNames) {\n      String rawName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"name\", null), new Properties());\n      String instanceDir = cfg.getProperty(coreName, \"instanceDir\", null);\n      File idir = new File(instanceDir);\n      System.out.println(\"idir:\" + idir);\n      if (!idir.isAbsolute()) {\n        idir = new File(solrHome, instanceDir);\n      }\n      String confName = PropertiesUtil.substituteProperty(cfg.getProperty(coreName, \"collection\", null), new Properties());\n      if (confName == null) {\n        confName = rawName;\n      }\n      File udir = new File(idir, \"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + rawName);\n      ZkController.uploadConfigDir(zkClient, udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["a837c064b67fa63a9394136e31218b908cdcf783"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}