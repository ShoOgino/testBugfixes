{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":1,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start);\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getBinary(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start);\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getBinary(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start);\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getBinary(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start);\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getBinary(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cb6df494f10aeb3fab477b1ce4a9187455a227","date":1574155024,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addBinaryField(FieldInfo,DocValuesProducer).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    meta.writeInt(field.number);\n    meta.writeByte(Lucene70DocValuesFormat.BINARY);\n\n    BinaryDocValues values = valuesProducer.getBinary(field);\n    long start = data.getFilePointer();\n    meta.writeLong(start);\n    int numDocsWithField = 0;\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      numDocsWithField++;\n      BytesRef v = values.binaryValue();\n      int length = v.length;\n      data.writeBytes(v.bytes, v.offset, v.length);\n      minLength = Math.min(length, minLength);\n      maxLength = Math.max(length, maxLength);\n    }\n    assert numDocsWithField <= maxDoc;\n    meta.writeLong(data.getFilePointer() - start);\n\n    if (numDocsWithField == 0) {\n      meta.writeLong(-2);\n      meta.writeLong(0L);\n    } else if (numDocsWithField == maxDoc) {\n      meta.writeLong(-1);\n      meta.writeLong(0L);\n    } else {\n      long offset = data.getFilePointer();\n      meta.writeLong(offset);\n      values = valuesProducer.getBinary(field);\n      IndexedDISI.writeBitSet(values, data);\n      meta.writeLong(data.getFilePointer() - offset);\n    }\n\n    meta.writeInt(numDocsWithField);\n    meta.writeInt(minLength);\n    meta.writeInt(maxLength);\n    if (maxLength > minLength) {\n      start = data.getFilePointer();\n      meta.writeLong(start);\n      meta.writeVInt(DIRECT_MONOTONIC_BLOCK_SHIFT);\n\n      final DirectMonotonicWriter writer = DirectMonotonicWriter.getInstance(meta, data, numDocsWithField + 1, DIRECT_MONOTONIC_BLOCK_SHIFT);\n      long addr = 0;\n      writer.add(addr);\n      values = valuesProducer.getBinary(field);\n      for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n        addr += values.binaryValue().length;\n        writer.add(addr);\n      }\n      writer.finish();\n      meta.writeLong(data.getFilePointer() - start);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cb6df494f10aeb3fab477b1ce4a9187455a227"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","57cb6df494f10aeb3fab477b1ce4a9187455a227"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"57cb6df494f10aeb3fab477b1ce4a9187455a227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}