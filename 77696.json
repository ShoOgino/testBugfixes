{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link Searcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link Searcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link Searcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);\n        Scorer scorer = weight.scorer(leafContexts[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        Scorer scorer = weight.scorer(leafContexts[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);\n        Scorer scorer = weight.scorer(leafContexts[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i].reader, leafContexts[i].docBase);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leafContexts[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        Scorer scorer = weight.scorer(leafContexts[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leafContexts[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leaves[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        searchWithFilter(leaves[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leafContexts[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link Searcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leaves[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leaves.length; i++) { // search each subreader\n        collector.setNextReader(leaves[i]);\n        searchWithFilter(leaves[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * Collector-based access to remote indexes is discouraged.\n   * \n   * <p>\n   * Applications should only use this if they need <i>all</i> of the matching\n   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is\n   * usually more efficient, as it skips non-high-scoring hits.\n   * \n   * @param weight\n   *          to match documents\n   * @param filter\n   *          if non-null, used to permit documents to be collected.\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);\n    // always use single thread:\n    if (filter == null) {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());\n        Scorer scorer = weight.scorer(leafContexts[i], scorerContext);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < leafContexts.length; i++) { // search each subreader\n        collector.setNextReader(leafContexts[i]);\n        searchWithFilter(leafContexts[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"323f871ffe96b871d8c534a614be60751bb023c2":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["323f871ffe96b871d8c534a614be60751bb023c2"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","30da203d7de68a87a16025523a483a96c24f4291"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"30da203d7de68a87a16025523a483a96c24f4291":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30da203d7de68a87a16025523a483a96c24f4291"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"323f871ffe96b871d8c534a614be60751bb023c2":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"30da203d7de68a87a16025523a483a96c24f4291":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}