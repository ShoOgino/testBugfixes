{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32c7218952a3082e8be4be1a325fd217603f365","date":1363034315,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      for(int i=0;i<strippedWord.length;){\n        i += Character.toChars(\n              Character.toLowerCase(charUtils.codePointAt(strippedWord, i)), strippedWord, i);\n      }\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"765dd1af5470eb0ccafa626a8442dec4b7495a19","date":1374166958,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < RECURSION_CAP) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#applyAffix(char[],int,HunspellAffix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  @SuppressWarnings(\"unchecked\")\n  public List<Stem> applyAffix(char strippedWord[], int length, HunspellAffix affix, int recursionDepth) {\n    if(dictionary.isIgnoreCase()) {\n      charUtils.toLowerCase(strippedWord, 0, strippedWord.length);\n    }\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.EMPTY_LIST;\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    List<HunspellWord> words = dictionary.lookupWord(strippedWord, 0, length);\n    if (words != null) {\n      for (HunspellWord hunspellWord : words) {\n        if (hunspellWord.hasFlag(affix.getFlag())) {\n          stems.add(new Stem(strippedWord, length));\n        }\n      }\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["765dd1af5470eb0ccafa626a8442dec4b7495a19","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"a32c7218952a3082e8be4be1a325fd217603f365":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["765dd1af5470eb0ccafa626a8442dec4b7495a19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a32c7218952a3082e8be4be1a325fd217603f365"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"765dd1af5470eb0ccafa626a8442dec4b7495a19":["a32c7218952a3082e8be4be1a325fd217603f365"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a32c7218952a3082e8be4be1a325fd217603f365"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a32c7218952a3082e8be4be1a325fd217603f365":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","765dd1af5470eb0ccafa626a8442dec4b7495a19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"765dd1af5470eb0ccafa626a8442dec4b7495a19":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}