{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (new Searchable[] { searchX, searchY });\n    runMultiSorts(searcher, false);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (new Searchable[] { searchX, searchY });\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (searchX, searchY);\n    runMultiSorts(searcher, false);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (new Searchable[] { searchX, searchY });\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (searchX, searchY);\n    runMultiSorts(searcher, false);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (new Searchable[] { searchX, searchY });\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (searchX, searchY);\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (searchX, searchY);\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    Searcher searcher = new ParallelMultiSearcher (new Searchable[] { searchX, searchY });\n    runMultiSorts(searcher, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    Searcher searcher = new ParallelMultiSearcher (exec, searchX, searchY);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    searcher.close();\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(\n                                       new IndexReader[] {searchX.getIndexReader(),\n                                                          searchY.getIndexReader()}), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}