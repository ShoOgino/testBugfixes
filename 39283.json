{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method that returns a random generated GeoPoint under given constraints. Returns\n   * NULL if it cannot find a point under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPoint.\n   */\n  public GeoPoint randomGeoPoint(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_POINT_ITERATIONS) {\n      double lat = randomDouble();\n      if (Math.PI/2 - Math.abs(lat)  <0){\n        continue;\n      }\n      double lon =  randomDouble();\n      if (Math.PI - Math.abs(lat)   <0){\n        continue;\n      }\n      iterations++;\n      GeoPoint point = new GeoPoint(planetModel, lat, lon);\n      if (constraints.isWithin(point)) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a90fb0b4d7fdac862e7005ea75dc327eb158d3","date":1505375514,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated GeoPoint under given constraints. Returns\n   * NULL if it cannot find a point under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPoint.\n   */\n  public GeoPoint randomGeoPoint(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_POINT_ITERATIONS) {\n      double lat = randomDouble() * Math.PI/2;\n      if (random().nextBoolean()) {\n        lat = (-1)*lat;\n      }\n      double lon =  randomDouble() * Math.PI;\n      if (random().nextBoolean()) {\n        lon = (-1)*lon;\n      }\n      iterations++;\n      GeoPoint point = new GeoPoint(planetModel, lat, lon);\n      if (constraints.isWithin(point)) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated GeoPoint under given constraints. Returns\n   * NULL if it cannot find a point under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPoint.\n   */\n  public GeoPoint randomGeoPoint(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_POINT_ITERATIONS) {\n      double lat = randomDouble();\n      if (Math.PI/2 - Math.abs(lat)  <0){\n        continue;\n      }\n      double lon =  randomDouble();\n      if (Math.PI - Math.abs(lat)   <0){\n        continue;\n      }\n      iterations++;\n      GeoPoint point = new GeoPoint(planetModel, lat, lon);\n      if (constraints.isWithin(point)) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator#randomGeoPoint(PlanetModel,Constraints).mjava","sourceNew":"  /**\n   * Method that returns a random generated GeoPoint under given constraints. Returns\n   * NULL if it cannot find a point under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPoint.\n   */\n  public GeoPoint randomGeoPoint(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_POINT_ITERATIONS) {\n      double lat = randomDouble() * Math.PI/2;\n      if (random().nextBoolean()) {\n        lat = (-1)*lat;\n      }\n      double lon =  randomDouble() * Math.PI;\n      if (random().nextBoolean()) {\n        lon = (-1)*lon;\n      }\n      iterations++;\n      GeoPoint point = new GeoPoint(planetModel, lat, lon);\n      if (constraints.isWithin(point)) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Method that returns a random generated GeoPoint under given constraints. Returns\n   * NULL if it cannot find a point under the given constraints.\n   *\n   * @param planetModel The planet model.\n   * @param constraints The given constraints.\n   * @return The random generated GeoPoint.\n   */\n  public GeoPoint randomGeoPoint(PlanetModel planetModel, Constraints constraints) {\n    int iterations = 0;\n    while (iterations < MAX_POINT_ITERATIONS) {\n      double lat = randomDouble();\n      if (Math.PI/2 - Math.abs(lat)  <0){\n        continue;\n      }\n      double lon =  randomDouble();\n      if (Math.PI - Math.abs(lat)   <0){\n        continue;\n      }\n      iterations++;\n      GeoPoint point = new GeoPoint(planetModel, lat, lon);\n      if (constraints.isWithin(point)) {\n        return point;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a90fb0b4d7fdac862e7005ea75dc327eb158d3":["f215583134d6d66410e3c48b32282e3eb9d5fcde"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6a90fb0b4d7fdac862e7005ea75dc327eb158d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a90fb0b4d7fdac862e7005ea75dc327eb158d3"]},"commit2Childs":{"b6a90fb0b4d7fdac862e7005ea75dc327eb158d3":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["b6a90fb0b4d7fdac862e7005ea75dc327eb158d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}