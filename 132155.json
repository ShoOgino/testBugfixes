{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","commits":[{"id":"9fb2c11bd0a5a7bef41cee10608d4429e976c528","date":1381463622,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47c249ea6af39c2da32cebcf113b7ac5c12bad8","date":1398390859,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(TokenStream,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CodepointCountFilter#CodepointCountFilter(Version,TokenStream,int,int).mjava","sourceNew":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(TokenStream in, int min, int max) {\n    super(in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CodepointCountFilter}. This will filter out tokens whose\n   * {@link CharTermAttribute} is either too short ({@link Character#codePointCount(char[], int, int)}\n   * &lt; min) or too long ({@link Character#codePointCount(char[], int, int)} &gt; max).\n   * @param version the Lucene match version\n   * @param in      the {@link TokenStream} to consume\n   * @param min     the minimum length\n   * @param max     the maximum length\n   */\n  public CodepointCountFilter(Version version, TokenStream in, int min, int max) {\n    super(version, in);\n    if (min < 0) {\n      throw new IllegalArgumentException(\"minimum length must be greater than or equal to zero\");\n    }\n    if (min > max) {\n      throw new IllegalArgumentException(\"maximum length must not be greater than minimum length\");\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["9fb2c11bd0a5a7bef41cee10608d4429e976c528","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["ff4227bb146f97aabae888091c19e48c88dbb0db","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}