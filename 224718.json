{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,PostingsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final PostingsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}