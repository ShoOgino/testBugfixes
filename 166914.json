{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getStartPoints().mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getStartPoints().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}