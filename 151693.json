{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9069c2e665572658f846820b6cb8ad53de19df0","date":1276611358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copyUsingLengthPrefix(BytesRef).mjava","sourceNew":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","sourceOld":"  /** Copy bytes in, writing the length as a 1 or 2 byte\n   *  vInt prefix. */\n  public long copyUsingLengthPrefix(BytesRef bytes) throws IOException {\n\n    if (upto + bytes.length + 2 > blockSize) {\n      if (bytes.length + 2 > blockSize) {\n        throw new IllegalArgumentException(\"block size \" + blockSize + \" is too small to store length \" + bytes.length + \" bytes\");\n      }\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);        \n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n    }\n\n    final long pointer = getPointer();\n\n    if (bytes.length < 128) {\n      currentBlock[upto++] = (byte) bytes.length;\n    } else {\n      currentBlock[upto++] = (byte) (0x80 | (bytes.length >> 8));\n      currentBlock[upto++] = (byte) (bytes.length & 0xff);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n\n    return pointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e9069c2e665572658f846820b6cb8ad53de19df0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","e9069c2e665572658f846820b6cb8ad53de19df0"],"e9069c2e665572658f846820b6cb8ad53de19df0":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["5f4e87790277826a2aea119328600dfb07761f32","e9069c2e665572658f846820b6cb8ad53de19df0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e9069c2e665572658f846820b6cb8ad53de19df0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}