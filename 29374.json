{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","pathOld":"/dev/null","sourceNew":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    long start = System.currentTimeMillis();\n\n    while ((System.currentTimeMillis() - start) < timeoutMs) {\n      if (checkAppearOnce() &&\n          checkElectionZero() &&\n          checkZkLeadersAgree()) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    fail(\"Checking the rebalance leader command failed\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","sourceNew":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n\n    while (! timeout.hasTimedOut()) {\n      if (checkAppearOnce() &&\n          checkElectionZero() &&\n          checkZkLeadersAgree()) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    fail(\"Checking the rebalance leader command failed\");\n  }\n\n","sourceOld":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    long start = System.currentTimeMillis();\n\n    while ((System.currentTimeMillis() - start) < timeoutMs) {\n      if (checkAppearOnce() &&\n          checkElectionZero() &&\n          checkZkLeadersAgree()) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    fail(\"Checking the rebalance leader command failed\");\n  }\n\n","bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","sourceNew":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    boolean checkAppearOnce = false;\n    boolean checkElectionZero = false;\n    boolean checkZkLeadersAgree = false;\n    while (!timeout.hasTimedOut()) {\n      checkAppearOnce = checkAppearOnce();\n      checkElectionZero = checkElectionZero();\n      checkZkLeadersAgree = checkZkLeadersAgree();\n      if (checkAppearOnce && checkElectionZero && checkZkLeadersAgree) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n\n    fail(\"Checking the rebalance leader command failed, checkAppearOnce=\" + checkAppearOnce + \" checkElectionZero=\"\n        + checkElectionZero + \" checkZkLeadersAgree=\" + checkZkLeadersAgree);\n  }\n\n","sourceOld":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n\n    while (! timeout.hasTimedOut()) {\n      if (checkAppearOnce() &&\n          checkElectionZero() &&\n          checkZkLeadersAgree()) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n    fail(\"Checking the rebalance leader command failed\");\n  }\n\n","bugFix":["4e6b620c271c84c0f14919eec7b90083b292ee51","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","sourceNew":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    boolean checkAppearOnce = false;\n    boolean checkElectionZero = false;\n    boolean checkZkLeadersAgree = false;\n    while (!timeout.hasTimedOut()) {\n      checkAppearOnce = checkAppearOnce();\n      checkElectionZero = checkElectionZero();\n      checkZkLeadersAgree = checkZkLeadersAgree();\n      if (checkAppearOnce && checkElectionZero && checkZkLeadersAgree) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n\n    fail(\"Checking the rebalance leader command failed, checkAppearOnce=\" + checkAppearOnce + \" checkElectionZero=\"\n        + checkElectionZero + \" checkZkLeadersAgree=\" + checkZkLeadersAgree);\n  }\n\n","sourceOld":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    boolean checkAppearOnce = false;\n    boolean checkElectionZero = false;\n    boolean checkZkLeadersAgree = false;\n    while (!timeout.hasTimedOut()) {\n      checkAppearOnce = checkAppearOnce();\n      checkElectionZero = checkElectionZero();\n      checkZkLeadersAgree = checkZkLeadersAgree();\n      if (checkAppearOnce && checkElectionZero && checkZkLeadersAgree) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n\n    fail(\"Checking the rebalance leader command failed, checkAppearOnce=\" + checkAppearOnce + \" checkElectionZero=\"\n        + checkElectionZero + \" checkZkLeadersAgree=\" + checkZkLeadersAgree);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","sourceNew":null,"sourceOld":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    boolean checkAppearOnce = false;\n    boolean checkElectionZero = false;\n    boolean checkZkLeadersAgree = false;\n    while (!timeout.hasTimedOut()) {\n      checkAppearOnce = checkAppearOnce();\n      checkElectionZero = checkElectionZero();\n      checkZkLeadersAgree = checkZkLeadersAgree();\n      if (checkAppearOnce && checkElectionZero && checkZkLeadersAgree) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n\n    fail(\"Checking the rebalance leader command failed, checkAppearOnce=\" + checkAppearOnce + \" checkElectionZero=\"\n        + checkElectionZero + \" checkZkLeadersAgree=\" + checkZkLeadersAgree);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkConsistency().mjava","sourceNew":null,"sourceOld":"  // After we've called the rebalance command, we want to insure that:\n  // 1> all replicas appear once and only once in the respective leader election queue\n  // 2> All the replicas we _think_ are leaders are in the 0th position in the leader election queue.\n  // 3> The node that ZooKeeper thinks is the leader is the one we think should be the leader.\n  void checkConsistency() throws InterruptedException, KeeperException {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    boolean checkAppearOnce = false;\n    boolean checkElectionZero = false;\n    boolean checkZkLeadersAgree = false;\n    while (!timeout.hasTimedOut()) {\n      checkAppearOnce = checkAppearOnce();\n      checkElectionZero = checkElectionZero();\n      checkZkLeadersAgree = checkZkLeadersAgree();\n      if (checkAppearOnce && checkElectionZero && checkZkLeadersAgree) {\n        return;\n      }\n      Thread.sleep(1000);\n    }\n\n    fail(\"Checking the rebalance leader command failed, checkAppearOnce=\" + checkAppearOnce + \" checkElectionZero=\"\n        + checkElectionZero + \" checkZkLeadersAgree=\" + checkZkLeadersAgree);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}