{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreqPayload> freqs = new ArrayList<TermFreqPayload>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreqPayload(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqPayloadArrayIterator(freqs.toArray(new TermFreqPayload[freqs.size()])));\n\n    for (TermFreqPayload tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<Input> freqs = new ArrayList<Input>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new Input(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(freqs.toArray(new Input[freqs.size()])));\n\n    for (Input tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreqPayload> freqs = new ArrayList<TermFreqPayload>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new TermFreqPayload(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqPayloadArrayIterator(freqs.toArray(new TermFreqPayload[freqs.size()])));\n\n    for (TermFreqPayload tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<Input> freqs = new ArrayList<>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new Input(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(freqs.toArray(new Input[freqs.size()])));\n\n    for (Input tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<Input> freqs = new ArrayList<Input>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new Input(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(freqs.toArray(new Input[freqs.size()])));\n\n    for (Input tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<Input> freqs = new ArrayList<>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new Input(\"\" + rnd.nextLong(), weight));\n    }\n\n    Directory tempDir = getDirectory();\n    FSTCompletionLookup lookup = new FSTCompletionLookup(tempDir, \"fst\");\n    lookup.build(new InputArrayIterator(freqs.toArray(new Input[freqs.size()])));\n\n    for (Input tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<Input> freqs = new ArrayList<>();\n    Random rnd = random();\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      int weight = rnd.nextInt(100); \n      freqs.add(new Input(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(freqs.toArray(new Input[freqs.size()])));\n\n    for (Input tf : freqs) {\n      final String term = tf.term.utf8ToString();\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(stringToCharSequence(prefix), true, 10)) {\n          assertTrue(lr.key.toString().startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}