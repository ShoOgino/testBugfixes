{"path":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","commits":[{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(Searcher,IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(searcher, reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcWeights.length];\n      for(int i = 0; i < valSrcWeights.length; i++) {\n        valSrcExpls[i] = valSrcWeights[i].explain(reader, doc);\n      }\n      Explanation customExp = CustomScoreQuery.this.getCustomScoreProvider(reader).customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["231941d2cb96b9752e839c311391096d90470db8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"231941d2cb96b9752e839c311391096d90470db8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"affefdda19991b74568e601456baad0c8e5c2f65":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["affefdda19991b74568e601456baad0c8e5c2f65"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["affefdda19991b74568e601456baad0c8e5c2f65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["231941d2cb96b9752e839c311391096d90470db8"],"231941d2cb96b9752e839c311391096d90470db8":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"affefdda19991b74568e601456baad0c8e5c2f65":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}