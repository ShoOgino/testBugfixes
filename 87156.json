{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for (int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for (int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d603e57f1f1611f73eb5c14ef80a3777cab5f418","date":1360895475,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutFillFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      is.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testSortWithoutFillFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testSortWithoutFillFields().mjava","sourceNew":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      is.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","sourceOld":"  public void testSortWithoutFillFields() throws Exception {\n    \n    // There was previously a bug in TopFieldCollector when fillFields was set\n    // to false - the same doc and score was set in ScoreDoc[] array. This test\n    // asserts that if fillFields is false, the documents are set properly. It\n    // does not use Searcher's default search methods (with Sort) since all set\n    // fillFields to true.\n    Sort[] sort = new Sort[] { new Sort(SortField.FIELD_DOC), new Sort() };\n    for(int i = 0; i < sort.length; i++) {\n      Query q = new MatchAllDocsQuery();\n      TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10, false,\n          false, false, true);\n      \n      full.search(q, tdc);\n      \n      ScoreDoc[] sd = tdc.topDocs().scoreDocs;\n      for(int j = 1; j < sd.length; j++) {\n        assertTrue(sd[j].doc != sd[j - 1].doc);\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d603e57f1f1611f73eb5c14ef80a3777cab5f418":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["d4d69c535930b5cce125cff868d40f6373dc27d4","d603e57f1f1611f73eb5c14ef80a3777cab5f418"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d603e57f1f1611f73eb5c14ef80a3777cab5f418"]},"commit2Childs":{"d603e57f1f1611f73eb5c14ef80a3777cab5f418":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d603e57f1f1611f73eb5c14ef80a3777cab5f418","3b41f996b22bd5518650f897d050088ff808ec03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}