{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/PercentileCalculator#[T-extends-Comparable[T]]_getPercentiles(List[T],double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculates a list of percentile values for a given list of objects and percentiles.\n   *\n   * @param list     The list of {@link Comparable} objects to calculate the percentiles of.\n   * @param percents The array of percentiles (.01 to .99) to calculate.\n   * @return a list of comparables\n   */\n  public static <T extends Comparable<T>> List<T> getPercentiles(List<T> list, double[] percents) {\n    int size = list.size();\n    if (size == 0) {\n      return null;\n    }\n\n    int[] percs = new int[percents.length];\n    for (int i = 0; i < percs.length; i++) {\n      percs[i] = (int) Math.round(percents[i] * size - .5);\n    }\n    int[] percentiles = Arrays.copyOf(percs, percs.length);\n    Arrays.sort(percentiles);\n\n    if (percentiles[0] < 0 || percentiles[percentiles.length - 1] > size - 1) {\n      throw new IllegalArgumentException();\n    }\n\n    List<T> results = new ArrayList<>(percs.length);\n\n    distributeAndFind(list, percentiles, 0, percentiles.length - 1);\n\n    for (int i = 0; i < percs.length; i++) {\n      results.add(list.get(percs[i]));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}