{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"222d0a99f194d3d88e0c2e8189e9b812599ffc78","date":1357452118,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", \"{! score=distance filter=false}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=0.000001))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", \"{! score=distance filter=false}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=0.000001))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, null, null),\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"recipDistance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", radiusQuery(3, 4, 0.000001, \"distance\", \"false\"),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", radiusQuery(4, 0, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(3, 4, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(4, 0, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", \"{! score=recipDistance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", \"{! score=distance filter=false}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=0.000001))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\",\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(3,4 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", \"{! score=distance}\"+fieldName +\":\\\"Intersects(Circle(4,0 d=9))\\\"\" )\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7280772020b860cd9a473ed847c5b79251a850d7","date":1489283281,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    assumeTrue(\"dist sorting not supported on field \" + fieldName, canCalcDistance);\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    if (random().nextBoolean()) {\n      assertU(commit()); // new segment\n    }\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries; we filter it out\n    } else {\n      assertU(adoc(\"id\", \"999\")); // no data\n    }\n    assertU(commit());\n\n\n    // geodist asc\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, null, null),\n        \"fl\",\"id\",\n        \"sort\",\"geodist() asc\",\n        \"sfield\", fieldName, \"pt\", \"3,4\")\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"\n    );\n    // geodist desc  (simply reverse the assertions)\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, null, null),\n        \"fl\",\"id\",\n        \"sort\",\"geodist() desc\", // DESC\n        \"sfield\", fieldName, \"pt\", \"3,4\")\n        , 1e-3\n        , \"/response/docs/[0]/id=='101'\" // FLIPPED\n        , \"/response/docs/[1]/id=='100'\" // FLIPPED\n    );\n\n    //\n    //  NOTE: the rest work via the score of the spatial query. Generally, you should use geodist() instead.\n    //\n\n    //test absence of score=distance means it doesn't score\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, null, null),\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"recipDistance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", radiusQuery(3, 4, 0.000001, \"distance\", \"false\"),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", radiusQuery(4, 0, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(3, 4, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(4, 0, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    assertU(adoc(\"id\", \"100\", fieldName, \"1,2\"));\n    assertU(adoc(\"id\", \"101\", fieldName, \"4,-1\"));\n    assertU(adoc(\"id\", \"999\", fieldName, \"70,70\"));//far away from these queries\n    assertU(commit());\n\n    //test absence of score=distance means it doesn't score\n\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, null, null),\n        \"fl\",\"id,score\")\n        , 1e-9\n        , \"/response/docs/[0]/score==1.0\"\n        , \"/response/docs/[1]/score==1.0\"\n    );\n\n    //score by distance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n    //score by recipDistance\n    assertJQ(req(\n        \"q\", radiusQuery(3, 4, 9, \"recipDistance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score desc\")//want descending\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==0.3099695\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==0.19970943\"\n    );\n\n    //score by distance and don't filter\n    assertJQ(req(\n        //circle radius is small and shouldn't match either, but we disable filtering\n        \"q\", radiusQuery(3, 4, 0.000001, \"distance\", \"false\"),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-3\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[0]/score==2.827493\"\n        , \"/response/docs/[1]/id=='101'\"\n        , \"/response/docs/[1]/score==5.089807\"\n    );\n\n    //query again with the query point closer to #101, and check the new ordering\n    assertJQ(req(\n        \"q\", radiusQuery(4, 0, 9, \"distance\", null),\n        \"fl\",\"id,score\",\n        \"sort\",\"score asc\")//want ascending due to increasing distance\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"\n    );\n\n    //use sort=query(...)\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(3, 4, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='100'\"\n        , \"/response/docs/[1]/id=='101'\"  );\n\n    //check reversed direction with query point closer to #101\n    assertJQ(req(\n        \"q\",\"-id:999\",//exclude that doc\n        \"fl\",\"id,score\",\n        \"sort\",\"query($sortQuery) asc\", //want ascending due to increasing distance\n        \"sortQuery\", radiusQuery(4, 0, 9, \"distance\", null))\n        , 1e-4\n        , \"/response/docs/[0]/id=='101'\"\n        , \"/response/docs/[1]/id=='100'\"  );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c11e1d33f2ba742976268153f6edd2d29710cf69","222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"222d0a99f194d3d88e0c2e8189e9b812599ffc78":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7280772020b860cd9a473ed847c5b79251a850d7":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7280772020b860cd9a473ed847c5b79251a850d7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c11e1d33f2ba742976268153f6edd2d29710cf69":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","222d0a99f194d3d88e0c2e8189e9b812599ffc78"],"222d0a99f194d3d88e0c2e8189e9b812599ffc78":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["7280772020b860cd9a473ed847c5b79251a850d7"],"7280772020b860cd9a473ed847c5b79251a850d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}