{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT));\n    baseServer.request(request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT));\n    baseServer.request(request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT));\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);\n    baseClient.setConnectionTimeout(15000);\n    baseClient.setSoTimeout(60000);\n    baseClient.request(request);\n    baseClient.shutdown();\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);\n    try {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    } finally {\n      baseServer.shutdown();\n    }\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);\n    baseClient.setConnectionTimeout(15000);\n    baseClient.setSoTimeout(60000);\n    baseClient.request(request);\n    baseClient.shutdown();\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);\n    try {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    } finally {\n      baseServer.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":null,"sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#deleteShard(String).mjava","sourceNew":null,"sourceOld":"  protected void deleteShard(String shard) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETESHARD.toString());\n    params.set(\"collection\", AbstractFullDistribZkTestBase.DEFAULT_COLLECTION);\n    params.set(\"shard\", shard);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(15000);\n      baseServer.setSoTimeout(60000);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c3e46d3417c353d7be14509cfab11b315927fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}