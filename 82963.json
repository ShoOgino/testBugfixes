{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"/dev/null","sourceNew":"    private void handlePOST() throws IOException {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams == null ){\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n      try {\n        for (ContentStream stream : streams) {\n          runCommandsTillSuccess(stream);\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            handleCommands(opsCopy, overlay);\n            break;\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if(streams == null ){\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n    }\n      try {\n        for (ContentStream stream : streams) {\n          runCommandsTillSuccess(stream);\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            handleCommands(opsCopy, overlay);\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            handleCommands(opsCopy, overlay);\n            break;\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if(parts.size()>1 && RequestParams.NAME.equals(parts.get(1))){\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(),req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            handleCommands(opsCopy, overlay);\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if (!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errList);\n        return;\n      }\n\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if(!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errList);\n        return;\n      }\n\n      try {\n        for (;;) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if(parts.size()>1 && RequestParams.NAME.equals(parts.get(1))){\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(),req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" +e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp);\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n      }\n      ArrayList<CommandOperation> ops = new ArrayList<>();\n\n      for (ContentStream stream : streams)\n        ops.addAll(CommandOperation.parse(stream.getReader()));\n      List<Map> errList = CommandOperation.captureErrors(ops);\n      if (!errList.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errList);\n        return;\n      }\n\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp);\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp);\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n\n        log.error( \"error executing commands \"+ Utils.toJSONString(ops) ,e);\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n\n        log.error(\"error executing commands \" + Utils.toJSONString(ops), e);\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n\n        log.error( \"error executing commands \"+ Utils.toJSONString(ops) ,e);\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n\n        log.error(\"error executing commands \" + Utils.toJSONString(ops), e);\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n\n        log.error(\"error executing commands \" + Utils.toJSONString(ops), e);\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            if (log.isInfoEnabled()) {\n              log.info(\"Race condition, the node is modified in ZK by someone else {}\", e.getMessage());\n            }\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            log.info(\"Race condition, the node is modified in ZK by someone else \" + e.getMessage());\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handlePOST().mjava","sourceNew":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            if (log.isInfoEnabled()) {\n              log.info(\"Race condition, the node is modified in ZK by someone else\", e);\n            }\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","sourceOld":"    private void handlePOST() throws IOException {\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), resp.getValues());\n      if (ops == null) return;\n      try {\n        for (; ; ) {\n          ArrayList<CommandOperation> opsCopy = new ArrayList<>(ops.size());\n          for (CommandOperation op : ops) opsCopy.add(op.getCopy());\n          try {\n            if (parts.size() > 1 && RequestParams.NAME.equals(parts.get(1))) {\n              RequestParams params = RequestParams.getFreshRequestParams(req.getCore().getResourceLoader(), req.getCore().getSolrConfig().getRequestParams());\n              handleParams(opsCopy, params);\n            } else {\n              ConfigOverlay overlay = SolrConfig.getConfigOverlay(req.getCore().getResourceLoader());\n              handleCommands(opsCopy, overlay);\n            }\n            break;//succeeded . so no need to go over the loop again\n          } catch (ZkController.ResourceModifiedInZkException e) {\n            //retry\n            if (log.isInfoEnabled()) {\n              log.info(\"Race condition, the node is modified in ZK by someone else {}\", e.getMessage());\n            }\n          }\n        }\n      } catch (Exception e) {\n        resp.setException(e);\n        resp.add(CommandOperation.ERR_MSGS, singletonList(SchemaManager.getErrorStr(e)));\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["6bdcb86c29922edae9a14852e636303bc52df094"],"6bdcb86c29922edae9a14852e636303bc52df094":["be214850f18c80408bcfafd463ec155ab0515aee"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"c44cc06c26e456fe9c215072b79fce30babe3975":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"be214850f18c80408bcfafd463ec155ab0515aee":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6bdcb86c29922edae9a14852e636303bc52df094","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"b0b597c65628ca9e73913a07e81691f8229bae35":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6bdcb86c29922edae9a14852e636303bc52df094":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be214850f18c80408bcfafd463ec155ab0515aee":["6bdcb86c29922edae9a14852e636303bc52df094"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","b0b597c65628ca9e73913a07e81691f8229bae35"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["be214850f18c80408bcfafd463ec155ab0515aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}