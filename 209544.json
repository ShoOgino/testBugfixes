{"path":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee857a409368c4693aaff6b8aafb539ba07a1b3","date":1293240111,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes the following query string parameters: q, extendedResults, cmd rebuild,\n   * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.\n   */\n  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n    throws Exception {\n    SolrParams p = req.getParams();\n    String words = p.get(\"q\");\n    String cmd = p.get(\"cmd\");\n    if (cmd != null) {\n      cmd = cmd.trim();\n      if (cmd.equals(\"rebuild\")) {\n        rebuild(req);\n        rsp.add(\"cmdExecuted\",\"rebuild\");\n      } else if (cmd.equals(\"reopen\")) {\n        reopen();\n        rsp.add(\"cmdExecuted\",\"reopen\");\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Unrecognized Command: \" + cmd);\n      }\n    }\n\n    // empty query string\n    if (null == words || \"\".equals(words.trim())) {\n      return;\n    }\n\n    IndexReader indexReader = null;\n    String suggestionField = null;\n    Float accuracy;\n    int numSug;\n    boolean onlyMorePopular;\n    boolean extendedResults;\n    try {\n      accuracy = p.getFloat(ACCURACY, p.getFloat(\"accuracy\", DEFAULT_ACCURACY));\n      spellChecker.setAccuracy(accuracy);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Accuracy must be a valid positive float\", e);\n    }\n    try {\n      numSug = p.getInt(SUGGESTIONS, p.getInt(\"suggestionCount\", DEFAULT_SUGGESTION_COUNT));\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Spelling suggestion count must be a valid positive integer\", e);\n    }\n    try {\n      onlyMorePopular = p.getBool(POPULAR, DEFAULT_MORE_POPULAR);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Only more popular' must be a valid boolean\", e);\n    }\n    try {\n      extendedResults = p.getBool(EXTENDED, DEFAULT_EXTENDED_RESULTS);\n    } catch (SolrException e) {\n      throw new RuntimeException(\"'Extended results' must be a valid boolean\", e);\n    }\n\n    // when searching for more popular, a non null index-reader and\n    // restricted-field are required\n    if (onlyMorePopular || extendedResults) {\n      indexReader = req.getSearcher().getReader();\n      suggestionField = termSourceField;\n    }\n\n    if (extendedResults) {\n\n      rsp.add(\"numDocs\", indexReader.numDocs());\n\n      SimpleOrderedMap<Object> results = new SimpleOrderedMap<Object>();\n      String[] wordz = words.split(\" \");\n      for (String word : wordz)\n      {\n        SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n        nl.add(\"frequency\", indexReader.docFreq(new Term(suggestionField, word)));\n        String[] suggestions =\n          spellChecker.suggestSimilar(word, numSug,\n          indexReader, suggestionField, onlyMorePopular);\n\n        // suggestion array\n        NamedList<Object> sa = new NamedList<Object>();\n        for (int i=0; i<suggestions.length; i++) {\n          // suggestion item\n          SimpleOrderedMap<Object> si = new SimpleOrderedMap<Object>();\n          si.add(\"frequency\", indexReader.docFreq(new Term(termSourceField, suggestions[i])));\n          sa.add(suggestions[i], si);\n        }\n        nl.add(\"suggestions\", sa);\n        results.add(word, nl);\n      }\n      rsp.add( \"result\", results );\n\n    } else {\n      rsp.add(\"words\", words);\n      if (spellChecker.exist(words)) {\n        rsp.add(\"exist\",\"true\");\n      } else {\n        rsp.add(\"exist\",\"false\");\n      }\n      String[] suggestions =\n        spellChecker.suggestSimilar(words, numSug,\n                                    indexReader, suggestionField,\n                                    onlyMorePopular);\n\n      rsp.add(\"suggestions\", Arrays.asList(suggestions));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ee857a409368c4693aaff6b8aafb539ba07a1b3"]},"commit2Childs":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}