{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221f4466c3d651221b8ed1ee82fea94dd0df7fa2","date":1399637078,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent\n   * triggering a flush due to number of buffered documents. Note that if\n   * flushing by RAM usage is also enabled, then the flush will be triggered by\n   * whichever comes first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public LiveIndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2 when enabled\");\n    }\n    if (maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"221f4466c3d651221b8ed1ee82fea94dd0df7fa2":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["221f4466c3d651221b8ed1ee82fea94dd0df7fa2"]},"commit2Childs":{"221f4466c3d651221b8ed1ee82fea94dd0df7fa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["221f4466c3d651221b8ed1ee82fea94dd0df7fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}