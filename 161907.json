{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    Map<String, String> properties = watchedCollectionProps.get(collection);\n    if (properties == null) {\n      try {\n        properties = fetchCollectionProperties(collection, null);\n        // Not storing the value in watchedCollectionProps, because it can gat stale, since we have no watcher set.\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading collection properties\", SolrZkClient.checkInterrupted(e));\n      }\n    }\n\n    return properties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","sourceNew":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    synchronized (watchedCollectionProps) { // making decisions based on the result of a get...\n      VersionedCollectionProps vprops = watchedCollectionProps.get(collection);\n      Map<String, String> properties = vprops != null ? vprops.props : null;\n      if (properties == null) {\n        try {\n          // todo: maybe we want to store/watch since if someone's calling this it's probably going to get called again?\n          // Not storing the value in watchedCollectionProps, because it can gat stale, since we have no watcher set.\n          properties = fetchCollectionProperties(collection, null ).props;\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading collection properties\", SolrZkClient.checkInterrupted(e));\n        }\n      }\n      return properties;\n    }\n  }\n\n","sourceOld":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    Map<String, String> properties = watchedCollectionProps.get(collection);\n    if (properties == null) {\n      try {\n        properties = fetchCollectionProperties(collection, null);\n        // Not storing the value in watchedCollectionProps, because it can gat stale, since we have no watcher set.\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading collection properties\", SolrZkClient.checkInterrupted(e));\n      }\n    }\n\n    return properties;\n  }\n\n","bugFix":["de3459a54b4c8751d9ef19b035577e2418064be7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad04daa4b07fab11f19bb17a8b556b0dde898d7f","date":1560262372,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","sourceNew":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper. This is a convenience for {@code getCollectionProperties(collection,0)}\n   *\n   * @param collection the collection for which properties are desired\n   * @return a map representing the key/value properties for the collection.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    return getCollectionProperties(collection,0);\n  }\n\n","sourceOld":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    synchronized (watchedCollectionProps) { // making decisions based on the result of a get...\n      VersionedCollectionProps vprops = watchedCollectionProps.get(collection);\n      Map<String, String> properties = vprops != null ? vprops.props : null;\n      if (properties == null) {\n        try {\n          // todo: maybe we want to store/watch since if someone's calling this it's probably going to get called again?\n          // Not storing the value in watchedCollectionProps, because it can gat stale, since we have no watcher set.\n          properties = fetchCollectionProperties(collection, null ).props;\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading collection properties\", SolrZkClient.checkInterrupted(e));\n        }\n      }\n      return properties;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getCollectionProperties(String).mjava","sourceNew":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper. This is a convenience for {@code getCollectionProperties(collection,0)}\n   *\n   * @param collection the collection for which properties are desired\n   * @return a map representing the key/value properties for the collection.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    return getCollectionProperties(collection, 0);\n  }\n\n","sourceOld":"  /**\n   * Get collection properties for a given collection. If the collection is watched, simply return it from the cache,\n   * otherwise fetch it directly from zookeeper. This is a convenience for {@code getCollectionProperties(collection,0)}\n   *\n   * @param collection the collection for which properties are desired\n   * @return a map representing the key/value properties for the collection.\n   */\n  public Map<String, String> getCollectionProperties(final String collection) {\n    return getCollectionProperties(collection,0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["de3459a54b4c8751d9ef19b035577e2418064be7"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["ad04daa4b07fab11f19bb17a8b556b0dde898d7f"],"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad04daa4b07fab11f19bb17a8b556b0dde898d7f":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["ad04daa4b07fab11f19bb17a8b556b0dde898d7f"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de3459a54b4c8751d9ef19b035577e2418064be7":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"ad04daa4b07fab11f19bb17a8b556b0dde898d7f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}