{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}