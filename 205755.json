{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","commits":[{"id":"e78c35bca3e32dfc7a695136fa2b5de1ae135c22","date":1441118240,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"/dev/null","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testAdminPath().mjava","sourceNew":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","sourceOld":"  private void testAdminPath() throws Exception{\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/admin/luke', \" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler'}}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n\n    TestSolrConfigHandler.testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/admin/luke\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n   NamedList<Object> rsp = cloudClient.request(new LukeRequest());\n   System.out.println(rsp);\n  }\n\n","bugFix":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0853c291617e0f9d0474b720bf609eb350e9225c"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","ac1e7fa558287a811ea07634d815ee7b1c541284"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}