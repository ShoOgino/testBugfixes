{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testFiniteStringsBasic().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertFiniteStringsRecursive(a, actual);\n    assertEquals(2, actual.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(actual.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(actual.contains(duck.get()));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}