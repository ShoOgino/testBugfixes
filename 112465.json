{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl, expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl, expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl, expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits.value);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl, expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n\n    // create a sort field and sort by it (reverse order)\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    IndexReader r = searcher.getIndexReader();\n\n    // Just first pass query\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"3\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"2\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    // Now, rescore:\n    Sort sort = new Sort(new SortField(\"popularity\", SortField.Type.INT, true));\n    Rescorer rescorer = new SortRescorer(sort);\n    hits = rescorer.rescore(searcher, hits, 10);\n    assertEquals(3, hits.totalHits);\n    assertEquals(\"2\", r.document(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", r.document(hits.scoreDocs[1].doc).get(\"id\"));\n    assertEquals(\"3\", r.document(hits.scoreDocs[2].doc).get(\"id\"));\n\n    String expl = rescorer.explain(searcher,\n                                   searcher.explain(query, hits.scoreDocs[0].doc),\n                                   hits.scoreDocs[0].doc).toString();\n\n    // Confirm the explanation breaks out the individual\n    // sort fields:\n    assertTrue(expl, expl.contains(\"= sort field <int: \\\"popularity\\\">! value=20\"));\n\n    // Confirm the explanation includes first pass details:\n    assertTrue(expl.contains(\"= first pass score\"));\n    assertTrue(expl.contains(\"body:contents in\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a38488a55cc52553c9792da5044dd31b15128cd8"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"a38488a55cc52553c9792da5044dd31b15128cd8":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}