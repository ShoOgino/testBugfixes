{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","commits":[{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrCore,SolrParams,Collection[ContentStream]).mjava","sourceNew":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  public SolrQueryRequest buildRequestFrom( SolrCore core, SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( CommonParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( CommonParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( CommonParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( CommonParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}