{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testParsingPerformance().mjava","commits":[{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testParsingPerformance().mjava","pathOld":"/dev/null","sourceNew":"  // parsing performance test\n  // Run from command line with ant test -Dtestcase=TestSolrQueryParser -Dtestmethod=testParsingPerformance -Dtests.asserts=false 2>/dev/null | grep QPS\n  @Test\n  public void testParsingPerformance() throws Exception {\n    String[] args = {\"-queries\",\"100\" ,\"-iter\",\"1000\", \"-clauses\",\"100\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    args = new String[] {\"-queries\",\"1000\" ,\"-iter\",\"2000\", \"-clauses\",\"10\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    // args = new String[] {\"-queries\",\"1000\" ,\"-iter\",\"1000000000\", \"-clauses\",\"10\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n\n    boolean assertOn = false;\n    assert assertOn = true;\n    if (assertOn) {\n      // System.out.println(\"WARNING! Assertions are enabled!!!! Will only execute small run.  Change with -Dtests.asserts=false\");\n      args = new String[]{\"-queries\",\"10\" ,\"-iter\",\"2\", \"-clauses\",\"20\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    }\n\n\n    int iter = 1000;\n    int numQueries = 100;\n    int maxClauses = 5;\n    int maxTerm = 10000000;\n    String format = \"term%d\";\n    String field = \"foo_s\";\n    long seed = 0;\n    boolean isFilter = true;\n    boolean rewrite = false;\n\n    String otherStuff = \"\";\n\n    for (int i = 0; i < args.length; i++) {\n      String a = args[i];\n      if (\"-queries\".equals(a)) {\n        numQueries = Integer.parseInt(args[++i]);\n      } else if (\"-iter\".equals(a)) {\n        iter = Integer.parseInt(args[++i]);\n      } else if (\"-clauses\".equals(a)) {\n        maxClauses = Integer.parseInt(args[++i]);\n      } else if (\"-format\".equals(a)) {\n        format = args[++i];\n      } else if (\"-seed\".equals(a)) {\n        seed = Long.parseLong(args[++i]);\n      } else {\n        otherStuff = otherStuff + \" \" + a;\n      }\n    }\n\n    Random r = new Random(seed);\n\n    String[] queries = new String[numQueries];\n    for (int i = 0; i < queries.length; i++) {\n      StringBuilder sb = new StringBuilder();\n      boolean explicitField = r.nextInt(5) == 0;\n      if (!explicitField) {\n        sb.append(field + \":(\");\n      }\n\n      sb.append(otherStuff).append(\" \");\n\n      int nClauses = r.nextInt(maxClauses) + 1;  // TODO: query parse can't parse () for some reason???\n\n      for (int c = 0; c<nClauses; c++) {\n        String termString = String.format(Locale.US, format, r.nextInt(maxTerm));\n        if (explicitField) {\n          sb.append(field).append(':');\n        }\n        sb.append(termString);\n        sb.append(' ');\n      }\n\n      if (!explicitField) {\n        sb.append(\")\");\n      }\n      queries[i] = sb.toString();\n      // System.out.println(queries[i]);\n    }\n\n    SolrQueryRequest req = req();\n\n    long start = System.nanoTime();\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      for (String qStr : queries) {\n        QParser parser = QParser.getParser(qStr,req);\n        parser.setIsFilter(isFilter);\n        Query q = parser.getQuery();\n        if (rewrite) {\n          // TODO: do rewrite\n        }\n        ret += q.getClass().hashCode(); // use the query somehow\n      }\n    }\n\n    long end = System.nanoTime();\n\n    System.out.println((assertOn ? \"WARNING, assertions enabled. \" : \"\") + \"ret=\" + ret + \" Parser QPS:\" + ((long)numQueries * iter)*1000000000/(end-start));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testParsingPerformance().mjava","pathOld":"/dev/null","sourceNew":"  // parsing performance test\n  // Run from command line with ant test -Dtestcase=TestSolrQueryParser -Dtestmethod=testParsingPerformance -Dtests.asserts=false 2>/dev/null | grep QPS\n  @Test\n  public void testParsingPerformance() throws Exception {\n    String[] args = {\"-queries\",\"100\" ,\"-iter\",\"1000\", \"-clauses\",\"100\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    args = new String[] {\"-queries\",\"1000\" ,\"-iter\",\"2000\", \"-clauses\",\"10\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    // args = new String[] {\"-queries\",\"1000\" ,\"-iter\",\"1000000000\", \"-clauses\",\"10\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n\n    boolean assertOn = false;\n    assert assertOn = true;\n    if (assertOn) {\n      // System.out.println(\"WARNING! Assertions are enabled!!!! Will only execute small run.  Change with -Dtests.asserts=false\");\n      args = new String[]{\"-queries\",\"10\" ,\"-iter\",\"2\", \"-clauses\",\"20\", \"-format\",\"term%d\", \"-seed\",\"0\"};\n    }\n\n\n    int iter = 1000;\n    int numQueries = 100;\n    int maxClauses = 5;\n    int maxTerm = 10000000;\n    String format = \"term%d\";\n    String field = \"foo_s\";\n    long seed = 0;\n    boolean isFilter = true;\n    boolean rewrite = false;\n\n    String otherStuff = \"\";\n\n    for (int i = 0; i < args.length; i++) {\n      String a = args[i];\n      if (\"-queries\".equals(a)) {\n        numQueries = Integer.parseInt(args[++i]);\n      } else if (\"-iter\".equals(a)) {\n        iter = Integer.parseInt(args[++i]);\n      } else if (\"-clauses\".equals(a)) {\n        maxClauses = Integer.parseInt(args[++i]);\n      } else if (\"-format\".equals(a)) {\n        format = args[++i];\n      } else if (\"-seed\".equals(a)) {\n        seed = Long.parseLong(args[++i]);\n      } else {\n        otherStuff = otherStuff + \" \" + a;\n      }\n    }\n\n    Random r = new Random(seed);\n\n    String[] queries = new String[numQueries];\n    for (int i = 0; i < queries.length; i++) {\n      StringBuilder sb = new StringBuilder();\n      boolean explicitField = r.nextInt(5) == 0;\n      if (!explicitField) {\n        sb.append(field + \":(\");\n      }\n\n      sb.append(otherStuff).append(\" \");\n\n      int nClauses = r.nextInt(maxClauses) + 1;  // TODO: query parse can't parse () for some reason???\n\n      for (int c = 0; c<nClauses; c++) {\n        String termString = String.format(Locale.US, format, r.nextInt(maxTerm));\n        if (explicitField) {\n          sb.append(field).append(':');\n        }\n        sb.append(termString);\n        sb.append(' ');\n      }\n\n      if (!explicitField) {\n        sb.append(\")\");\n      }\n      queries[i] = sb.toString();\n      // System.out.println(queries[i]);\n    }\n\n    SolrQueryRequest req = req();\n\n    long start = System.nanoTime();\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      for (String qStr : queries) {\n        QParser parser = QParser.getParser(qStr,req);\n        parser.setIsFilter(isFilter);\n        Query q = parser.getQuery();\n        if (rewrite) {\n          // TODO: do rewrite\n        }\n        ret += q.getClass().hashCode(); // use the query somehow\n      }\n    }\n\n    long end = System.nanoTime();\n\n    System.out.println((assertOn ? \"WARNING, assertions enabled. \" : \"\") + \"ret=\" + ret + \" Parser QPS:\" + ((long)numQueries * iter)*1000000000/(end-start));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}