{"path":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    mostRecentlyUsedFilters = Collections.newSetFromMap(new LinkedHashMap<Filter, Boolean>(16, 0.75f, true));\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueFilters = new LinkedHashMap<Filter, Filter>(16, 0.75f, true);\n    mostRecentlyUsedFilters = uniqueFilters.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    mostRecentlyUsedFilters = Collections.newSetFromMap(new LinkedHashMap<Filter, Boolean>(16, 0.75f, true));\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueFilters = new LinkedHashMap<Filter, Filter>(16, 0.75f, true);\n    mostRecentlyUsedFilters = uniqueFilters.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueFilters = new LinkedHashMap<Filter, Filter>(16, 0.75f, true);\n    mostRecentlyUsedFilters = uniqueFilters.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d6ade6517735e5fca21539f4ff32151bf0a89b8","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}