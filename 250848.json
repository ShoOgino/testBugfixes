{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(\"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(\"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(\"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5620d3cb34306ea5b7d016a832fbc964b74c2650","date":1329755478,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(\"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":5,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":"  private boolean requestUpdates(ShardResponse srsp, String versionsAndRanges, long totalUpdates) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + totalUpdates + \" versions=\" + versionsAndRanges);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", versionsAndRanges);\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#requestUpdates(ShardResponse,List[Long]).mjava","sourceNew":null,"sourceOld":"  private boolean requestUpdates(ShardResponse srsp, List<Long> toRequest) {\n    String replica = srsp.getShardRequest().shards[0];\n\n    log.info(msg() + \"Requesting updates from \" + replica + \"n=\" + toRequest.size() + \" versions=\" + toRequest);\n\n    // reuse our original request object\n    ShardRequest sreq = srsp.getShardRequest();\n\n    sreq.purpose = 0;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"getUpdates\", StrUtils.join(toRequest, ','));\n    sreq.params.set(\"onlyIfActive\", onlyIfActive);\n    sreq.responses.clear();  // needs to be zeroed for correct correlation to occur\n\n    shardHandler.submit(sreq, sreq.shards[0], sreq.params);\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["26cb11ce089e71fb909641e7030b53c7d9e3fff3","e511b092029d56e0d4e30204fba8509c1c2647b6"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["5620d3cb34306ea5b7d016a832fbc964b74c2650"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["5620d3cb34306ea5b7d016a832fbc964b74c2650","f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["26cb11ce089e71fb909641e7030b53c7d9e3fff3","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"]},"commit2Childs":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["5620d3cb34306ea5b7d016a832fbc964b74c2650","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","e511b092029d56e0d4e30204fba8509c1c2647b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}