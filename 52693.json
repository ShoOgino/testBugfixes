{"path":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","commits":[{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  private File buildIndex() throws IOException {\n    File path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":"  private File buildIndex() throws IOException {\n    File path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  private File buildIndex() throws IOException {\n    File path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  private File buildIndex() throws IOException {\n    File path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(DOCS_TO_ADD, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(DOCS_TO_ADD, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(DOCS_TO_ADD, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(DOCS_TO_ADD, writer.maxDoc());\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","sourceNew":null,"sourceOld":"  private Path buildIndex() throws IOException {\n    Path path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(DOCS_TO_ADD, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n\n    return path;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"5de502b5478255493125e7e801411ba17a6682ec":["f4abec28b874149a7223e32cc7a01704c27790de"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["5de502b5478255493125e7e801411ba17a6682ec"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c15a75016387504d70a40cba6e9314b8885307f0"],"c15a75016387504d70a40cba6e9314b8885307f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5de502b5478255493125e7e801411ba17a6682ec":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c15a75016387504d70a40cba6e9314b8885307f0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4abec28b874149a7223e32cc7a01704c27790de"],"c15a75016387504d70a40cba6e9314b8885307f0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4abec28b874149a7223e32cc7a01704c27790de":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}