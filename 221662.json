{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // nocommit this isn't quite right: it should be only\n      // the fields indexed by us...?  maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72075e55f96fefa443288356377c83e70d94cbd2","date":1337721157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // nocommit this isn't quite right: it should be only\n      // the fields indexed by us...?  maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16cbef32b882ec68df422af3f08845ec82620335","date":1337802266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":["9c5b735f3b39a5cdb52150bb4ff36a95e8c9407f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, Lucene40PostingsReader.FRQ_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, Lucene40PostingsReader.PRX_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, Lucene40PostingsReader.FRQ_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, Lucene40PostingsReader.PRX_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, Lucene40PostingsReader.FRQ_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, Lucene40PostingsReader.PRX_CODEC, Lucene40PostingsReader.VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  /** Creates a {@link Lucene40PostingsWriter}, with the\n   *  specified {@code skipInterval}. */\n  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    IndexOutput proxOut = null;\n    try {\n      CodecUtil.writeHeader(freqOut, FRQ_CODEC, VERSION_CURRENT);\n      // TODO: this is a best effort, if one of these fields has no postings\n      // then we make an empty prx file, same as if we are wrapped in \n      // per-field postingsformat. maybe... we shouldn't\n      // bother w/ this opto?  just create empty prx file...?\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n        CodecUtil.writeHeader(proxOut, PRX_CODEC, VERSION_CURRENT);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      this.proxOut = proxOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut, proxOut);\n      }\n    }\n\n    totalNumDocs = state.segmentInfo.getDocCount();\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               totalNumDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["519435fc0d6082a1b8081f9492b714f716877437"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16cbef32b882ec68df422af3f08845ec82620335":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["519435fc0d6082a1b8081f9492b714f716877437","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["519435fc0d6082a1b8081f9492b714f716877437","6616b1fd222bb5a60f7f7856ace312252bc97890"],"519435fc0d6082a1b8081f9492b714f716877437":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","16cbef32b882ec68df422af3f08845ec82620335"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["72075e55f96fefa443288356377c83e70d94cbd2"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72075e55f96fefa443288356377c83e70d94cbd2":["4356000e349e38c9fb48034695b7c309abd54557"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"16cbef32b882ec68df422af3f08845ec82620335":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["519435fc0d6082a1b8081f9492b714f716877437"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519435fc0d6082a1b8081f9492b714f716877437":["6616b1fd222bb5a60f7f7856ace312252bc97890","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["16cbef32b882ec68df422af3f08845ec82620335"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"4356000e349e38c9fb48034695b7c309abd54557":["72075e55f96fefa443288356377c83e70d94cbd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"72075e55f96fefa443288356377c83e70d94cbd2":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}