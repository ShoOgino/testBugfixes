{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","sourceNew":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","sourceNew":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","sourceNew":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e250f610380dc5c3ba65cb770f4076d47d2c1d89","date":1348100277,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#doPivotFacetTest(boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacet().mjava","sourceNew":"  private void doPivotFacetTest(boolean missing) throws Exception {\n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++,  \"cat\", \"b\" ) ); // something not matching all fields\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setFacetMissing( missing );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    //  features missing (1)\n    //    cat=b (1)\n\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( missing ? 3 : 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n\n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n\n    if (missing) {\n      ff = pivot.get( 2 );\n      assertEquals( \"features\", ff.getField() );\n      assertEquals( null, ff.getValue() );\n      assertEquals( 1, ff.getCount() );\n      counts = ff.getPivot();\n      assertEquals( 1, counts.size() );\n      assertEquals( \"cat\", counts.get(0).getField() );\n      assertEquals( \"b\", counts.get(0).getValue() );\n      assertEquals( 1, counts.get(0).getCount() );\n    }\n\n    //  PIVOT: cat,features\n    //  cat=b (7)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //    features missing (1)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n\n    assertEquals( \"cat,features\", pivots.getName( 1 ) );\n    pivot = pivots.getVal( 1 );\n    assertEquals( 2, pivot.size() );\n\n    ff = pivot.get( 0 );\n    assertEquals( \"cat\", ff.getField() );\n    assertEquals( \"b\", ff.getValue() );\n    assertEquals( 7, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( missing ? 3 : 2, counts.size() );\n    assertEquals( \"features\", counts.get(0).getField() );\n    assertEquals( \"bbb\", counts.get(0).getValue() );\n    assertEquals( 4, counts.get(0).getCount() );\n    assertEquals( \"aaa\", counts.get(1).getValue() );\n    assertEquals( 2, counts.get(1).getCount() );\n    if ( missing ) {\n      assertEquals( null, counts.get(2).getValue() );\n      assertEquals( 1, counts.get(2).getCount() );\n    }\n\n    ff = pivot.get( 1 );\n    assertEquals( \"cat\", ff.getField() );\n    assertEquals( \"a\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"features\", counts.get(0).getField() );\n    assertEquals( \"aaa\", counts.get(0).getValue() );\n    assertEquals( 3, counts.get(0).getCount() );\n    assertEquals( \"bbb\", counts.get(1).getValue() );\n    assertEquals( 2, counts.get(1).getCount() );\n\n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features missing (1)\n    //    cat=b (1)\n    //      inStock missing (1)\n\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    pivot = pivots.getVal( 2 );\n    assertEquals( missing ? 3 : 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n\n    if (missing) {\n      p = pivot.get( 2 );\n      assertEquals( \"features\", p.getField() );\n      assertEquals( null, p.getValue() );\n      assertEquals( 1, p.getCount() );\n      assertEquals( 1, p.getPivot().size() );\n      p = p.getPivot().get(0);\n      assertEquals( \"cat\", p.getField() );\n      assertEquals( \"b\", p.getValue() );\n      assertEquals( 1, p.getCount() );\n      assertEquals( 1, p.getPivot().size() );\n      p = p.getPivot().get(0);\n      assertEquals( \"inStock\", p.getField() );\n      assertEquals( null, p.getValue() );\n      assertEquals( 1, p.getCount() );\n      assertEquals( null, p.getPivot() );\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacet() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    \n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true  ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"aaa\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"a\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", false ) );\n    docs.add( makeTestDoc( \"id\", id++, \"features\", \"bbb\",  \"cat\", \"b\", \"inStock\", true ) );\n    docs.add( makeTestDoc( \"id\", id++ ) ); // something not matching\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.addFacetPivotField(\"features,cat\", \"cat,features\", \"features,cat,inStock\" );\n    query.setFacetMinCount( 0 );\n    query.setRows( 0 );\n    \n    QueryResponse rsp = server.query( query );\n    assertEquals( docs.size(), rsp.getResults().getNumFound() );\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    assertEquals( 3, pivots.size() );\n\n//    for(Map.Entry<String, List<PivotField>> entry : pivots ) {\n//      System.out.println( \"PIVOT: \"+entry.getKey() );\n//      for( PivotField p : entry.getValue() ) {\n//        p.write(System.out, 0 );\n//      }\n//      System.out.println();\n//    }\n    \n    //  PIVOT: features,cat\n    //  features=bbb (6)\n    //    cat=b (4)\n    //    cat=a (2)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //    cat=b (2)\n    \n    List<PivotField> pivot = pivots.getVal( 0 );\n    assertEquals( \"features,cat\", pivots.getName( 0 ) );\n    assertEquals( 2, pivot.size() );\n    \n    PivotField ff = pivot.get( 0 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"bbb\", ff.getValue() );\n    assertEquals( 6, ff.getCount() );\n    List<PivotField> counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"cat\", counts.get(0).getField() );\n    assertEquals( \"b\", counts.get(0).getValue() );\n    assertEquals(   4, counts.get(0).getCount() );\n    assertEquals( \"a\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n\n    //  PIVOT: cat,features\n    //  cat=b (6)\n    //    features=bbb (4)\n    //    features=aaa (2)\n    //  cat=a (5)\n    //    features=aaa (3)\n    //    features=bbb (2)\n    \n    ff = pivot.get( 1 );\n    assertEquals( \"features\", ff.getField() );\n    assertEquals( \"aaa\", ff.getValue() );\n    assertEquals( 5, ff.getCount() );\n    counts = ff.getPivot();\n    assertEquals( 2, counts.size() );\n    assertEquals( \"a\", counts.get(0).getValue() );\n    assertEquals(   3, counts.get(0).getCount() );\n    assertEquals( \"b\", counts.get(1).getValue() );\n    assertEquals(   2, counts.get(1).getCount() );\n    \n    // Three deep:\n    //  PIVOT: features,cat,inStock\n    //  features=bbb (6)\n    //    cat=b (4)\n    //      inStock=false (2)\n    //      inStock=true (2)\n    //    cat=a (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    //  features=aaa (5)\n    //    cat=a (3)\n    //      inStock=true (2)\n    //      inStock=false (1)\n    //    cat=b (2)\n    //      inStock=false (1)\n    //      inStock=true (1)\n    \n    pivot = pivots.getVal( 2 );\n    assertEquals( \"features,cat,inStock\", pivots.getName( 2 ) );\n    assertEquals( 2, pivot.size() );\n    PivotField p = pivot.get( 1 ).getPivot().get(0);     // get(1) should be features=AAAA, then get(0) should be cat=a\n    assertEquals( \"cat\", p.getField() );\n    assertEquals( \"a\", p.getValue() );\n    counts = p.getPivot();\n  //  p.write(System.out, 5 );\n    assertEquals( 2, counts.size() );  // 2 trues and 1 false under features=AAAA,cat=a\n    assertEquals( \"inStock\",    counts.get(0).getField() );\n    assertEquals( Boolean.TRUE, counts.get(0).getValue() );\n    assertEquals(  2,           counts.get(0).getCount() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e250f610380dc5c3ba65cb770f4076d47d2c1d89":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e250f610380dc5c3ba65cb770f4076d47d2c1d89"]},"commit2Childs":{"e250f610380dc5c3ba65cb770f4076d47d2c1d89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e250f610380dc5c3ba65cb770f4076d47d2c1d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}