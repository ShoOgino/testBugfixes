{"path":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new FacetLabel(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new FacetLabel(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#testCountWithdepthUsingSampling().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCountWithdepthUsingSampling() throws Exception, IOException {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    FacetIndexingParams fip = new FacetIndexingParams(randomCategoryListParams());\n    \n    // index 100 docs, each with one category: [\"root\", docnum/10, docnum]\n    // e.g. root/8/87\n    index100Docs(indexDir, taxoDir, fip);\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n    \n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\"), 10);\n    // Setting the depth to '2', should potentially get all categories\n    facetRequest.setDepth(2);\n    facetRequest.setResultMode(ResultMode.PER_NODE_IN_TREE);\n\n    FacetSearchParams fsp = new FacetSearchParams(fip, facetRequest);\n    \n    // Craft sampling params to enforce sampling\n    final SamplingParams params = new SamplingParams();\n    params.setMinSampleSize(2);\n    params.setMaxSampleSize(50);\n    params.setOversampleFactor(5);\n    params.setSamplingThreshold(60);\n    params.setSampleRatio(0.1);\n    \n    FacetResult res = searchWithFacets(r, tr, fsp, params);\n    FacetRequest req = res.getFacetRequest();\n    assertEquals(facetRequest, req);\n    \n    FacetResultNode rootNode = res.getFacetResultNode();\n    \n    // Each node below root should also have sub-results as the requested depth was '2'\n    for (FacetResultNode node : rootNode.subResults) {\n      assertTrue(\"node \" + node.label + \" should have had children as the requested depth was '2'\", node.subResults.size() > 0);\n    }\n    \n    IOUtils.close(r, tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}