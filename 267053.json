{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","commits":[{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","sourceNew":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Objects.requireNonNull(diagnostics);\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Objects.requireNonNull(attributes);\n    this.indexSort = indexSort;\n  }\n\n","sourceOld":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Objects.requireNonNull(diagnostics);\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Objects.requireNonNull(attributes);\n    this.indexSort = indexSort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","sourceNew":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Objects.requireNonNull(diagnostics);\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Objects.requireNonNull(attributes);\n    this.indexSort = indexSort;\n  }\n\n","sourceOld":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Objects.requireNonNull(diagnostics);\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Objects.requireNonNull(attributes);\n    this.indexSort = indexSort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","sourceNew":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Collections.unmodifiableMap(new HashMap<>(Objects.requireNonNull(diagnostics)));\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Collections.unmodifiableMap(new HashMap<>(Objects.requireNonNull(attributes)));\n    this.indexSort = indexSort;\n  }\n\n","sourceOld":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Objects.requireNonNull(diagnostics);\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Objects.requireNonNull(attributes);\n    this.indexSort = indexSort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd2b7ad87a1172d1d06dc8491991e52534c90f71","date":1555507572,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,Version,Version,String,int,boolean,Codec,Map[String,String],byte[],Map[String,String],Sort).mjava","sourceNew":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Map.copyOf(Objects.requireNonNull(diagnostics));\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Map.copyOf(Objects.requireNonNull(attributes));\n    this.indexSort = indexSort;\n  }\n\n","sourceOld":"  /**\n   * Construct a new complete SegmentInfo instance from input.\n   * <p>Note: this is public only to allow access from\n   * the codecs package.</p>\n   */\n  public SegmentInfo(Directory dir, Version version, Version minVersion, String name, int maxDoc,\n                     boolean isCompoundFile, Codec codec, Map<String,String> diagnostics,\n                     byte[] id, Map<String,String> attributes, Sort indexSort) {\n    assert !(dir instanceof TrackingDirectoryWrapper);\n    this.dir = Objects.requireNonNull(dir);\n    this.version = Objects.requireNonNull(version);\n    this.minVersion = minVersion;\n    this.name = Objects.requireNonNull(name);\n    this.maxDoc = maxDoc;\n    this.isCompoundFile = isCompoundFile;\n    this.codec = codec;\n    this.diagnostics = Collections.unmodifiableMap(new HashMap<>(Objects.requireNonNull(diagnostics)));\n    this.id = id;\n    if (id.length != StringHelper.ID_LENGTH) {\n      throw new IllegalArgumentException(\"invalid id: \" + Arrays.toString(id));\n    }\n    this.attributes = Collections.unmodifiableMap(new HashMap<>(Objects.requireNonNull(attributes)));\n    this.indexSort = indexSort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68ba24d6f9380e2463dbe5130d27502647f64904":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd2b7ad87a1172d1d06dc8491991e52534c90f71":["68ba24d6f9380e2463dbe5130d27502647f64904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd2b7ad87a1172d1d06dc8491991e52534c90f71"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68ba24d6f9380e2463dbe5130d27502647f64904":["fd2b7ad87a1172d1d06dc8491991e52534c90f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"fd2b7ad87a1172d1d06dc8491991e52534c90f71":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["68ba24d6f9380e2463dbe5130d27502647f64904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}