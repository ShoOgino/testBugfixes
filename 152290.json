{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","commits":[{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if(useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if(useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if(useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if(useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":["b940572a59da1b42b6c20ab5278155b12816807a","8c969f15cd04d31e520319c619a445ae21f02d72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7e81cd6c3e108547bc12beb23ba00ae90448b9","date":1564060380,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n\n    // Create a collection for use by the filestream() expression, and place some files there for it to read.\n    CollectionAdminRequest.createCollection(FILESTREAM_COLLECTION, \"conf\", 1, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(FILESTREAM_COLLECTION, 1, 1);\n    final String dataDir = findUserFilesDataDir();\n    populateFileStreamData(dataDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c36bc16f489634a3fcf14294704824192273df","date":1593058738,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n\n    // Create a collection for use by the filestream() expression, and place some files there for it to read.\n    CollectionAdminRequest.createCollection(FILESTREAM_COLLECTION, \"conf\", 1, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(FILESTREAM_COLLECTION, 1, 1);\n    final Path dataDir = findUserFilesDataDir();\n    populateFileStreamData(dataDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n\n    // Create a collection for use by the filestream() expression, and place some files there for it to read.\n    CollectionAdminRequest.createCollection(FILESTREAM_COLLECTION, \"conf\", 1, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(FILESTREAM_COLLECTION, 1, 1);\n    final String dataDir = findUserFilesDataDir();\n    populateFileStreamData(dataDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["73450c0955930295d34703e7ddbfc6973b7a121a"],"b940572a59da1b42b6c20ab5278155b12816807a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["8c969f15cd04d31e520319c619a445ae21f02d72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","af87133b5bdb246b06c4321f36cd76d947357ab6"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"e8c36bc16f489634a3fcf14294704824192273df":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"8c969f15cd04d31e520319c619a445ae21f02d72":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["73450c0955930295d34703e7ddbfc6973b7a121a","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8c36bc16f489634a3fcf14294704824192273df"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"73450c0955930295d34703e7ddbfc6973b7a121a":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["e8c36bc16f489634a3fcf14294704824192273df"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"8c969f15cd04d31e520319c619a445ae21f02d72":["af87133b5bdb246b06c4321f36cd76d947357ab6","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"e8c36bc16f489634a3fcf14294704824192273df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}