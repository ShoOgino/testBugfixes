{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field\", English.intToEnglish(i), StringField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["f06f30d971c742c504a1722d02ec7f44d0c2da37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testThousandDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testThousandDocuments().mjava","sourceNew":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testThousandDocuments() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", English.intToEnglish(i), Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    \n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(reader);\n    \n    for (int i = 0; i < 1000; i++) {\n      TermQuery termQuery = new TermQuery(new Term(\"field\", English.intToEnglish(i)));\n      QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n      TopDocs td = searcher.search(qwf, 10);\n      assertEquals(1, td.totalHits);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}