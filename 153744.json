{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","commits":[{"id":"511309ff970d3c2a68d1ac453cc187df1198f0d1","date":1410303604,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n\n        // identity math functions don't work as expected due to LUCENE-5961\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","sourceOld":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","sourceOld":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n\n        // identity math functions don't work as expected due to LUCENE-5961\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","sourceOld":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n\n        // identity math functions don't work as expected due to LUCENE-5961\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        // \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    assertQ(\"stats.facet w/ cardinality\"\n            , req(\"q\", \"*:*\", \"stats\", \"true\", \n                  \"fq\", \"-other_s:bar\",\n                  \"stats.facet\", \"active_s\", \n                  \"stats.field\", \"{!cardinality=true}\"+f)\n            , pre+\"/lst[@name='true' ]/long[@name='cardinality'][.='1']\"\n            , pre+\"/lst[@name='false']/long[@name='cardinality'][.='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#doTestFacetStatisticsResult(String,SolrParams[]).mjava","sourceNew":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivalent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    assertQ(\"stats.facet w/ cardinality\"\n            , req(\"q\", \"*:*\", \"stats\", \"true\", \n                  \"fq\", \"-other_s:bar\",\n                  \"stats.facet\", \"active_s\", \n                  \"stats.field\", \"{!cardinality=true}\"+f)\n            , pre+\"/lst[@name='true' ]/long[@name='cardinality'][.='1']\"\n            , pre+\"/lst[@name='false']/long[@name='cardinality'][.='2']\"\n            );\n\n  }\n\n","sourceOld":"  public void doTestFacetStatisticsResult(String f, SolrParams[] baseParamsSet) throws Exception {\n    assertU(adoc(\"id\", \"1\", f, \"10\", \"active_s\", \"true\",  \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"2\", f, \"20\", \"active_s\", \"true\",  \"other_s\", \"bar\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\", f, \"30\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(adoc(\"id\", \"4\", f, \"40\", \"active_s\", \"false\", \"other_s\", \"foo\"));\n    assertU(commit());\n    \n    final String pre = \"//lst[@name='stats_fields']/lst[@name='\"+f+\"']/lst[@name='facets']/lst[@name='active_s']\";\n\n    // status should be the same regardless of baseParams\n    for (SolrParams baseParams : baseParamsSet) {\n\n      assertQ(\"test value for active_s=true\", \n              req(baseParams, \n                  \"q\", \"*:*\", \"stats.calcdistinct\", \"true\",\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n\n      assertQ(\"test value for active_s=false\", \n              req(baseParams, \"q\", \"*:*\", \"stats.calcdistinct\", \"true\", \"stats.facet\", \"active_s\")\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    // we should be able to compute exact same stats & stats.facet for a field even\n    // when we specify it using the \"field()\" function, or use other \n    // identify equivilent functions\n    for (String param : new String[] {\n        // bare\n        \"{!key=\"+f+\" ex=key_ex_tag}\" + f,\n        \"{!key=\"+f+\" ex=key_ex_tag v=\"+f+\"}\",\n        // field func\n        \"{!lucene key=\"+f+\" ex=key_ex_tag}_val_:\\\"field(\"+f+\")\\\"\",\n        \"{!func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag}field(\"+f+\")\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v=field(\"+f+\")}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='field(\"+f+\")'}\",\n        // identity math functions\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='sum(0,\"+f+\")'}\",\n        \"{!type=func key=\"+f+\" ex=key_ex_tag v='product(1,\"+f+\")'}\",\n      }) {\n      assertQ(\"test statis & stats.facet over field specified as a function: \" + param,\n              req(\"q\", \"*:*\", \"stats\", \"true\", \"stats.calcdistinct\", \"true\",\n                  \"fq\", \"{!tag=key_ex_tag}-id:4\", \n                  \"stats.field\", param,\n                  \"stats.facet\", \"active_s\", \"stats.facet\", \"other_s\")\n              , \"*[count(\"+pre+\")=1]\"\n              , pre+\"/lst[@name='true']/double[@name='min'][.='10.0']\"\n              , pre+\"/lst[@name='true']/double[@name='max'][.='20.0']\"\n              , pre+\"/lst[@name='true']/double[@name='sum'][.='30.0']\"\n              , pre+\"/lst[@name='true']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='true']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='true']/double[@name='sumOfSquares'][.='500.0']\"\n              , pre+\"/lst[@name='true']/double[@name='mean'][.='15.0']\"\n              , pre+\"/lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']\"\n              //\n              , pre+\"/lst[@name='false']/double[@name='min'][.='30.0']\"\n              , pre+\"/lst[@name='false']/double[@name='max'][.='40.0']\"\n              , pre+\"/lst[@name='false']/double[@name='sum'][.='70.0']\"\n              , pre+\"/lst[@name='false']/long[@name='count'][.='2']\"\n              , pre+\"/lst[@name='false']/long[@name='missing'][.='0']\"\n              , pre + \"/lst[@name='true']/long[@name='countDistinct'][.='2']\"\n              , \"count(\" + pre + \"/lst[@name='true']/arr[@name='distinctValues']/*)=2\"\n              , pre+\"/lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']\"\n              , pre+\"/lst[@name='false']/double[@name='mean'][.='35.0']\"\n              , pre+\"/lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']\"\n              );\n    }\n\n    assertQ(\"stats.facet w/ cardinality\"\n            , req(\"q\", \"*:*\", \"stats\", \"true\", \n                  \"fq\", \"-other_s:bar\",\n                  \"stats.facet\", \"active_s\", \n                  \"stats.field\", \"{!cardinality=true}\"+f)\n            , pre+\"/lst[@name='true' ]/long[@name='cardinality'][.='1']\"\n            , pre+\"/lst[@name='false']/long[@name='cardinality'][.='2']\"\n            );\n\n  }\n\n","bugFix":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["283ff02f401ec3e7a2fad73643970f052383fb0c","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a701a7aab388afa1412a3dc23b4115c321f478c4":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"511309ff970d3c2a68d1ac453cc187df1198f0d1":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["511309ff970d3c2a68d1ac453cc187df1198f0d1"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}