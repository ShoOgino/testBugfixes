{"path":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(Query[]).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(Query[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: merges the clauses of a set of BooleanQuery's into a single\n   * BooleanQuery.\n   *\n   *<p>A utility for use by {@link #combine(Query[])} implementations.\n   */\n  public static Query mergeBooleanQueries(Query[] queries) {\n    HashSet allClauses = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      BooleanClause[] clauses = ((BooleanQuery)queries[i]).getClauses();\n      for (int j = 0; j < clauses.length; j++) {\n        allClauses.add(clauses[j]);\n      }\n    }\n\n    BooleanQuery result = new BooleanQuery();\n    Iterator i = allClauses.iterator();\n    while (i.hasNext()) {\n      result.add((BooleanClause)i.next());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(Query[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(Query[]).mjava","sourceNew":"  /** Expert: merges the clauses of a set of BooleanQuery's into a single\n   * BooleanQuery.\n   *\n   *<p>A utility for use by {@link #combine(Query[])} implementations.\n   */\n  public static Query mergeBooleanQueries(Query[] queries) {\n    HashSet allClauses = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      BooleanClause[] clauses = ((BooleanQuery)queries[i]).getClauses();\n      for (int j = 0; j < clauses.length; j++) {\n        allClauses.add(clauses[j]);\n      }\n    }\n\n    boolean coordDisabled =\n      queries.length==0? false : ((BooleanQuery)queries[0]).isCoordDisabled();\n    BooleanQuery result = new BooleanQuery(coordDisabled);\n    Iterator i = allClauses.iterator();\n    while (i.hasNext()) {\n      result.add((BooleanClause)i.next());\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Expert: merges the clauses of a set of BooleanQuery's into a single\n   * BooleanQuery.\n   *\n   *<p>A utility for use by {@link #combine(Query[])} implementations.\n   */\n  public static Query mergeBooleanQueries(Query[] queries) {\n    HashSet allClauses = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      BooleanClause[] clauses = ((BooleanQuery)queries[i]).getClauses();\n      for (int j = 0; j < clauses.length; j++) {\n        allClauses.add(clauses[j]);\n      }\n    }\n\n    BooleanQuery result = new BooleanQuery();\n    Iterator i = allClauses.iterator();\n    while (i.hasNext()) {\n      result.add((BooleanClause)i.next());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d1a6ccc6d07612c389019234265f3ff6feb18e8","date":1245161308,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(BooleanQuery[]).mjava","pathOld":"src/java/org/apache/lucene/search/Query#mergeBooleanQueries(Query[]).mjava","sourceNew":"  /** Expert: merges the clauses of a set of BooleanQuery's into a single\n   * BooleanQuery.\n   *\n   *<p>A utility for use by {@link #combine(Query[])} implementations.\n   */\n  public static Query mergeBooleanQueries(BooleanQuery[] queries) {\n    HashSet allClauses = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      BooleanClause[] clauses = queries[i].getClauses();\n      for (int j = 0; j < clauses.length; j++) {\n        allClauses.add(clauses[j]);\n      }\n    }\n\n    boolean coordDisabled =\n      queries.length==0? false : queries[0].isCoordDisabled();\n    BooleanQuery result = new BooleanQuery(coordDisabled);\n    Iterator i = allClauses.iterator();\n    while (i.hasNext()) {\n      result.add((BooleanClause)i.next());\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Expert: merges the clauses of a set of BooleanQuery's into a single\n   * BooleanQuery.\n   *\n   *<p>A utility for use by {@link #combine(Query[])} implementations.\n   */\n  public static Query mergeBooleanQueries(Query[] queries) {\n    HashSet allClauses = new HashSet();\n    for (int i = 0; i < queries.length; i++) {\n      BooleanClause[] clauses = ((BooleanQuery)queries[i]).getClauses();\n      for (int j = 0; j < clauses.length; j++) {\n        allClauses.add(clauses[j]);\n      }\n    }\n\n    boolean coordDisabled =\n      queries.length==0? false : ((BooleanQuery)queries[0]).isCoordDisabled();\n    BooleanQuery result = new BooleanQuery(coordDisabled);\n    Iterator i = allClauses.iterator();\n    while (i.hasNext()) {\n      result.add((BooleanClause)i.next());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d1a6ccc6d07612c389019234265f3ff6feb18e8":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d1a6ccc6d07612c389019234265f3ff6feb18e8"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["27274410c91546fcfc28e692abd2dd77ca99be4b"]},"commit2Childs":{"2d1a6ccc6d07612c389019234265f3ff6feb18e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["2d1a6ccc6d07612c389019234265f3ff6feb18e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}