{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler);\n      \n      processResponses(results, shardHandler);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler);\n      \n      processResponses(results, shardHandler);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler);\n      \n      processResponses(results, shardHandler);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler);\n      \n      processResponses(results, shardHandler);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      long now = System.nanoTime();\n      long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (System.nanoTime() < timeout) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler);\n      \n      processResponses(results, shardHandler);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34127d6b305c3e200d697bfcb58e639d65250c6f","date":1457034866,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"bugIntro":["092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, \"true\");\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collection, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        removed = zkStateReader.getClusterState().getSlice(collection, sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collection + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n\n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      ocmh.sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11","344b0840364d990b29b97467bfcc766ff8325d11","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n\n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      ocmh.sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      ocmh.processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#deleteShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void deleteShard(ClusterState clusterState, ZkNodeProps message, NamedList results) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    \n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getSlice(collectionName, sliceId);\n    \n    if (slice == null) {\n      if (clusterState.hasCollection(collectionName)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collectionName);\n      }\n    }\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    String asyncId = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (asyncId != null) {\n      requestMap = new HashMap<>(slice.getReplicas().size(), 1.0f);\n    }\n    \n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n      params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n      sliceCmd(clusterState, params, null, slice, shardHandler, asyncId, requestMap);\n\n      processResponses(results, shardHandler, true, \"Failed to delete shard\", asyncId, requestMap, Collections.emptySet());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      \n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n      \n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n      \n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["f9362075f92dff89425ca488b480f70d565d66e7","19498030e0adab22f604f935cae3c03dcf0952a6"],"3bbb741690cdafda7f1f7549c26351c912917a69":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["19498030e0adab22f604f935cae3c03dcf0952a6"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19498030e0adab22f604f935cae3c03dcf0952a6":["f9362075f92dff89425ca488b480f70d565d66e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"f9362075f92dff89425ca488b480f70d565d66e7":["3bbb741690cdafda7f1f7549c26351c912917a69"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","34127d6b305c3e200d697bfcb58e639d65250c6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f9362075f92dff89425ca488b480f70d565d66e7"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653","34127d6b305c3e200d697bfcb58e639d65250c6f"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"f9362075f92dff89425ca488b480f70d565d66e7":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}