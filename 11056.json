{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointMultiValuedFunctionQuery(String,String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointMultiValuedFunctionQuery(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointMultiValuedFunctionQuery(String,String,String,String[]).mjava","sourceNew":"  private void doTestPointMultiValuedFunctionQuery(String nonDocValuesField, String docValuesField, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], docValuesField, numbers[i+10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i+10]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String function = \"field(\" + docValuesField + \", min)\";\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"sort\", function + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n\n    function = \"field(\" + nonDocValuesField + \",min)\";\n    \n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", function + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    assertQEx(\"Expecting Exception\", \n        \"docValues='true' is required to select 'min' value from multivalued field (\" + nonDocValuesField + \") at query time\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    function = \"field(\" + docValuesField + \",foo)\";\n    assertQEx(\"Expecting Exception\", \n        \"Multi-Valued field selector 'foo' not supported\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointMultiValuedFunctionQuery(String nonDocValuesField, String docValuesField, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], docValuesField, numbers[i+10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i+10]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String function = \"field(\" + docValuesField + \", min)\";\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"sort\", function + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n\n    function = \"field(\" + nonDocValuesField + \",min)\";\n    \n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", function + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    assertQEx(\"Expecting Exception\", \n        \"docValues='true' is required to select 'min' value from multivalued field (\" + nonDocValuesField + \") at query time\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    function = \"field(\" + docValuesField + \",foo)\";\n    assertQEx(\"Expecting Exception\", \n        \"Multi-Valued field selector 'foo' not supported\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointMultiValuedFunctionQuery(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointMultiValuedFunctionQuery(String,String,String,String[]).mjava","sourceNew":"  private void doTestPointMultiValuedFunctionQuery(String nonDocValuesField, String docValuesField, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], docValuesField, numbers[i+10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i+10]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String function = \"field(\" + docValuesField + \", min)\";\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"sort\", function + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n\n    function = \"field(\" + nonDocValuesField + \",min)\";\n    \n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", function + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    assertQEx(\"Expecting Exception\", \n        \"docValues='true' is required to select 'min' value from multivalued field (\" + nonDocValuesField + \") at query time\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    function = \"field(\" + docValuesField + \",foo)\";\n    assertQEx(\"Expecting Exception\", \n        \"Multi-Valued field selector 'foo' not supported\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointMultiValuedFunctionQuery(String nonDocValuesField, String docValuesField, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], docValuesField, numbers[i+10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i+10]));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String function = \"field(\" + docValuesField + \", min)\";\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"sort\", function + \" desc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/str[@name='id'][.='9']\",\n        \"//result/doc[2]/str[@name='id'][.='8']\",\n        \"//result/doc[3]/str[@name='id'][.='7']\",\n        \"//result/doc[10]/str[@name='id'][.='0']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n\n    function = \"field(\" + nonDocValuesField + \",min)\";\n    \n    assertQEx(\"Expecting Exception\", \n        \"sort param could not be parsed as a query\", \n        req(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", function + \" desc\"), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    assertQEx(\"Expecting Exception\", \n        \"docValues='true' is required to select 'min' value from multivalued field (\" + nonDocValuesField + \") at query time\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    function = \"field(\" + docValuesField + \",foo)\";\n    assertQEx(\"Expecting Exception\", \n        \"Multi-Valued field selector 'foo' not supported\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + function), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}