{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c807c4005aae1acaf5cebc9af40883985fb89a8","date":1366974206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(TEST_VERSION_CURRENT, filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 });\n  }\n\n","bugFix":["1a6997833904932b5332aede01bfd0f7ce4df318"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(TEST_VERSION_CURRENT, filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(TEST_VERSION_CURRENT, filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(TEST_VERSION_CURRENT, filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a255765a5625ff80fba75863de5a16ea392015e","date":1528161860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2, false);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","bugFix":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2, false);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2, false);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new NGramTokenFilter(filters, 2, 2);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"os\", \"sf\", \"fe\", \"el\", \"ll\", \"ls\", \"sb\", \"ba\", \"ae\", \"er\" },\n        new int[]    {    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0 },\n        new int[]    {   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11 },\n        new int[]    {     1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0  });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a255765a5625ff80fba75863de5a16ea392015e":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a56958d7f71a28824f20031ffbb2e13502a0274e","8a255765a5625ff80fba75863de5a16ea392015e"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"f592209545c71895260367152601e9200399776d":["a56958d7f71a28824f20031ffbb2e13502a0274e","8a255765a5625ff80fba75863de5a16ea392015e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a255765a5625ff80fba75863de5a16ea392015e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"8a255765a5625ff80fba75863de5a16ea392015e":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8a255765a5625ff80fba75863de5a16ea392015e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}