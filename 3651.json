{"path":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","sourceNew":null,"sourceOld":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#partialEscape(CharSequence).mjava","sourceNew":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","sourceOld":"  public static CharSequence partialEscape(CharSequence s) {\n    StringBuilder sb = new StringBuilder();\n\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n      char c = s.charAt(i);\n      if (c == ':') {\n        // look forward to make sure it's something that won't\n        // cause a parse exception (something that won't be escaped... like\n        // +,-,:, whitespace\n        if (i+1<len && i>0) {\n          char ch = s.charAt(i+1);\n          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {\n            // OK, at this point the chars after the ':' will be fine.\n            // now look back and try to determine if this is a fieldname\n            // [+,-]? [letter,_] [letter digit,_,-,.]*\n            // This won't cover *all* possible lucene fieldnames, but we should\n            // only pick nice names to begin with\n            int start, pos;\n            for (start=i-1; start>=0; start--) {\n              ch = s.charAt(start);\n              if (Character.isWhitespace(ch)) break;\n            }\n\n            // skip whitespace\n            pos = start+1;\n\n            // skip leading + or -\n            ch = s.charAt(pos);\n            if (ch=='+' || ch=='-') {\n              pos++;\n            }\n\n            // we don't need to explicitly check for end of string\n            // since ':' will act as our sentinal\n\n              // first char can't be '-' or '.'\n              ch = s.charAt(pos++);\n              if (Character.isJavaIdentifierPart(ch)) {\n\n                for(;;) {\n                  ch = s.charAt(pos++);\n                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {\n                    break;\n                  }\n                }\n\n                if (pos<=i) {\n                  // OK, we got to the ':' and everything looked like a valid fieldname, so\n                  // don't escape the ':'\n                  sb.append(':');\n                  continue;  // jump back to start of outer-most loop\n                }\n\n              }\n\n\n          }\n        }\n\n        // we fell through to here, so we should escape this like other reserved chars.\n        sb.append('\\\\');\n      }\n      else if (c == '\\\\' || c == '!' || c == '(' || c == ')' ||\n          c == '^' || c == '[' || c == ']' ||\n          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'\n          )\n      {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}