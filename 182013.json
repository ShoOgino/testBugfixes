{"path":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","commits":[{"id":"d1b4f9f023bf5098df34505adf1ed91daa67c239","date":1157655314,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFacetFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts() \n    throws IOException {\n    \n    NamedList res = new NamedList();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs && 0 != facetFs.length) {\n      \n      for (String f : facetFs) {\n\n        NamedList counts = getFacetTermEnumCounts(f);\n        \n        if (params.getFieldBool(f, params.FACET_MISSING, false))\n          counts.add(null, getFacetFieldMissingCount(f));\n        \n        res.add(f, counts);\n        \n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9727734a64d33a1345c9251f53eb375f04c583e","date":1158874656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new NamedList();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFacetFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts() \n    throws IOException {\n    \n    NamedList res = new NamedList();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs && 0 != facetFs.length) {\n      \n      for (String f : facetFs) {\n\n        NamedList counts = getFacetTermEnumCounts(f);\n        \n        if (params.getFieldBool(f, params.FACET_MISSING, false))\n          counts.add(null, getFacetFieldMissingCount(f));\n        \n        res.add(f, counts);\n        \n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new NamedList();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(SolrParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b6124b1a8da43c086b34ee5005d89e20f4f0764","date":1189219182,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see FacetParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see SolrParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see FacetParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException, ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        parseParams(FacetParams.FACET_FIELD, f);\n        String termList = localParams == null ? null : localParams.get(CommonParams.TERMS);\n        if (termList != null) {\n          res.add(key, getListedTermCounts(facetValue, termList));\n        } else {\n          res.add(key, getTermCounts(facetValue));\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see FacetParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        res.add(f, getTermCounts(f));\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetFieldCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see FacetParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException, ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        parseParams(FacetParams.FACET_FIELD, f);\n        String termList = localParams == null ? null : localParams.get(CommonParams.TERMS);\n        if (termList != null) {\n          res.add(key, getListedTermCounts(facetValue, termList));\n        } else {\n          res.add(key, getTermCounts(facetValue));\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet field specified in the params.\n   *\n   * @see FacetParams#FACET_FIELD\n   * @see #getFieldMissingCount\n   * @see #getFacetTermEnumCounts\n   */\n  public NamedList getFacetFieldCounts()\n          throws IOException, ParseException {\n\n    NamedList res = new SimpleOrderedMap();\n    String[] facetFs = params.getParams(FacetParams.FACET_FIELD);\n    if (null != facetFs) {\n      for (String f : facetFs) {\n        parseParams(FacetParams.FACET_FIELD, f);\n        String termList = localParams == null ? null : localParams.get(CommonParams.TERMS);\n        if (termList != null) {\n          res.add(key, getListedTermCounts(facetValue, termList));\n        } else {\n          res.add(key, getTermCounts(facetValue));\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4145b7b13874de95211223a6edb648da8794a688"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"ad94625fb8d088209f46650c8097196fec67f00c":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"4145b7b13874de95211223a6edb648da8794a688":["c9727734a64d33a1345c9251f53eb375f04c583e"],"c9727734a64d33a1345c9251f53eb375f04c583e":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["c9727734a64d33a1345c9251f53eb375f04c583e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["ad94625fb8d088209f46650c8097196fec67f00c"],"4145b7b13874de95211223a6edb648da8794a688":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c9727734a64d33a1345c9251f53eb375f04c583e":["4145b7b13874de95211223a6edb648da8794a688"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}