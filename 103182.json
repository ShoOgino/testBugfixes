{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"/dev/null","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":null,"sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"/dev/null","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#getRowIterator(Reader,String).mjava","sourceNew":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","sourceOld":"  private Iterator<Map<String, Object>> getRowIterator(final Reader data, final String s) {\n    //nothing atomic about it. I just needed a StongReference\n    final AtomicReference<Exception> exp = new AtomicReference<Exception>();\n    final BlockingQueue<Map<String, Object>> blockingQueue = new ArrayBlockingQueue<Map<String, Object>>(blockingQueueSize);\n    final AtomicBoolean isEnd = new AtomicBoolean(false);\n    final AtomicBoolean throwExp = new AtomicBoolean(true);\n    publisherThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          xpathReader.streamRecords(data, new XPathRecordReader.Handler() {\n            @SuppressWarnings(\"unchecked\")\n            public void handle(Map<String, Object> record, String xpath) {\n              if (isEnd.get()) {\n                throwExp.set(false);\n                //To end the streaming . otherwise the parsing will go on forever\n                //though consumer has gone away\n                throw new RuntimeException(\"BREAK\");\n              }\n              Map<String, Object> row;\n              try {\n                row = readRow(record, xpath);\n              } catch (Exception e) {\n                isEnd.set(true);\n                return;\n              }\n              offer(row);\n            }\n          });\n        } catch (Exception e) {\n          if(throwExp.get()) exp.set(e);\n        } finally {\n          closeIt(data);\n          if (!isEnd.get()) {\n            offer(END_MARKER);\n          }\n        }\n      }\n      \n      private void offer(Map<String, Object> row) {\n        try {\n          while (!blockingQueue.offer(row, blockingQueueTimeOut, blockingQueueTimeOutUnits)) {\n            if (isEnd.get()) return;\n            LOG.debug(\"Timeout elapsed writing records.  Perhaps buffer size should be increased.\");\n          }\n        } catch (InterruptedException e) {\n          return;\n        } finally {\n          synchronized (this) {\n            notifyAll();\n          }\n        }\n      }\n    };\n    \n    publisherThread.start();\n\n    return new Iterator<Map<String, Object>>() {\n      private Map<String, Object> lastRow;\n      int count = 0;\n\n      public boolean hasNext() {\n        return !isEnd.get();\n      }\n\n      public Map<String, Object> next() {\n        Map<String, Object> row;\n        \n        do {\n          try {\n            row = blockingQueue.poll(blockingQueueTimeOut, blockingQueueTimeOutUnits);\n            if (row == null) {\n              LOG.debug(\"Timeout elapsed reading records.\");\n            }\n          } catch (InterruptedException e) {\n            LOG.debug(\"Caught InterruptedException while waiting for row.  Aborting.\");\n            isEnd.set(true);\n            return null;\n          }\n        } while (row == null);\n        \n        if (row == END_MARKER) {\n          isEnd.set(true);\n          if (exp.get() != null) {\n            String msg = \"Parsing failed for xml, url:\" + s + \" rows processed in this xml:\" + count;\n            if (lastRow != null) msg += \" last row in this xml:\" + lastRow;\n            if (ABORT.equals(onError)) {\n              wrapAndThrow(SEVERE, exp.get(), msg);\n            } else if (SKIP.equals(onError)) {\n              wrapAndThrow(DataImportHandlerException.SKIP, exp.get());\n            } else {\n              LOG.warn(msg, exp.get());\n            }\n          }\n          return null;\n        } \n        count++;\n        return lastRow = row;\n      }\n\n      public void remove() {\n        /*no op*/\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}