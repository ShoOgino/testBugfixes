{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(searcher.getIndexReader()) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = new TermRangeQuery(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testAllDocs().mjava","sourceNew":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testAllDocs() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = new TermRangeQuery(\"content\", null, null, true, true);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"content\");\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = new TermRangeQuery(\"content\", null, null, false, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    query = TermRangeQuery.newStringRange(\"content\", \"\", null, true, false);\n    assertFalse(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(4, searcher.search(query, null, 1000).scoreDocs.length);\n    // and now anothe one\n    query = TermRangeQuery.newStringRange(\"content\", \"B\", null, true, false);\n    assertTrue(query.getTermsEnum(terms) instanceof TermRangeTermsEnum);\n    assertEquals(3, searcher.search(query, null, 1000).scoreDocs.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}