{"path":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#processTest(CloudSolrClient).mjava","commits":[{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#processTest(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private void processTest(CloudSolrClient client) throws Exception {\n\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n\n      doc.setField(\"id\", i);\n      doc.setField(\"text\", \"foo\");\n      client.add(doc);\n    }\n\n    client.commit();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    List<Callable<Boolean>> callableList = new ArrayList<>();\n    List<Future<Boolean>> futures;\n\n    try {\n      for (int i = 0; i < 25; i++) {\n        callableList.add(() -> {\n          try {\n            QueryResponse response = client.query(new SolrQuery(\"*:*\"));\n\n            assertEquals(100, response.getResults().getNumFound());\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n\n          return true;\n        });\n      }\n\n      futures = executor.invokeAll(callableList);\n\n      for (Future<?> future : futures) {\n        try {\n          assertTrue(future.get() != null);\n        } catch (Exception e) {\n          assertThat(e.getMessage(), containsString(\"non ok status: 429, message:Too Many Requests\"));\n        }\n      }\n    } finally {\n      executor.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb0add11bccdea6f8a289cec694aa9f3895ef4e","date":1597165973,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#processTest(CloudSolrClient,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#processTest(CloudSolrClient).mjava","sourceNew":"  private void processTest(CloudSolrClient client, int numDocuments, int numQueries) throws Exception {\n\n    for (int i = 0; i < numDocuments; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n\n      doc.setField(\"id\", i);\n      doc.setField(\"text\", \"foo\");\n      client.add(doc);\n    }\n\n    client.commit();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    List<Callable<Boolean>> callableList = new ArrayList<>();\n    List<Future<Boolean>> futures;\n\n    try {\n      for (int i = 0; i < numQueries; i++) {\n        callableList.add(() -> {\n          try {\n            QueryResponse response = client.query(new SolrQuery(\"*:*\"));\n\n            assertEquals(numDocuments, response.getResults().getNumFound());\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n\n          return true;\n        });\n      }\n\n      futures = executor.invokeAll(callableList);\n\n      for (Future<?> future : futures) {\n        try {\n          assertTrue(future.get() != null);\n        } catch (Exception e) {\n          assertThat(e.getMessage(), containsString(\"non ok status: 429, message:Too Many Requests\"));\n        }\n      }\n    } finally {\n      executor.shutdown();\n    }\n  }\n\n","sourceOld":"  private void processTest(CloudSolrClient client) throws Exception {\n\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n\n      doc.setField(\"id\", i);\n      doc.setField(\"text\", \"foo\");\n      client.add(doc);\n    }\n\n    client.commit();\n\n    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool(\"threadpool\");\n    List<Callable<Boolean>> callableList = new ArrayList<>();\n    List<Future<Boolean>> futures;\n\n    try {\n      for (int i = 0; i < 25; i++) {\n        callableList.add(() -> {\n          try {\n            QueryResponse response = client.query(new SolrQuery(\"*:*\"));\n\n            assertEquals(100, response.getResults().getNumFound());\n          } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n          }\n\n          return true;\n        });\n      }\n\n      futures = executor.invokeAll(callableList);\n\n      for (Future<?> future : futures) {\n        try {\n          assertTrue(future.get() != null);\n        } catch (Exception e) {\n          assertThat(e.getMessage(), containsString(\"non ok status: 429, message:Too Many Requests\"));\n        }\n      }\n    } finally {\n      executor.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c99002731351c8c955238845b0038682148eec53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fb0add11bccdea6f8a289cec694aa9f3895ef4e":["c99002731351c8c955238845b0038682148eec53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0fb0add11bccdea6f8a289cec694aa9f3895ef4e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c99002731351c8c955238845b0038682148eec53"],"c99002731351c8c955238845b0038682148eec53":["0fb0add11bccdea6f8a289cec694aa9f3895ef4e"],"0fb0add11bccdea6f8a289cec694aa9f3895ef4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}