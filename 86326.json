{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","commits":[{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random)) { \n      final double maxMBPerSec = 10 + 5*(random.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random)) { \n      final double maxMBPerSec = 10 + 5*(random.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4f556b82db31fb563c4d6c44604ac6c92017a8","date":1397571871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random) && !bare) { \n      final double maxMBPerSec = 10 + 5*(random.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random)) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random)) { \n      final double maxMBPerSec = 10 + 5*(random.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a135438c33df9bffb763f5e15d4ac63251107fd","date":1417049132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random) && !bare) { \n      final double maxMBPerSec = TestUtil.nextInt(random, 20, 40);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random) && !bare) { \n      final double maxMBPerSec = 10 + 5*(random.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"431452b6326a9c17ba5bb1e1a6d89e23a8932e73","date":1417113370,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (TEST_NIGHTLY && rarely(random) && !bare) { \n      final double maxMBPerSec = TestUtil.nextInt(random, 20, 40);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (rarely(random) && !bare) { \n      final double maxMBPerSec = TestUtil.nextInt(random, 20, 40);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (TEST_NIGHTLY && rarely(random) && !bare) { \n      final double maxMBPerSec = TestUtil.nextInt(random, 20, 40);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"LuceneTestCase: will rate limit output IndexOutput to \" + maxMBPerSec + \" MB/sec\");\n      }\n      final RateLimitedDirectoryWrapper rateLimitedDirectoryWrapper = new RateLimitedDirectoryWrapper(directory);\n      switch (random.nextInt(10)) {\n        case 3: // sometimes rate limit on flush\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          break;\n        case 2: // sometimes rate limit flush & merge\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.FLUSH);\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n          break;\n        default:\n          rateLimitedDirectoryWrapper.setMaxWriteMBPerSec(maxMBPerSec, Context.MERGE);\n      }\n      directory =  rateLimitedDirectoryWrapper;\n      \n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n    \n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98b44240f64a2d6935543ff25faee750b29204eb","date":1424972040,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new BaseDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","date":1578318221,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare, boolean filesystem) {\n    // IOContext randomization might make NRTCachingDirectory make bad decisions, so avoid\n    // using it if the user requested a filesystem directory.\n    if (rarely(random) && !bare && filesystem == false) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#wrapDirectory(Random,Directory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare, boolean filesystem) {\n    // IOContext randomization might make NRTCachingDirectory make bad decisions, so avoid\n    // using it if the user requested a filesystem directory.\n    if (rarely(random) && !bare && filesystem == false) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper wrapDirectory(Random random, Directory directory, boolean bare) {\n    if (rarely(random) && !bare) {\n      directory = new NRTCachingDirectory(directory, random.nextDouble(), random.nextDouble());\n    }\n\n    if (bare) {\n      BaseDirectoryWrapper base = new RawDirectoryWrapper(directory);\n      closeAfterSuite(new CloseableDirectory(base, suiteFailureMarker));\n      return base;\n    } else {\n      MockDirectoryWrapper mock = new MockDirectoryWrapper(random, directory);\n      \n      mock.setThrottling(TEST_THROTTLING);\n      closeAfterSuite(new CloseableDirectory(mock, suiteFailureMarker));\n      return mock;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98a04f56464afdffd4c430d6c47a0c868a38354e":["51f5280f31484820499077f41fcdfe92d527d9dc","98b44240f64a2d6935543ff25faee750b29204eb"],"9eae2a56dc810a17cf807d831f720dec931a03de":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"407687e67faf6e1f02a211ca078d8e3eed631027":["9eae2a56dc810a17cf807d831f720dec931a03de","e4583d4aac44f313f9af74ab6d81baab3f976232"],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"431452b6326a9c17ba5bb1e1a6d89e23a8932e73":["3a135438c33df9bffb763f5e15d4ac63251107fd"],"51f5280f31484820499077f41fcdfe92d527d9dc":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["98a04f56464afdffd4c430d6c47a0c868a38354e","e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["51f5280f31484820499077f41fcdfe92d527d9dc","98a04f56464afdffd4c430d6c47a0c868a38354e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["9eae2a56dc810a17cf807d831f720dec931a03de"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["431452b6326a9c17ba5bb1e1a6d89e23a8932e73"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d19974432be9aed28ee7dca73bdf01d139e763a9"],"3a135438c33df9bffb763f5e15d4ac63251107fd":["2b4f556b82db31fb563c4d6c44604ac6c92017a8"],"2b4f556b82db31fb563c4d6c44604ac6c92017a8":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"98b44240f64a2d6935543ff25faee750b29204eb":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"]},"commit2Childs":{"98a04f56464afdffd4c430d6c47a0c868a38354e":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","ca62564055241632cd20d65b5ecb8c8e93bd60c4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"9eae2a56dc810a17cf807d831f720dec931a03de":["407687e67faf6e1f02a211ca078d8e3eed631027","e4583d4aac44f313f9af74ab6d81baab3f976232"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"431452b6326a9c17ba5bb1e1a6d89e23a8932e73":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"51f5280f31484820499077f41fcdfe92d527d9dc":["98a04f56464afdffd4c430d6c47a0c868a38354e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98b44240f64a2d6935543ff25faee750b29204eb"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","2b4f556b82db31fb563c4d6c44604ac6c92017a8"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["9eae2a56dc810a17cf807d831f720dec931a03de","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["51f5280f31484820499077f41fcdfe92d527d9dc"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"3a135438c33df9bffb763f5e15d4ac63251107fd":["431452b6326a9c17ba5bb1e1a6d89e23a8932e73"],"2b4f556b82db31fb563c4d6c44604ac6c92017a8":["3a135438c33df9bffb763f5e15d4ac63251107fd"],"98b44240f64a2d6935543ff25faee750b29204eb":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","ca62564055241632cd20d65b5ecb8c8e93bd60c4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}