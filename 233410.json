{"path":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","sourceNew":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   * \n   * @see DummyConcurrentLock\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   * \n   * @see DummyConcurrentLock\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e","date":1340383934,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","sourceNew":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   * \n   * @see DummyConcurrentLock\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","sourceNew":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   * \n   * @see DummyConcurrentLock\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,Counter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#RecyclingByteBlockAllocator(int,int,AtomicLong).mjava","sourceNew":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link Counter} reference counting internally allocated bytes\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      Counter bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[maxBufferedBlocks][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link RecyclingByteBlockAllocator}\n   * \n   * @param blockSize\n   *          the block size in bytes\n   * @param maxBufferedBlocks\n   *          maximum number of buffered byte block\n   * @param bytesUsed\n   *          {@link AtomicLong} reference counting internally allocated bytes\n   */\n  public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks,\n      AtomicLong bytesUsed) {\n    super(blockSize);\n    freeByteBlocks = new byte[Math.min(10, maxBufferedBlocks)][];\n    this.maxBufferedBlocks = maxBufferedBlocks;\n    this.bytesUsed = bytesUsed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f23749940fd96f4a3f8f4d96d5fba4193e3f0d0e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}