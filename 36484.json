{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testCatenateAllEmittedBeforeParts().mjava","commits":[{"id":"1c85bcc0cb48e35688c792a172bed271a9836d6b","date":1571776257,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testCatenateAllEmittedBeforeParts().mjava","pathOld":"/dev/null","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-9006\n  public void testCatenateAllEmittedBeforeParts() throws Exception {\n    // no number parts\n    final int flags = PRESERVE_ORIGINAL | GENERATE_WORD_PARTS | CATENATE_ALL;\n\n    //not using getAnalyzer because we want adjustInternalOffsets=true\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, true, DEFAULT_WORD_DELIM_TABLE, flags, null));\n      }\n    };\n\n    // input starts with a number, but we don't generate numbers.\n    //   Nonetheless preserve-original and concatenate-all show up first.\n    assertTokenStreamContents(a.tokenStream(\"dummy\", \"8-other\"),\n        new String[] { \"8-other\", \"8other\", \"other\" }, new int[]{0, 0, 2}, new int[]{7, 7, 7});\n\n    boolean useCharFilter = true;\n    boolean graphOffsetsAreCorrect = false; // note: could solve via always incrementing wordPos on first word ('8')\n    checkAnalysisConsistency(random(), a, useCharFilter, \"8-other\", graphOffsetsAreCorrect);\n\n    verify(\"8-other\", flags); // uses getAnalyzer which uses adjustInternalOffsets=false which works\n\n    a.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9e49c51f93f7565211a806715673bf9cf774690","date":1601605665,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testCatenateAllEmittedBeforeParts().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#testCatenateAllEmittedBeforeParts().mjava","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-9006\n  public void testCatenateAllEmittedBeforeParts() throws Exception {\n    // no number parts\n    final int flags = PRESERVE_ORIGINAL | GENERATE_WORD_PARTS | CATENATE_ALL;\n    final boolean useCharFilter = true;\n    final boolean graphOffsetsAreCorrect = false; // note: could solve via always incrementing wordPos on first word ('8')\n\n    //not using getAnalyzer because we want adjustInternalOffsets=true\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, true, DEFAULT_WORD_DELIM_TABLE, flags, null));\n      }\n    };\n\n    // input starts with a number, but we don't generate numbers.\n    //   Nonetheless preserve-original and concatenate-all show up first.\n    assertTokenStreamContents(a.tokenStream(\"dummy\", \"8-other\"),\n        new String[] { \"8-other\", \"8other\", \"other\" }, new int[]{0, 0, 2}, new int[]{7, 7, 7}, new int[]{1, 0, 0});\n    checkAnalysisConsistency(random(), a, useCharFilter, \"8-other\", graphOffsetsAreCorrect);\n    verify(\"8-other\", flags); // uses getAnalyzer which uses adjustInternalOffsets=false which works\n\n    // input ends with a number, but we don't generate numbers\n    assertTokenStreamContents(a.tokenStream(\"dummy\", \"other-9\"),\n        new String[] { \"other-9\", \"other9\", \"other\" }, new int[]{0, 0, 0}, new int[]{7, 7, 5}, new int[]{1, 0, 0});\n    checkAnalysisConsistency(random(), a, useCharFilter, \"other-9\", graphOffsetsAreCorrect);\n    verify(\"9-other\", flags); // uses getAnalyzer which uses adjustInternalOffsets=false which works\n\n    a.close();\n  }\n\n","sourceOld":"  // https://issues.apache.org/jira/browse/LUCENE-9006\n  public void testCatenateAllEmittedBeforeParts() throws Exception {\n    // no number parts\n    final int flags = PRESERVE_ORIGINAL | GENERATE_WORD_PARTS | CATENATE_ALL;\n\n    //not using getAnalyzer because we want adjustInternalOffsets=true\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterGraphFilter(tokenizer, true, DEFAULT_WORD_DELIM_TABLE, flags, null));\n      }\n    };\n\n    // input starts with a number, but we don't generate numbers.\n    //   Nonetheless preserve-original and concatenate-all show up first.\n    assertTokenStreamContents(a.tokenStream(\"dummy\", \"8-other\"),\n        new String[] { \"8-other\", \"8other\", \"other\" }, new int[]{0, 0, 2}, new int[]{7, 7, 7});\n\n    boolean useCharFilter = true;\n    boolean graphOffsetsAreCorrect = false; // note: could solve via always incrementing wordPos on first word ('8')\n    checkAnalysisConsistency(random(), a, useCharFilter, \"8-other\", graphOffsetsAreCorrect);\n\n    verify(\"8-other\", flags); // uses getAnalyzer which uses adjustInternalOffsets=false which works\n\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9e49c51f93f7565211a806715673bf9cf774690":["1c85bcc0cb48e35688c792a172bed271a9836d6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c85bcc0cb48e35688c792a172bed271a9836d6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9e49c51f93f7565211a806715673bf9cf774690"]},"commit2Childs":{"a9e49c51f93f7565211a806715673bf9cf774690":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c85bcc0cb48e35688c792a172bed271a9836d6b"],"1c85bcc0cb48e35688c792a172bed271a9836d6b":["a9e49c51f93f7565211a806715673bf9cf774690"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}