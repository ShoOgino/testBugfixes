{"path":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","sourceNew":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/PriorityQueue#insertWithOverflow(T).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds an Object to a PriorityQueue in log(size) time.\n   * It returns the object (if any) that was\n   * dropped off the heap because it was full. This can be\n   * the given parameter (in case it is smaller than the\n   * full heap's minimum, and couldn't be added), or another\n   * object that was previously the smallest value in the\n   * heap and now has been replaced by a larger one, or null\n   * if the queue wasn't yet full with maxSize elements.\n   */\n  public T insertWithOverflow(T element) {\n    if (size < maxSize) {\n      add(element);\n      return null;\n    } else if (size > 0 && !lessThan(element, heap[1])) {\n      T ret = heap[1];\n      heap[1] = element;\n      updateTop();\n      return ret;\n    } else {\n      return element;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}