{"path":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","commits":[{"id":"269c8e9f1563aaf046389326e061a3a2c6a62a73","date":1173126130,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new LinkedList<Query>();\n    SolrIndexSearcher s = req.getSearcher();\n    /* Ignore SolrParams.DF - could have init param FQs assuming the\n     * schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default, they should be explicit in the FQ.\n     */\n    SolrQueryParser qp = new SolrQueryParser(s.getSchema(), null);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(qp.parse(q));\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eefd1bf0c07385d4769d48983978d83a4053342","date":1215715414,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new LinkedList<Query>();\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new LinkedList<Query>();\n    SolrIndexSearcher s = req.getSearcher();\n    /* Ignore SolrParams.DF - could have init param FQs assuming the\n     * schema default with query param DF intented to only affect Q.\n     * If user doesn't want schema default, they should be explicit in the FQ.\n     */\n    SolrQueryParser qp = new SolrQueryParser(s.getSchema(), null);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(qp.parse(q));\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c4734592334b2ab642dd69aaf7095b63280f945","date":1232847261,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new LinkedList<Query>();\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#parseQueryStrings(SolrQueryRequest,String[]).mjava","sourceNew":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /** Turns an array of query strings into a List of Query objects.\n   *\n   * @return null if no queries are generated\n   */\n  public static List<Query> parseQueryStrings(SolrQueryRequest req, \n                                              String[] queries) throws ParseException {    \n    if (null == queries || 0 == queries.length) return null;\n    List<Query> out = new ArrayList<Query>(queries.length);\n    for (String q : queries) {\n      if (null != q && 0 != q.trim().length()) {\n        out.add(QParser.getParser(q, null, req).getQuery());\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"0c4734592334b2ab642dd69aaf7095b63280f945":["5eefd1bf0c07385d4769d48983978d83a4053342"],"5eefd1bf0c07385d4769d48983978d83a4053342":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c4734592334b2ab642dd69aaf7095b63280f945"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["5eefd1bf0c07385d4769d48983978d83a4053342"],"0c4734592334b2ab642dd69aaf7095b63280f945":["ad94625fb8d088209f46650c8097196fec67f00c"],"5eefd1bf0c07385d4769d48983978d83a4053342":["0c4734592334b2ab642dd69aaf7095b63280f945"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}