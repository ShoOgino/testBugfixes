{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":"  /** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index. */\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55cd30e9e9e71e141455bae8e74401676f036658","date":1406760593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    long bitmask = 1L << index;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":null,"sourceOld":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    long bitmask = 1L << index;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#get(int).mjava","sourceNew":null,"sourceOld":"  /** Returns true or false for the specified bit index. */\n  @Override\n  public boolean get(int index) {\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    if (i>=bits.length) return false;\n\n    long bitmask = 1L << index;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55cd30e9e9e71e141455bae8e74401676f036658","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["55cd30e9e9e71e141455bae8e74401676f036658"],"55cd30e9e9e71e141455bae8e74401676f036658":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","55cd30e9e9e71e141455bae8e74401676f036658"],"55cd30e9e9e71e141455bae8e74401676f036658":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}