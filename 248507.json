{"path":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}