{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random, indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random, indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes(Directory...)) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException {\n    int num=100;\n\n    Directory indexA = newDirectory();\n    Directory indexB = newDirectory();\n\n    fillIndex(random(), indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(random(), indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        merged,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.addIndexes(indexA, indexB);\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    fail = verifyIndex(merged, 0);\n\n    assertFalse(\"The merged index is invalid\", fail);\n    indexA.close();\n    indexB.close();\n    merged.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}