{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","sourceNew":"  /** Sorts via stable in-place MergeSort algorithm\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void mergeSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= MERGESORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    mergeSort(lo, mid);\n    mergeSort(mid, hi);\n    merge(lo, mid, hi, mid - lo, hi - mid);\n  }\n\n","sourceOld":"  /** Sorts via stable in-place MergeSort algorithm\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void mergeSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= MERGESORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    mergeSort(lo, mid);\n    mergeSort(mid, hi);\n    merge(lo, mid, hi, mid - lo, hi - mid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108a3a331b23a7fba7e7a4037fcb87085e0112e","date":1364415244,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","sourceNew":"  /** Sorts via stable in-place MergeSort algorithm\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void mergeSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= MERGESORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    mergeSort(lo, mid);\n    mergeSort(mid, hi);\n    runMerge(lo, mid, hi, mid - lo, hi - mid);\n  }\n\n","sourceOld":"  /** Sorts via stable in-place MergeSort algorithm\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void mergeSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= MERGESORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    mergeSort(lo, mid);\n    mergeSort(mid, hi);\n    merge(lo, mid, hi, mid - lo, hi - mid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#mergeSort(int,int).mjava","sourceNew":null,"sourceOld":"  /** Sorts via stable in-place MergeSort algorithm\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void mergeSort(int lo, int hi) {\n    final int diff = hi - lo;\n    if (diff <= MERGESORT_THRESHOLD) {\n      insertionSort(lo, hi);\n      return;\n    }\n    \n    final int mid = lo + (diff >>> 1);\n    \n    mergeSort(lo, mid);\n    mergeSort(mid, hi);\n    runMerge(lo, mid, hi, mid - lo, hi - mid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}