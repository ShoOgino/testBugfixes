{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#randomAnalysisString(Random,int,boolean).mjava","commits":[{"id":"98b3157475550a08a1536940d79af1c32dbd6663","date":1332600844,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#randomAnalysisString(Random,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static String randomAnalysisString(Random random, int maxLength, boolean simple) {\n    assert maxLength >= 0;\n    \n    // sometimes just a purely random string\n    if (random.nextInt(31) == 0) {\n      return randomSubString(random, random.nextInt(maxLength), simple);\n    }\n    \n    // otherwise, try to make it more realistic with 'words' since most tests use MockTokenizer\n    // first decide how big the string will really be: 0..n\n    maxLength = random.nextInt(maxLength);\n    int avgWordLength = _TestUtil.nextInt(random, 3, 8);\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < maxLength) {\n      if (sb.length() > 0) {\n        sb.append(' ');\n      }\n      int wordLength = -1;\n      while (wordLength < 0) {\n        wordLength = (int) (random.nextGaussian() * 3 + avgWordLength);\n      }\n      wordLength = Math.min(wordLength, maxLength - sb.length());\n      sb.append(randomSubString(random, wordLength, simple));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f59fcfe7807d7be91d80ceb371aaca2255f5d6c6","date":1392642922,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomAnalysisString(Random,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#randomAnalysisString(Random,int,boolean).mjava","sourceNew":"  public static String randomAnalysisString(Random random, int maxLength, boolean simple) {\n    assert maxLength >= 0;\n\n    // sometimes just a purely random string\n    if (random.nextInt(31) == 0) {\n      return randomSubString(random, random.nextInt(maxLength), simple);\n    }\n\n    // otherwise, try to make it more realistic with 'words' since most tests use MockTokenizer\n    // first decide how big the string will really be: 0..n\n    maxLength = random.nextInt(maxLength);\n    int avgWordLength = _TestUtil.nextInt(random, 3, 8);\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < maxLength) {\n      if (sb.length() > 0) {\n        sb.append(' ');\n      }\n      int wordLength = -1;\n      while (wordLength < 0) {\n        wordLength = (int) (random.nextGaussian() * 3 + avgWordLength);\n      }\n      wordLength = Math.min(wordLength, maxLength - sb.length());\n      sb.append(randomSubString(random, wordLength, simple));\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private static String randomAnalysisString(Random random, int maxLength, boolean simple) {\n    assert maxLength >= 0;\n    \n    // sometimes just a purely random string\n    if (random.nextInt(31) == 0) {\n      return randomSubString(random, random.nextInt(maxLength), simple);\n    }\n    \n    // otherwise, try to make it more realistic with 'words' since most tests use MockTokenizer\n    // first decide how big the string will really be: 0..n\n    maxLength = random.nextInt(maxLength);\n    int avgWordLength = _TestUtil.nextInt(random, 3, 8);\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < maxLength) {\n      if (sb.length() > 0) {\n        sb.append(' ');\n      }\n      int wordLength = -1;\n      while (wordLength < 0) {\n        wordLength = (int) (random.nextGaussian() * 3 + avgWordLength);\n      }\n      wordLength = Math.min(wordLength, maxLength - sb.length());\n      sb.append(randomSubString(random, wordLength, simple));\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98b3157475550a08a1536940d79af1c32dbd6663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f59fcfe7807d7be91d80ceb371aaca2255f5d6c6":["98b3157475550a08a1536940d79af1c32dbd6663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f59fcfe7807d7be91d80ceb371aaca2255f5d6c6"]},"commit2Childs":{"98b3157475550a08a1536940d79af1c32dbd6663":["f59fcfe7807d7be91d80ceb371aaca2255f5d6c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98b3157475550a08a1536940d79af1c32dbd6663"],"f59fcfe7807d7be91d80ceb371aaca2255f5d6c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}