{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","commits":[{"id":"b6826280a52a0051999196c30abd67c1c4b9a0a4","date":1394805949,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(luceneMatchVersion, managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","sourceNew":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","sourceOld":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(luceneMatchVersion, managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","sourceNew":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(luceneMatchVersion, managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","sourceOld":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedStopFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","sourceNew":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","sourceOld":"  /**\n   * Callback invoked by the {@link ManagedResource} instance to trigger this\n   * class to create the CharArraySet used to create the StopFilter using the\n   * wordset managed by {@link ManagedWordSetResource}. Keep in mind that\n   * a schema.xml may reuse the same {@link ManagedStopFilterFactory} many\n   * times for different field types; behind the scenes all instances of this\n   * class/handle combination share the same managed data, hence the need for\n   * a listener/callback scheme.\n   */\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> args, ManagedResource res) \n      throws SolrException {\n\n    Set<String> managedWords = ((ManagedWordSetResource)res).getWordSet(); \n        \n    // first thing is to rebuild the Lucene CharArraySet from our managedWords set\n    // which is slightly inefficient to do for every instance of the managed filter\n    // but ManagedResource's don't have access to the luceneMatchVersion\n    boolean ignoreCase = args.getBooleanArg(\"ignoreCase\");\n    stopWords = new CharArraySet(luceneMatchVersion, managedWords.size(), ignoreCase);\n    stopWords.addAll(managedWords);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b6826280a52a0051999196c30abd67c1c4b9a0a4"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b6826280a52a0051999196c30abd67c1c4b9a0a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6826280a52a0051999196c30abd67c1c4b9a0a4"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"b6826280a52a0051999196c30abd67c1c4b9a0a4":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}