{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"007463e97416788017c563017736002c3f72ea73","date":1344616184,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2ac1ee1c4b858b7699821a938b8a5da1af20228","date":1345467405,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // TODO: in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointer ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      // if (DEBUG) {\n      //   System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      // }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          // if (DEBUG) {\n          //   System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          // }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        // if (DEBUG) {\n        //   System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        // }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"007463e97416788017c563017736002c3f72ea73":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2ac1ee1c4b858b7699821a938b8a5da1af20228"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2ac1ee1c4b858b7699821a938b8a5da1af20228":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["007463e97416788017c563017736002c3f72ea73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"]},"commit2Childs":{"007463e97416788017c563017736002c3f72ea73":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"f2ac1ee1c4b858b7699821a938b8a5da1af20228":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f2ac1ee1c4b858b7699821a938b8a5da1af20228"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["007463e97416788017c563017736002c3f72ea73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}