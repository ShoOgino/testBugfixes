{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double,double,double).mjava","commits":[{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed)\n   */\n  public boolean contains(double minLat, double maxLat, double minLon, double maxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    boolean contains = crosses(minLat, maxLat, minLon, maxLon) == false &&\n                       contains(minLat, minLon) &&\n                       contains(minLat, maxLon) &&\n                       contains(maxLat, maxLon) && \n                       contains(maxLat, minLon);\n    \n    if (contains) {\n      // if we intersect with any hole, game over\n      for (Polygon hole : holes) {\n        if (hole.crosses(minLat, maxLat, minLon, maxLon) || hole.contains(minLat, maxLat, minLon, maxLon)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#contains(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/Polygon#contains(double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed)\n   */\n  public boolean contains(double minLat, double maxLat, double minLon, double maxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    boolean contains = crosses(minLat, maxLat, minLon, maxLon) == false &&\n                       contains(minLat, minLon) &&\n                       contains(minLat, maxLon) &&\n                       contains(maxLat, maxLon) &&\n                       contains(maxLat, minLon);\n\n    if (contains) {\n      // if we intersect with any hole, game over\n      for (Polygon hole : holes) {\n        if (hole.crosses(minLat, maxLat, minLon, maxLon) || hole.contains(minLat, maxLat, minLon, maxLon)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed)\n   */\n  public boolean contains(double minLat, double maxLat, double minLon, double maxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    boolean contains = crosses(minLat, maxLat, minLon, maxLon) == false &&\n                       contains(minLat, minLon) &&\n                       contains(minLat, maxLon) &&\n                       contains(maxLat, maxLon) && \n                       contains(maxLat, minLon);\n    \n    if (contains) {\n      // if we intersect with any hole, game over\n      for (Polygon hole : holes) {\n        if (hole.crosses(minLat, maxLat, minLon, maxLon) || hole.contains(minLat, maxLat, minLon, maxLon)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}