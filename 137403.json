{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","commits":[{"id":"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac","date":1452194543,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE=\" + code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:\" + rbody);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b91069954b0e55651f8ab21d3be29bb92180730","date":1452240463,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","sourceNew":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE=\" + code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:\" + rbody);\n  }\n\n","sourceOld":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE=\" + code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:\" + rbody);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","sourceNew":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th); //logOk\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE= {}\", code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:{}\", rbody);\n  }\n\n","sourceOld":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE=\" + code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:\" + rbody);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","sourceNew":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE= {}\", code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:{}\", rbody);\n  }\n\n","sourceOld":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th); //logOk\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE= {}\", code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:{}\", rbody);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestSolrJErrorHandling#testHttpURLConnection().mjava","sourceNew":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\", th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE= {}\", code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:{}\", rbody);\n  }\n\n","sourceOld":"  @Test\n  public void testHttpURLConnection() throws Exception {\n\n   String bodyString = getJsonDocs(200000);  // sometimes succeeds with this size, but larger can cause OOM from command line\n\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n\n    String urlString = client.getBaseURL() + \"/update\";\n\n    HttpURLConnection conn = null;\n    URL url = new URL(urlString);\n\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"POST\");\n    conn.setDoOutput(true);\n    conn.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n\n    OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8);\n    writer.write(bodyString);\n    writer.flush();\n\n    int code = 1;\n    try {\n      code = conn.getResponseCode();\n    } catch (Throwable th) {\n      log.error(\"ERROR DURING conn.getResponseCode():\",th);\n    }\n\n/***\n java.io.IOException: Error writing to server\n at __randomizedtesting.SeedInfo.seed([2928C6EE314CD076:947A81A74F582526]:0)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:665)\n at sun.net.www.protocol.http.HttpURLConnection.writeRequests(HttpURLConnection.java:677)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1533)\n at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1440)\n at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)\n */\n\n    log.info(\"CODE= {}\", code);\n    InputStream is;\n    if (code == 200) {\n      is = conn.getInputStream();\n    } else {\n      log.info(\"Attempting to get error stream.\");\n      is = conn.getErrorStream();\n      if (is == null) {\n        log.info(\"Can't get error stream... try input stream?\");\n        is = conn.getInputStream();\n      }\n    }\n\n    String rbody = IOUtils.toString(is, StandardCharsets.UTF_8);\n    log.info(\"RESPONSE BODY:{}\", rbody);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["0b91069954b0e55651f8ab21d3be29bb92180730"],"0b91069954b0e55651f8ab21d3be29bb92180730":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"0b91069954b0e55651f8ab21d3be29bb92180730":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2a0d597d231e1e1141fcd33ad15e26e2a4266ac"],"a2a0d597d231e1e1141fcd33ad15e26e2a4266ac":["0b91069954b0e55651f8ab21d3be29bb92180730"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}