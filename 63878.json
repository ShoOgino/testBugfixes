{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(this, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(this, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(this, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(this, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(this, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(this, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(this, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(this, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(this, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(this, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(this, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(this, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(this, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(this, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(this, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(this, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(\"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(\"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(\"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(\"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(\"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(() -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(() -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(() -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(() -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(() -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(() -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(() -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(() -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(this, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(this, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(this, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(this, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(this, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(this, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(this, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(this, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(this, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(this, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(this, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(this, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(this, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(this, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(this, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(this, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(this, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(\"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(\"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(\"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(\"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(\"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(() -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(() -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(() -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(() -> getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(() -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(() -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(() -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(() -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(\"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(\"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(\"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(\"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(\"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(() -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(() -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(() -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(() -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(() -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(() -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(() -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(() -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520854ee68595e9da7b09828103cea7f22e357ee","date":1593748577,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(\"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(\"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(\"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(\"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(\"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(() -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(() -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(() -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(() -> getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(() -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(() -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(() -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    newSearcherCounter = parentContext.counter(\"new\", Category.SEARCHER.toString());\n    newSearcherTimer = parentContext.timer(\"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = parentContext.timer(\"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = parentContext.counter(\"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = parentContext.counter(\"errors\", Category.SEARCHER.toString(), \"new\");\n\n    parentContext.gauge(() -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    parentContext.gauge(() -> startTime, true, \"startTime\", Category.CORE.toString());\n    parentContext.gauge(() -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    parentContext.gauge(() -> getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    parentContext.gauge(() -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    parentContext.gauge(() -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      parentContext.gauge(() -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        parentContext.gauge(() -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        parentContext.gauge(() -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    parentContext.gauge(() -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    parentContext.gauge(() -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520854ee68595e9da7b09828103cea7f22e357ee":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520854ee68595e9da7b09828103cea7f22e357ee"]},"commit2Childs":{"520854ee68595e9da7b09828103cea7f22e357ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["520854ee68595e9da7b09828103cea7f22e357ee"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}