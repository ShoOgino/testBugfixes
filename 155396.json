{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n\n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n\n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n\n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n\n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }\n        }\n      }\n\n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocsEnum.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n\n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n\n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n\n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n\n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }\n        }\n      }\n\n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n\n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n\n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n\n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n\n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }\n        }\n      }\n\n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits delDocs1 = MultiFields.getDeletedDocs(index1);\n      final Bits delDocs2 = MultiFields.getDeletedDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     delDocs1 == null || delDocs1.get(i),\n                     delDocs2 == null || delDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (delDocs1 == null || !delDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits delDocs = MultiFields.getDeletedDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(delDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(delDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<Fieldable> fieldable1 = doc1.getFields();\n          List<Fieldable> fieldable2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fieldable1.size(), fieldable2.size());\n          Iterator<Fieldable> itField1 = fieldable1.iterator();\n          Iterator<Fieldable> itField2 = fieldable2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        TermsEnum enum1 = fenum1.terms();\n        TermsEnum enum2 = fenum2.terms();\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        byte[] norms1 = MultiNorms.norms(index1, curField);\n        byte[] norms2 = MultiNorms.norms(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      FieldInfos fieldInfos1 = ReaderUtil.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = ReaderUtil.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      Collection<String> fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection<String> fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator<String> it1 = fields1.iterator();\n      Iterator<String> it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", it1.next(), it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = it1.next();\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      FieldInfos fieldInfos1 = ReaderUtil.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = ReaderUtil.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      FieldInfos fieldInfos1 = ReaderUtil.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = ReaderUtil.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      \n      // check field names\n      FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      FieldInfos fieldInfos1 = ReaderUtil.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = ReaderUtil.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(DirectoryReader,DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(DirectoryReader index1, DirectoryReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      \n      // check field names\n      FieldInfos fieldInfos1 = MultiFields.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = MultiFields.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // TODO: maybe this can reuse the logic of test dueling codecs?\n    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      if (!(index1 instanceof ParallelReader)) {\n        assertEquals(\"Single segment test differs.\", index1.getSequentialSubReaders().length == 1, index2.getSequentialSubReaders().length == 1);\n      }\n      \n      // check field names\n      FieldInfos fieldInfos1 = ReaderUtil.getMergedFieldInfos(index1);\n      FieldInfos fieldInfos2 = ReaderUtil.getMergedFieldInfos(index2);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fieldInfos1.size(), fieldInfos2.size());\n      final int numFields = fieldInfos1.size();\n      for(int fieldID=0;fieldID<numFields;fieldID++) {\n        final FieldInfo fieldInfo1 = fieldInfos1.fieldInfo(fieldID);\n        final FieldInfo fieldInfo2 = fieldInfos2.fieldInfo(fieldID);\n        assertEquals(\"Different field names.\", fieldInfo1.name, fieldInfo2.name);\n      }\n      \n      // check norms\n      for(FieldInfo fieldInfo : fieldInfos1) {\n        String curField = fieldInfo.name;\n        DocValues norms1 = MultiDocValues.getNormDocValues(index1, curField);\n        DocValues norms2 = MultiDocValues.getNormDocValues(index2, curField);\n        if (norms1 != null && norms2 != null)\n        {\n          // todo: generalize this (like TestDuelingCodecs assert)\n          byte[] b1 = (byte[]) norms1.getSource().getArray();\n          byte[] b2 = (byte[]) norms2.getSource().getArray();\n          assertEquals(b1.length, b2.length);\n\t        for (int i = 0; i < b1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", b1[i], b2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      final Bits liveDocs1 = MultiFields.getLiveDocs(index1);\n      final Bits liveDocs2 = MultiFields.getLiveDocs(index2);\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\",\n                     liveDocs1 == null || !liveDocs1.get(i),\n                     liveDocs2 == null || !liveDocs2.get(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (liveDocs1 == null || liveDocs1.get(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          List<IndexableField> field1 = doc1.getFields();\n          List<IndexableField> field2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", field1.size(), field2.size());\n          Iterator<IndexableField> itField1 = field1.iterator();\n          Iterator<IndexableField> itField2 = field2.iterator();\n          while (itField1.hasNext()) {\n            Field curField1 = (Field) itField1.next();\n            Field curField2 = (Field) itField2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      FieldsEnum fenum1 = MultiFields.getFields(index1).iterator();\n      FieldsEnum fenum2 = MultiFields.getFields(index1).iterator();\n      String field1 = null;\n      Bits liveDocs = MultiFields.getLiveDocs(index1);\n      while((field1=fenum1.next()) != null) {\n        assertEquals(\"Different fields\", field1, fenum2.next());\n        Terms terms1 = fenum1.terms();\n        if (terms1 == null) {\n          assertNull(fenum2.terms());\n          continue;\n        }\n        TermsEnum enum1 = terms1.iterator(null);\n\n        Terms terms2 = fenum2.terms();\n        assertNotNull(terms2);\n        TermsEnum enum2 = terms2.iterator(null);\n\n        while(enum1.next() != null) {\n          assertEquals(\"Different terms\", enum1.term(), enum2.next());\n          DocsAndPositionsEnum tp1 = enum1.docsAndPositions(liveDocs, null, false);\n          DocsAndPositionsEnum tp2 = enum2.docsAndPositions(liveDocs, null, false);\n\n          while(tp1.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            assertTrue(tp2.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n            assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.docID(), tp2.docID());\n            assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n            for (int i = 0; i < tp1.freq(); i++) {\n              assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b0d06946f61921459f43309f86ed621ebe67eebe"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["406e7055a3e99d3fa6ce49a555a51dd18b321806","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b0d06946f61921459f43309f86ed621ebe67eebe","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b0d06946f61921459f43309f86ed621ebe67eebe","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0d06946f61921459f43309f86ed621ebe67eebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["b0d06946f61921459f43309f86ed621ebe67eebe","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"b0d06946f61921459f43309f86ed621ebe67eebe":["70ad682703b8585f5d0a637efec044d57ec05efb","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"3cc749c053615f5871f3b95715fe292f34e70a53":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}