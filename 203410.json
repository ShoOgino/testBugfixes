{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","commits":[{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","pathOld":"/dev/null","sourceNew":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new AscFieldComp(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52","date":1427741807,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","sourceNew":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new AscFieldComp(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new AscFieldComp(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","pathOld":"/dev/null","sourceNew":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new AscFieldComp(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testNonePartitionKeys().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testNonePartitionKeys().mjava","sourceNew":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new FieldComparator(\"a_s\",ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testNonePartitionKeys() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"none\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", stream, 2, new AscFieldComp(\"a_s\"));\n\n    List<Tuple> tuples = getTuples(pstream);\n\n    assert(tuples.size() == 20); // Each tuple will be double counted.\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["7f0d49510f92f461cc46c6d2ac80a6fff7e43e52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"7f0d49510f92f461cc46c6d2ac80a6fff7e43e52":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}