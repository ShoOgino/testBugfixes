{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false, core);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false, core);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false, core);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","sourceNew":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false);\n    \n    return seq;\n  }\n\n","sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        context.leaderSeqPath = leaderSeqPath;\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(seq, context, false, core);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#joinElection(ElectionContext,SolrCore).mjava","sourceNew":null,"sourceOld":"  /**\n   * Begin participating in the election process. Gets a new sequential number\n   * and begins watching the node with the sequence number before it, unless it\n   * is the lowest number, in which case, initiates the leader process. If the\n   * node that is watched goes down, check if we are the new lowest node, else\n   * watch the next lowest numbered node.\n   * \n   * @param context\n   * @return sequential node number\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException \n   * @throws UnsupportedEncodingException\n   */\n  public int joinElection(ElectionContext context, SolrCore core) throws KeeperException, InterruptedException, IOException {\n    final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    String id = sessionId + \"-\" + context.id;\n    String leaderSeqPath = null;\n    boolean cont = true;\n    int tries = 0;\n    while (cont) {\n      try {\n        leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null,\n            CreateMode.EPHEMERAL_SEQUENTIAL, false);\n        cont = false;\n      } catch (ConnectionLossException e) {\n        // we don't know if we made our node or not...\n        List<String> entries = zkClient.getChildren(shardsElectZkPath, null, true);\n        \n        boolean foundId = false;\n        for (String entry : entries) {\n          String nodeId = getNodeId(entry);\n          if (id.equals(nodeId)) {\n            // we did create our node...\n            foundId  = true;\n            break;\n          }\n        }\n        if (!foundId) {\n          throw e;\n        }\n\n      } catch (KeeperException.NoNodeException e) {\n        // we must have failed in creating the election node - someone else must\n        // be working on it, lets try again\n        if (tries++ > 9) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        cont = true;\n        Thread.sleep(50);\n      }\n    }\n    int seq = getSeq(leaderSeqPath);\n    checkIfIamLeader(leaderSeqPath, seq, context, false, core);\n    \n    return seq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9813dd0748537c429b7c0a9b4723ea1ba496c047"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}