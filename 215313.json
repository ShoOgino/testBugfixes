{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e08ecdf9a28c81716b89f59f7db35cda7609a09","date":1408297873,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(5, result.size());\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":["72f7cca1d9eaf9232fb247ff10b18fb6e94d3250","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testMileage().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith (should return original data)\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> eAttrs = createMap(\"name\", \"e\");\n    Context context = getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    assertEquals(6, result.size());\n    assertEquals(s, result.get(\"t2\"));\n    assertEquals(s, result.get(\"rowdata\"));\n    assertEquals(\"26\", result.get(\"highway_mileage\"));\n    assertEquals(\"19\", result.get(\"city_mileage\"));\n    assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["4e08ecdf9a28c81716b89f59f7db35cda7609a09"],"4e08ecdf9a28c81716b89f59f7db35cda7609a09":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4e08ecdf9a28c81716b89f59f7db35cda7609a09"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"4e08ecdf9a28c81716b89f59f7db35cda7609a09":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}