{"path":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","commits":[{"id":"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc","date":1332908462,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req();\n    \n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cacbf46c73bd5b0e47b57128be8852cb236160","date":1332942979,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req();\n    \n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738199265d7244d0d494cdc76ad36c750d9a1bcd","date":1333253180,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req();\n    \n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req();\n    \n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req();\n    \n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637559b0fb4d8b154a84b1af4661cb1b5d9c8415","date":1504740251,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      OldLuceneQParserPlugin.NAME,\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73037b76a70b4cad490b616ea90220b3cc2a6fd8","date":1561396119,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testQParserEmptyInput().mjava","sourceNew":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" +\n                                     defType + \" with qstr=\"+qstr, e);\n        }\n\n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that the main QParserPlugins people are likely to use\n   * as defaults fail with a consistent exception when the query string \n   * is either empty or null.\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-435\">SOLR-435</a>\n   * @see <a href=\"https://issues.apache.org/jira/browse/SOLR-2001\">SOLR-2001</a>\n   */\n  public void testQParserEmptyInput() throws Exception {\n    \n    SolrQueryRequest req = req(\"df\", \"text\");\n\n    final String[] parsersTested = new String[] {\n      LuceneQParserPlugin.NAME,\n      DisMaxQParserPlugin.NAME,\n      ExtendedDismaxQParserPlugin.NAME\n    };\n\n    for (String defType : parsersTested) {\n      for (String qstr : new String[] {null, \"\"}) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser(qstr, defType, req);\n        } catch (Exception e) {\n          throw new RuntimeException(\"getParser excep using defType=\" + \n                                     defType + \" with qstr=\"+qstr, e);\n        }\n        \n        Query q = parser.parse();\n        assertNull(\"expected no query\",q);\n      }\n    }\n  }\n\n","bugFix":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["738199265d7244d0d494cdc76ad36c750d9a1bcd","1a144790859eb303122988cd315215ff30f449d2"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["e9017cf144952056066919f1ebc7897ff9bd71b1","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["1a144790859eb303122988cd315215ff30f449d2"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["1a144790859eb303122988cd315215ff30f449d2","637559b0fb4d8b154a84b1af4661cb1b5d9c8415"],"1a144790859eb303122988cd315215ff30f449d2":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["15cacbf46c73bd5b0e47b57128be8852cb236160"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"15cacbf46c73bd5b0e47b57128be8852cb236160":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","73037b76a70b4cad490b616ea90220b3cc2a6fd8"],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","637559b0fb4d8b154a84b1af4661cb1b5d9c8415","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"73037b76a70b4cad490b616ea90220b3cc2a6fd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}