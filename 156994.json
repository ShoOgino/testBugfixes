{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","commits":[{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // re-purpose BALANCELEADERS to reassign a single leader over here\n  private void processAssignLeaders(ZkNodeProps message) throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shardId = message.getStr(SHARD_ID_PROP);\n    String baseURL = message.getStr(BASE_URL_PROP);\n    String coreName = message.getStr(CORE_NAME_PROP);\n\n    if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(shardId) || StringUtils.isBlank(baseURL) ||\n        StringUtils.isBlank(coreName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s' and '%s' parameters are required when assigning a leader\",\n              COLLECTION_PROP, SHARD_ID_PROP, BASE_URL_PROP, CORE_NAME_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.LEADER.toLower());\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, shardId);\n    propMap.put(BASE_URL_PROP, baseURL);\n    propMap.put(CORE_NAME_PROP, coreName);\n    inQueue.offer(zkStateReader.toJSON(propMap));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // re-purpose BALANCELEADERS to reassign a single leader over here\n  private void processAssignLeaders(ZkNodeProps message) throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shardId = message.getStr(SHARD_ID_PROP);\n    String baseURL = message.getStr(BASE_URL_PROP);\n    String coreName = message.getStr(CORE_NAME_PROP);\n\n    if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(shardId) || StringUtils.isBlank(baseURL) ||\n        StringUtils.isBlank(coreName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s' and '%s' parameters are required when assigning a leader\",\n              COLLECTION_PROP, SHARD_ID_PROP, BASE_URL_PROP, CORE_NAME_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.LEADER.toLower());\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, shardId);\n    propMap.put(BASE_URL_PROP, baseURL);\n    propMap.put(CORE_NAME_PROP, coreName);\n    inQueue.offer(zkStateReader.toJSON(propMap));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  // re-purpose BALANCELEADERS to reassign a single leader over here\n  private void processAssignLeaders(ZkNodeProps message) throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shardId = message.getStr(SHARD_ID_PROP);\n    String baseURL = message.getStr(BASE_URL_PROP);\n    String coreName = message.getStr(CORE_NAME_PROP);\n\n    if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(shardId) || StringUtils.isBlank(baseURL) ||\n        StringUtils.isBlank(coreName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s' and '%s' parameters are required when assigning a leader\",\n              COLLECTION_PROP, SHARD_ID_PROP, BASE_URL_PROP, CORE_NAME_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower());\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, shardId);\n    propMap.put(BASE_URL_PROP, baseURL);\n    propMap.put(CORE_NAME_PROP, coreName);\n    inQueue.offer(zkStateReader.toJSON(propMap));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  // re-purpose BALANCELEADERS to reassign a single leader over here\n  private void processAssignLeaders(ZkNodeProps message) throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shardId = message.getStr(SHARD_ID_PROP);\n    String baseURL = message.getStr(BASE_URL_PROP);\n    String coreName = message.getStr(CORE_NAME_PROP);\n\n    if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(shardId) || StringUtils.isBlank(baseURL) ||\n        StringUtils.isBlank(coreName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s' and '%s' parameters are required when assigning a leader\",\n              COLLECTION_PROP, SHARD_ID_PROP, BASE_URL_PROP, CORE_NAME_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.LEADER.toLower());\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, shardId);\n    propMap.put(BASE_URL_PROP, baseURL);\n    propMap.put(CORE_NAME_PROP, coreName);\n    inQueue.offer(zkStateReader.toJSON(propMap));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processAssignLeaders(ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  // re-purpose BALANCELEADERS to reassign a single leader over here\n  private void processAssignLeaders(ZkNodeProps message) throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String shardId = message.getStr(SHARD_ID_PROP);\n    String baseURL = message.getStr(BASE_URL_PROP);\n    String coreName = message.getStr(CORE_NAME_PROP);\n\n    if (StringUtils.isBlank(collectionName) || StringUtils.isBlank(shardId) || StringUtils.isBlank(baseURL) ||\n        StringUtils.isBlank(coreName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s' and '%s' parameters are required when assigning a leader\",\n              COLLECTION_PROP, SHARD_ID_PROP, BASE_URL_PROP, CORE_NAME_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower());\n    propMap.put(COLLECTION_PROP, collectionName);\n    propMap.put(SHARD_ID_PROP, shardId);\n    propMap.put(BASE_URL_PROP, baseURL);\n    propMap.put(CORE_NAME_PROP, coreName);\n    inQueue.offer(zkStateReader.toJSON(propMap));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e6b620c271c84c0f14919eec7b90083b292ee51"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}