{"path":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4cc0532e82274748c1910318b92089c5604e48a","date":1183443010,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n      NamedList sumData = HighlightingUtils.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(CommonParams.Q);\n\n      String defaultField = p.get(CommonParams.DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(CommonParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(CommonParams.SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FacetParams.FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(CommonParams.START,0), p.getInt(CommonParams.ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(CommonParams.START,0), p.getInt(CommonParams.ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(Q);\n\n      String defaultField = p.get(DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(SolrParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(START,0), p.getInt(ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(START,0), p.getInt(ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(CommonParams.Q);\n\n      // find fieldnames to return (fieldlist)\n      // TODO: make this per-query and add method to QParser to get?\n      String fl = p.get(CommonParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      QParser parser = QParser.getParser(qstr, OldLuceneQParserPlugin.NAME, req);\n      Query query = parser.getQuery();\n      QueryParsing.SortSpec sortSpec = parser.getSort(true);\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FacetParams.FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sortSpec.getSort(),\n                                     sortSpec.getOffset(), sortSpec.getCount(),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sortSpec.getSort(),\n                                       sortSpec.getOffset(), sortSpec.getCount(),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n            results.docList,\n            parser.getHighlightQuery().rewrite(req.getSearcher().getReader()),\n            req,\n            parser.getDefaultHighlightFields());\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(CommonParams.Q);\n\n      String defaultField = p.get(CommonParams.DF);\n\n      // find fieldnames to return (fieldlist)\n      String fl = p.get(CommonParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n      \n      String sortStr = p.get(CommonParams.SORT);\n      if( sortStr == null ) {  \n        // TODO? should we disable the ';' syntax with config?\n        // legacy mode, where sreq is query;sort\n        List<String> commands = StrUtils.splitSmart(qstr,';');\n        if( commands.size() == 2 ) {\n          // TODO? add a deprication warning to the response header\n          qstr = commands.get( 0 );\n          sortStr = commands.get( 1 );\n        }\n        else if( commands.size() == 1 ) {\n          // This is need to support the case where someone sends: \"q=query;\"\n          qstr = commands.get( 0 );\n        }\n        else if( commands.size() > 2 ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"If you want to use multiple ';' in the query, use the 'sort' param.\" );\n        }\n      }\n\n      Sort sort = null;\n      if( sortStr != null ) {\n        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(sortStr, req.getSchema());\n        if (sortSpec != null) {\n          sort = sortSpec.getSort();\n        }\n      }\n\n      // parse the query from the 'q' parameter (sort has been striped)\n      Query query = QueryParsing.parseQuery(qstr, defaultField, p, req.getSchema());\n      \n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FacetParams.FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sort,\n                                     p.getInt(CommonParams.START,0), p.getInt(CommonParams.ROWS,10),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sort,\n                                       p.getInt(CommonParams.START,0), p.getInt(CommonParams.ROWS,10),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n        results.docList, query.rewrite(req.getSearcher().getReader()), req, new String[]{defaultField});\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/StandardRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception\n  {\n    \n      SolrParams p = req.getParams();\n      String qstr = p.required().get(CommonParams.Q);\n\n      // find fieldnames to return (fieldlist)\n      // TODO: make this per-query and add method to QParser to get?\n      String fl = p.get(CommonParams.FL);\n      int flags = 0; \n      if (fl != null) {\n        flags |= U.setReturnFields(fl, rsp);\n      }\n\n      QParser parser = QParser.getParser(qstr, OldLuceneQParserPlugin.NAME, req);\n      Query query = parser.getQuery();\n      QueryParsing.SortSpec sortSpec = parser.getSort(true);\n\n      DocListAndSet results = new DocListAndSet();\n      NamedList facetInfo = null;\n      List<Query> filters = U.parseFilterQueries(req);\n      SolrIndexSearcher s = req.getSearcher();\n\n      if (p.getBool(FacetParams.FACET,false)) {\n        results = s.getDocListAndSet(query, filters, sortSpec.getSort(),\n                                     sortSpec.getOffset(), sortSpec.getCount(),\n                                     flags);\n        facetInfo = getFacetInfo(req, rsp, results.docSet);\n      } else {\n        results.docList = s.getDocList(query, filters, sortSpec.getSort(),\n                                       sortSpec.getOffset(), sortSpec.getCount(),\n                                       flags);\n      }\n\n      // pre-fetch returned documents\n      U.optimizePreFetchDocs(results.docList, query, req, rsp);\n      \n      rsp.add(\"response\",results.docList);\n\n      if (null != facetInfo) rsp.add(\"facet_counts\", facetInfo);\n\n      // Include \"More Like This\" results for *each* result\n      if( p.getBool( MoreLikeThisParams.MLT, false ) ) {\n        MoreLikeThisHandler.MoreLikeThisHelper mlt \n          = new MoreLikeThisHandler.MoreLikeThisHelper( p, s );\n        int mltcount = p.getInt( MoreLikeThisParams.DOC_COUNT, 5 );\n        rsp.add( \"moreLikeThis\", mlt.getMoreLikeThese(results.docList, mltcount, flags));\n      }\n      \n      try {\n        NamedList dbg = U.doStandardDebug(req, qstr, query, results.docList);\n        if (null != dbg) {\n          if (null != filters) {\n            dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbg.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbg);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n      \n\n      SolrHighlighter highlighter = req.getCore().getHighlighter();\n      NamedList sumData = highlighter.doHighlighting(\n            results.docList,\n            parser.getHighlightQuery().rewrite(req.getSearcher().getReader()),\n            req,\n            parser.getDefaultHighlightFields());\n      if(sumData != null)\n        rsp.add(\"highlighting\", sumData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["a4cc0532e82274748c1910318b92089c5604e48a"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a4cc0532e82274748c1910318b92089c5604e48a":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"71bbe672a26ef56876a0ce949b0a4de41f602057":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["a4cc0532e82274748c1910318b92089c5604e48a"],"a4cc0532e82274748c1910318b92089c5604e48a":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"71bbe672a26ef56876a0ce949b0a4de41f602057":[],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["71bbe672a26ef56876a0ce949b0a4de41f602057","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}