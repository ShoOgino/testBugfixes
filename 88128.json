{"path":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSet(SolrIndexSearcher,Query,DocSet).mjava","commits":[{"id":"6727dd701b30630840235b6788bb5c728d20bbfd","date":1439421226,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSet(SolrIndexSearcher,Query,DocSet).mjava","pathOld":"/dev/null","sourceNew":"  // implementers of DocSetProducer should not call this with themselves or it will result in an infinite loop\n  public static DocSet createDocSet(SolrIndexSearcher searcher, Query query, DocSet filter) throws IOException {\n\n    if (filter != null) {\n        Filter luceneFilter = filter.getTopFilter();\n        query = new BooleanQuery.Builder()\n            .add(query, BooleanClause.Occur.MUST)\n            .add(luceneFilter, BooleanClause.Occur.FILTER)\n            .build();\n    }\n\n    if (query instanceof TermQuery) {\n      DocSet set = createDocSet(searcher, ((TermQuery)query).getTerm() );\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    } else if (query instanceof DocSetProducer) {\n      DocSet set = ((DocSetProducer) query).createDocSet(searcher);\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    }\n\n    return createDocSetGeneric(searcher, query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSet(SolrIndexSearcher,Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createDocSet(SolrIndexSearcher,Query,DocSet).mjava","sourceNew":"  // implementers of DocSetProducer should not call this with themselves or it will result in an infinite loop\n  public static DocSet createDocSet(SolrIndexSearcher searcher, Query query, DocSet filter) throws IOException {\n\n    if (filter != null) {\n      query = QueryUtils.combineQueryAndFilter(query, filter.getTopFilter());\n    }\n\n    if (query instanceof TermQuery) {\n      DocSet set = createDocSet(searcher, ((TermQuery)query).getTerm() );\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    } else if (query instanceof DocSetProducer) {\n      DocSet set = ((DocSetProducer) query).createDocSet(searcher);\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    }\n\n    return createDocSetGeneric(searcher, query);\n  }\n\n","sourceOld":"  // implementers of DocSetProducer should not call this with themselves or it will result in an infinite loop\n  public static DocSet createDocSet(SolrIndexSearcher searcher, Query query, DocSet filter) throws IOException {\n\n    if (filter != null) {\n        Filter luceneFilter = filter.getTopFilter();\n        query = new BooleanQuery.Builder()\n            .add(query, BooleanClause.Occur.MUST)\n            .add(luceneFilter, BooleanClause.Occur.FILTER)\n            .build();\n    }\n\n    if (query instanceof TermQuery) {\n      DocSet set = createDocSet(searcher, ((TermQuery)query).getTerm() );\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    } else if (query instanceof DocSetProducer) {\n      DocSet set = ((DocSetProducer) query).createDocSet(searcher);\n      // assert equals(set, createDocSetGeneric(searcher, query));\n      return set;\n    }\n\n    return createDocSetGeneric(searcher, query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["6727dd701b30630840235b6788bb5c728d20bbfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"6727dd701b30630840235b6788bb5c728d20bbfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6727dd701b30630840235b6788bb5c728d20bbfd"],"6727dd701b30630840235b6788bb5c728d20bbfd":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}