{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","commits":[{"id":"d79fd791e91f49ce8026885d7b8ac62bee4c8126","date":1487768721,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop of 0 is returned.\n   */\n  protected final SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7eeb4ff13c39188bd6c31fa0fe657cef66ba082","date":1528269505,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop of 0 is returned.\n   */\n  protected final SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop of 0 is returned.\n   */\n  protected final SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop of 0 is returned.\n   */\n  protected final SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac99c5ad157ae4ccdb201f140463a90f12f07b3","date":1582540181,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    BoostAttribute boostAtt = in.addAttribute(BoostAttribute.class);\n\n    SpanQuery result;\n    float boost = DEFAULT_BOOST;\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      boost *= boostAtt.getBoost();\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      result = terms.get(0);\n    } else {\n      result = new SpanNearQuery(terms.toArray(new SpanQuery[0]), 0, true);\n    }\n\n    if (boost != DEFAULT_BOOST) {\n      result = new SpanBoostQuery(result, boost);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      return terms.get(0);\n    } else {\n      return new SpanNearQuery(terms.toArray(new SpanTermQuery[0]), 0, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02bf300ae49caa47cd23550d69d6683a61ad89cb","date":1582727554,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#createSpanQuery(TokenStream,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a span query from the tokenstream.  In the case of a single token, a simple <code>SpanTermQuery</code> is\n   * returned.  When multiple tokens, an ordered <code>SpanNearQuery</code> with slop 0 is returned.\n   */\n  protected SpanQuery createSpanQuery(TokenStream in, String field) throws IOException {\n    TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n    BoostAttribute boostAtt = in.addAttribute(BoostAttribute.class);\n\n    SpanQuery result;\n    float boost = DEFAULT_BOOST;\n    if (termAtt == null) {\n      return null;\n    }\n\n    List<SpanTermQuery> terms = new ArrayList<>();\n    while (in.incrementToken()) {\n      boost *= boostAtt.getBoost();\n      terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n    }\n\n    if (terms.isEmpty()) {\n      return null;\n    } else if (terms.size() == 1) {\n      result = terms.get(0);\n    } else {\n      result = new SpanNearQuery(terms.toArray(new SpanQuery[0]), 0, true);\n    }\n\n    if (boost != DEFAULT_BOOST) {\n      result = new SpanBoostQuery(result, boost);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["e7eeb4ff13c39188bd6c31fa0fe657cef66ba082"],"02bf300ae49caa47cd23550d69d6683a61ad89cb":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["d79fd791e91f49ce8026885d7b8ac62bee4c8126","e7eeb4ff13c39188bd6c31fa0fe657cef66ba082"],"e7eeb4ff13c39188bd6c31fa0fe657cef66ba082":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d79fd791e91f49ce8026885d7b8ac62bee4c8126","e7eeb4ff13c39188bd6c31fa0fe657cef66ba082"]},"commit2Childs":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["02bf300ae49caa47cd23550d69d6683a61ad89cb"],"02bf300ae49caa47cd23550d69d6683a61ad89cb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d79fd791e91f49ce8026885d7b8ac62bee4c8126"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"e7eeb4ff13c39188bd6c31fa0fe657cef66ba082":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d79fd791e91f49ce8026885d7b8ac62bee4c8126":["b70042a8a492f7054d480ccdd2be9796510d4327","e7eeb4ff13c39188bd6c31fa0fe657cef66ba082","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}