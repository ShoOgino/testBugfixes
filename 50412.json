{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (o1, o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(DocCollection,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (o1, o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (o1, o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(DocCollection,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(DocCollection collection, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = collection != null ? collection.getActiveSlicesMap() : null;\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (o1, o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   *\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, (o1, o2) -> {\n      Integer one = map.get(o1);\n      Integer two = map.get(o2);\n      return one.compareTo(two);\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["3a0c04b71951333291abc7f317109a6a5957bd28","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a0c04b71951333291abc7f317109a6a5957bd28":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["3a0c04b71951333291abc7f317109a6a5957bd28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["3a0c04b71951333291abc7f317109a6a5957bd28"],"3a0c04b71951333291abc7f317109a6a5957bd28":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}