{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,IndexOutput).mjava","commits":[{"id":"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","date":1467616421,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  static void writeDocIds(int[] docIds, int start, int count, IndexOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  static void writeDocIds(int[] docIds, int start, int count, IndexOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,IndexOutput).mjava","sourceNew":"  static void writeDocIds(int[] docIds, int start, int count, DataOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void writeDocIds(int[] docIds, int start, int count, IndexOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/DocIdsWriter#writeDocIds(int[],int,int,IndexOutput).mjava","sourceNew":"  static void writeDocIds(int[] docIds, int start, int count, DataOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void writeDocIds(int[] docIds, int start, int count, IndexOutput out) throws IOException {\n    // docs can be sorted either when all docs in a block have the same value\n    // or when a segment is sorted\n    boolean sorted = true;\n    for (int i = 1; i < count; ++i) {\n      if (docIds[start + i - 1] > docIds[start + i]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      out.writeByte((byte) 0);\n      int previous = 0;\n      for (int i = 0; i < count; ++i) {\n        int doc = docIds[start + i];\n        out.writeVInt(doc - previous);\n        previous = doc;\n      }\n    } else {\n      long max = 0;\n      for (int i = 0; i < count; ++i) {\n        max |= Integer.toUnsignedLong(docIds[start + i]);\n      }\n      if (max <= 0xffffff) {\n        out.writeByte((byte) 24);\n        for (int i = 0; i < count; ++i) {\n          out.writeShort((short) (docIds[start + i] >>> 8));\n          out.writeByte((byte) docIds[start + i]);\n        }\n      } else {\n        out.writeByte((byte) 32);\n        for (int i = 0; i < count; ++i) {\n          out.writeInt(docIds[start + i]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"]},"commit2Childs":{"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}