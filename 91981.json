{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n\n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    FlexTestUtil.verifyFlexVsPreFlex(RANDOM, directory);\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(RANDOM,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(RANDOM,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,MergeScheduler).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergeScheduler(\n            mergeScheduler));\n    modifier.commit();\n    \n    TimedThread[] threads = new TimedThread[4];\n    int numThread = 0;\n\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[numThread++] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[numThread++] = searcherThread2;\n    searcherThread2.start();\n\n    for(int i=0;i<numThread;i++)\n      threads[i].join();\n\n    modifier.close();\n\n    for(int i=0;i<numThread;i++)\n      assertTrue(! threads[i].failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}