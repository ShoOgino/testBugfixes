{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#findNextFloorArcDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#findNextFloorArcDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds and reads an arc on the current node which label is strictly less than the given label.\n   * Skips the first arc, finds next floor arc; or none if the floor arc is the first\n   * arc itself (in this case it has already been read).\n   * <p>\n   * Precondition: the given arc is the first arc of the node.\n   */\n  private void findNextFloorArcDirectAddressing(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n    assert arc.label() != FST.END_LABEL;\n    assert arc.label() == arc.firstLabel();\n    if (arc.numArcs() > 1) {\n      int targetIndex = targetLabel - arc.firstLabel();\n      assert targetIndex >= 0;\n      if (targetIndex >= arc.numArcs()) {\n        // Beyond last arc. Take last arc.\n        fst.readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n      } else {\n        // Take the preceding arc, even if the target is present.\n        int floorIndex = arc.bitTable().previousBitSet(targetIndex);\n        if (floorIndex > 0) {\n          fst.readArcByDirectAddressing(arc, in, floorIndex);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#findNextFloorArcDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#findNextFloorArcDirectAddressing(FST.Arc[T],int,FST.BytesReader).mjava","sourceNew":"  /**\n   * Finds and reads an arc on the current node which label is strictly less than the given label.\n   * Skips the first arc, finds next floor arc; or none if the floor arc is the first\n   * arc itself (in this case it has already been read).\n   * <p>\n   * Precondition: the given arc is the first arc of the node.\n   */\n  private void findNextFloorArcDirectAddressing(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n    assert arc.label() != FST.END_LABEL;\n    assert arc.label() == arc.firstLabel();\n    if (arc.numArcs() > 1) {\n      int targetIndex = targetLabel - arc.firstLabel();\n      assert targetIndex >= 0;\n      if (targetIndex >= arc.numArcs()) {\n        // Beyond last arc. Take last arc.\n        fst.readLastArcByDirectAddressing(arc, in);\n      } else {\n        // Take the preceding arc, even if the target is present.\n        int floorIndex = BitTable.previousBitSet(targetIndex, arc, in);\n        if (floorIndex > 0) {\n          fst.readArcByDirectAddressing(arc, in, floorIndex);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Finds and reads an arc on the current node which label is strictly less than the given label.\n   * Skips the first arc, finds next floor arc; or none if the floor arc is the first\n   * arc itself (in this case it has already been read).\n   * <p>\n   * Precondition: the given arc is the first arc of the node.\n   */\n  private void findNextFloorArcDirectAddressing(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {\n    assert arc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n    assert arc.label() != FST.END_LABEL;\n    assert arc.label() == arc.firstLabel();\n    if (arc.numArcs() > 1) {\n      int targetIndex = targetLabel - arc.firstLabel();\n      assert targetIndex >= 0;\n      if (targetIndex >= arc.numArcs()) {\n        // Beyond last arc. Take last arc.\n        fst.readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n      } else {\n        // Take the preceding arc, even if the target is present.\n        int floorIndex = arc.bitTable().previousBitSet(targetIndex);\n        if (floorIndex > 0) {\n          fst.readArcByDirectAddressing(arc, in, floorIndex);\n        }\n      }\n    }\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}