{"path":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","commits":[{"id":"366ee8589b0d5578d8944e35470687383abbcd94","date":1250684482,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testExpungeDeletes() throws Exception {\r\n    for (int x = 0; x < 3000; x++) {\r\n      addSimpleDoc(x + \"\");\r\n    }\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    List<String> todelete = new ArrayList<String>();\r\n\r\n    Set<String> segsdel = new HashSet<String>();\r\n\r\n    SegmentReader[] sirs = getSegmentReaders(core);\r\n    assertTrue(sirs.length > 6);\r\n    todelete.add(getNthIDTerm(2, sirs[0]));\r\n    segsdel.add(sirs[0].getSegmentName());\r\n    \r\n    todelete.add(getNthIDTerm(7, sirs[2]));\r\n    segsdel.add(sirs[2].getSegmentName());\r\n    \r\n    todelete.add(getNthIDTerm(4, sirs[5]));\r\n    segsdel.add(sirs[5].getSegmentName());\r\n    \r\n    for (String id : todelete) {\r\n      deleteSimpleDoc(id);\r\n    }\r\n    // commit the deletes\r\n    cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n    \r\n    // expunge deletes\r\n    cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    cmtCmd.expungeDeletes = true;\r\n    updater.commit(cmtCmd);\r\n    \r\n    // we'll have fewer segments\r\n    SegmentReader[] sirs2 = getSegmentReaders(core);\r\n    assertTrue(sirs.length > sirs2.length);\r\n    // check the actual segment names\r\n    for (SegmentReader sr : sirs2) {\r\n      assertTrue(!segsdel.contains(sr.getSegmentName()));\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"700b4bd758e0e1452b2f67aefc3751636b8cef20","date":1254000471,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\r\n    assertU(adoc(\"id\",\"1\"));\r\n    assertU(adoc(\"id\",\"2\"));\r\n    assertU(commit());\r\n\r\n    assertU(adoc(\"id\",\"3\"));\r\n    assertU(adoc(\"id\",\"2\"));\r\n    assertU(adoc(\"id\",\"4\"));\r\n    assertU(commit());\r\n\r\n    SolrQueryRequest sr = req(\"q\",\"foo\");\r\n    SolrIndexReader r = sr.getSearcher().getReader();\r\n    assertTrue(r.maxDoc() > r.numDocs());   // should have deletions\r\n    assertTrue(r.getLeafReaders().length > 1);  // more than 1 segment\r\n    sr.close();\r\n\r\n    assertU(commit(\"expungeDeletes\",\"true\"));\r\n\r\n    sr = req(\"q\",\"foo\");\r\n    r = sr.getSearcher().getReader();\r\n    assertEquals(r.maxDoc(), r.numDocs());  // no deletions\r\n    assertEquals(4,r.maxDoc());             // no dups\r\n    assertTrue(r.getLeafReaders().length > 1);  // still more than 1 segment\r\n    sr.close();\r\n  }\r\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\r\n    for (int x = 0; x < 3000; x++) {\r\n      addSimpleDoc(x + \"\");\r\n    }\r\n    SolrCore core = h.getCore();\r\n    UpdateHandler updater = core.getUpdateHandler();\r\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n\r\n    List<String> todelete = new ArrayList<String>();\r\n\r\n    Set<String> segsdel = new HashSet<String>();\r\n\r\n    SegmentReader[] sirs = getSegmentReaders(core);\r\n    assertTrue(sirs.length > 6);\r\n    todelete.add(getNthIDTerm(2, sirs[0]));\r\n    segsdel.add(sirs[0].getSegmentName());\r\n    \r\n    todelete.add(getNthIDTerm(7, sirs[2]));\r\n    segsdel.add(sirs[2].getSegmentName());\r\n    \r\n    todelete.add(getNthIDTerm(4, sirs[5]));\r\n    segsdel.add(sirs[5].getSegmentName());\r\n    \r\n    for (String id : todelete) {\r\n      deleteSimpleDoc(id);\r\n    }\r\n    // commit the deletes\r\n    cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    updater.commit(cmtCmd);\r\n    \r\n    // expunge deletes\r\n    cmtCmd = new CommitUpdateCommand(false);\r\n    cmtCmd.waitSearcher = true;\r\n    cmtCmd.expungeDeletes = true;\r\n    updater.commit(cmtCmd);\r\n    \r\n    // we'll have fewer segments\r\n    SegmentReader[] sirs2 = getSegmentReaders(core);\r\n    assertTrue(sirs.length > sirs2.length);\r\n    // check the actual segment names\r\n    for (SegmentReader sr : sirs2) {\r\n      assertTrue(!segsdel.contains(sr.getSegmentName()));\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8744ad19f47109f36428849641ad30f090aa279e","date":1255357510,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit());\n\n    SolrQueryRequest sr = req(\"q\",\"foo\");\n    SolrIndexReader r = sr.getSearcher().getReader();\n    assertTrue(r.maxDoc() > r.numDocs());   // should have deletions\n    assertTrue(r.getLeafReaders().length > 1);  // more than 1 segment\n    sr.close();\n\n    assertU(commit(\"expungeDeletes\",\"true\"));\n\n    sr = req(\"q\",\"foo\");\n    r = sr.getSearcher().getReader();\n    assertEquals(r.maxDoc(), r.numDocs());  // no deletions\n    assertEquals(4,r.maxDoc());             // no dups\n    assertTrue(r.getLeafReaders().length > 1);  // still more than 1 segment\n    sr.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\r\n    assertU(adoc(\"id\",\"1\"));\r\n    assertU(adoc(\"id\",\"2\"));\r\n    assertU(commit());\r\n\r\n    assertU(adoc(\"id\",\"3\"));\r\n    assertU(adoc(\"id\",\"2\"));\r\n    assertU(adoc(\"id\",\"4\"));\r\n    assertU(commit());\r\n\r\n    SolrQueryRequest sr = req(\"q\",\"foo\");\r\n    SolrIndexReader r = sr.getSearcher().getReader();\r\n    assertTrue(r.maxDoc() > r.numDocs());   // should have deletions\r\n    assertTrue(r.getLeafReaders().length > 1);  // more than 1 segment\r\n    sr.close();\r\n\r\n    assertU(commit(\"expungeDeletes\",\"true\"));\r\n\r\n    sr = req(\"q\",\"foo\");\r\n    r = sr.getSearcher().getReader();\r\n    assertEquals(r.maxDoc(), r.numDocs());  // no deletions\r\n    assertEquals(4,r.maxDoc());             // no dups\r\n    assertTrue(r.getLeafReaders().length > 1);  // still more than 1 segment\r\n    sr.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit());\n\n    SolrQueryRequest sr = req(\"q\",\"foo\");\n    SolrIndexReader r = sr.getSearcher().getReader();\n    assertTrue(r.maxDoc() > r.numDocs());   // should have deletions\n    assertTrue(r.getLeafReaders().length > 1);  // more than 1 segment\n    sr.close();\n\n    assertU(commit(\"expungeDeletes\",\"true\"));\n\n    sr = req(\"q\",\"foo\");\n    r = sr.getSearcher().getReader();\n    assertEquals(r.maxDoc(), r.numDocs());  // no deletions\n    assertEquals(4,r.maxDoc());             // no dups\n    assertTrue(r.getLeafReaders().length > 1);  // still more than 1 segment\n    sr.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit());\n\n    SolrQueryRequest sr = req(\"q\",\"foo\");\n    SolrIndexReader r = sr.getSearcher().getReader();\n    assertTrue(r.maxDoc() > r.numDocs());   // should have deletions\n    assertTrue(r.getLeafReaders().length > 1);  // more than 1 segment\n    sr.close();\n\n    assertU(commit(\"expungeDeletes\",\"true\"));\n\n    sr = req(\"q\",\"foo\");\n    r = sr.getSearcher().getReader();\n    assertEquals(r.maxDoc(), r.numDocs());  // no deletions\n    assertEquals(4,r.maxDoc());             // no dups\n    assertTrue(r.getLeafReaders().length > 1);  // still more than 1 segment\n    sr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"366ee8589b0d5578d8944e35470687383abbcd94":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"700b4bd758e0e1452b2f67aefc3751636b8cef20":["366ee8589b0d5578d8944e35470687383abbcd94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8744ad19f47109f36428849641ad30f090aa279e":["700b4bd758e0e1452b2f67aefc3751636b8cef20"],"ad94625fb8d088209f46650c8097196fec67f00c":["8744ad19f47109f36428849641ad30f090aa279e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"366ee8589b0d5578d8944e35470687383abbcd94":["700b4bd758e0e1452b2f67aefc3751636b8cef20"],"700b4bd758e0e1452b2f67aefc3751636b8cef20":["8744ad19f47109f36428849641ad30f090aa279e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["366ee8589b0d5578d8944e35470687383abbcd94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8744ad19f47109f36428849641ad30f090aa279e":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}