{"path":"src/java/org/apache/lucene/util/OpenBitSet#set(long,long).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#set(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#set(long,long).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#set(long,long).mjava","sourceNew":"  /** Sets a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","sourceOld":"  /** Sets a range of bits, expanding the set size if necessary\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to set\n   */\n  public void set(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = expandingWordNum(endIndex-1);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    if (startWord == endWord) {\n      bits[startWord] |= (startmask & endmask);\n      return;\n    }\n\n    bits[startWord] |= startmask;\n    Arrays.fill(bits, startWord+1, endWord, -1L);\n    bits[endWord] |= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["52ce7e961a8217faac8128e3c8fe67819eefdde9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}