{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testOneClauseRewriteOptimization().mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testOneClauseRewriteOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testOneClauseRewriteOptimization().mjava","sourceNew":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n\n    final int numLayers = atLeast(3);\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, new IndexSearcher(r).rewrite(actual));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOneClauseRewriteOptimization() throws Exception {\n    final String FIELD = \"content\";\n    final String VALUE = \"foo\";\n\n    Directory dir = newDirectory();\n    (new RandomIndexWriter(random(), dir)).close();\n    IndexReader r = DirectoryReader.open(dir);\n\n    TermQuery expected = new TermQuery(new Term(FIELD, VALUE));\n\n    final int numLayers = atLeast(3);\n    Query actual = new TermQuery(new Term(FIELD, VALUE));\n\n    for (int i = 0; i < numLayers; i++) {\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(actual, random().nextBoolean()\n             ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST);\n      actual = bq.build();\n    }\n\n    assertEquals(numLayers + \": \" + actual.toString(),\n                 expected, new IndexSearcher(r).rewrite(actual));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"]},"commit2Childs":{"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}