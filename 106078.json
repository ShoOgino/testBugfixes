{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text) throws IOException {\n        // locate block: narrow to block range with index, then search blocks\n        final long block;\n        long indexPos = binarySearchIndex(text);\n        if (indexPos < 0) {\n          block = 0;\n        } else {\n          long low = indexPos << BLOCK_INTERVAL_SHIFT;\n          long high = Math.min(numIndexValues - 1, low + BLOCK_INTERVAL_MASK);\n          block = Math.max(low, binarySearchBlock(text, low, high));\n        }\n        \n        // position before block, then scan to term.\n        input.seek(addresses.get(block));\n        currentOrd = (block << INTERVAL_SHIFT) - 1;\n        \n        while (next() != null) {\n          int cmp = term.compareTo(text);\n          if (cmp == 0) {\n            return SeekStatus.FOUND;\n          } else if (cmp > 0) {\n            return SeekStatus.NOT_FOUND;\n          }\n        }\n        return SeekStatus.END;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}