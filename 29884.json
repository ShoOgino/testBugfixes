{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n        return super.getOffsetStrategy(field, query, allTerms);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n        return super.getOffsetStrategy(field, query, allTerms);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n        return super.getOffsetStrategy(field, query, allTerms);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n        return super.getOffsetStrategy(field, query, allTerms);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, SortedSet<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b617b6c660071491e5781addba61cf29dcfa97a","date":1484198957,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        BytesRef[] terms = filterExtractedTerms(getFieldMatcher(field), allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        BytesRef[] terms = filterExtractedTerms(getFieldMatcher(field), allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        return super.getFieldHighlighter(field, query, allTerms, maxPassages);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        Predicate<String> fieldMatcher = getFieldMatcher(field);\n        BytesRef[] terms = filterExtractedTerms(fieldMatcher, allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n\n        UHComponents components = new UHComponents(field, fieldMatcher, query, terms, phraseHelper, automata, highlightFlags);\n        // test all is accessible\n        components.getAutomata();\n        components.getPhraseHelper();\n        components.getTerms();\n        components.getField();\n        components.getHighlightFlags();\n        components.getQuery();\n        components.getFieldMatcher();\n\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, components),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n        return super.getOffsetStrategy(offsetSource, components);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        BytesRef[] terms = filterExtractedTerms(getFieldMatcher(field), allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Set<HighlightFlag> highlightFlags) {\n        return super.getOffsetStrategy(offsetSource, field, terms, phraseHelper, automata, highlightFlags);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2a55d7ebf9e9ced797f40d5154d602029a9791d","date":1561151156,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        UHComponents components = getHighlightComponents(field, query, allTerms);\n        OffsetSource offsetSource = getOptimizedOffsetSource(components);\n\n        // test all is accessible\n        components.getField();\n        components.getFieldMatcher();\n        components.getQuery();\n        components.getTerms();\n        components.getPhraseHelper();\n        components.getAutomata();\n        components.hasUnrecognizedQueryPart();\n        components.getHighlightFlags();\n\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, components),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected UHComponents getHighlightComponents(String field, Query query, Set<Term> allTerms) {\n        Predicate<String> fieldMatcher = getFieldMatcher(field);\n        BytesRef[] terms = filterExtractedTerms(fieldMatcher, allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        boolean queryHasUnrecognizedPart = false;\n        return new UHComponents(field, fieldMatcher, query, terms, phraseHelper, automata, queryHasUnrecognizedPart, highlightFlags);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n        return super.getOffsetStrategy(offsetSource, components);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        Predicate<String> fieldMatcher = getFieldMatcher(field);\n        BytesRef[] terms = filterExtractedTerms(fieldMatcher, allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n\n        UHComponents components = new UHComponents(field, fieldMatcher, query, terms, phraseHelper, automata, highlightFlags);\n        // test all is accessible\n        components.getAutomata();\n        components.getPhraseHelper();\n        components.getTerms();\n        components.getField();\n        components.getHighlightFlags();\n        components.getQuery();\n        components.getFieldMatcher();\n\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, components),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n        return super.getOffsetStrategy(offsetSource, components);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":["795822cce6616d4035b5a4bdbb6c113ea2f715ba","7b617b6c660071491e5781addba61cf29dcfa97a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/visibility/TestUnifiedHighlighterExtensibility#testUnifiedHighlighterExtensibility().mjava","sourceNew":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        UHComponents components = getHighlightComponents(field, query, allTerms);\n        OffsetSource offsetSource = getOptimizedOffsetSource(components);\n\n        // test all is accessible\n        components.getField();\n        components.getFieldMatcher();\n        components.getQuery();\n        components.getTerms();\n        components.getPhraseHelper();\n        components.getAutomata();\n        components.hasUnrecognizedQueryPart();\n        components.getHighlightFlags();\n\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, components),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected UHComponents getHighlightComponents(String field, Query query, Set<Term> allTerms) {\n        Predicate<String> fieldMatcher = getFieldMatcher(field);\n        BytesRef[] terms = filterExtractedTerms(fieldMatcher, allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        LabelledCharArrayMatcher[] automata = getAutomata(field, query, highlightFlags);\n        boolean queryHasUnrecognizedPart = false;\n        return new UHComponents(field, fieldMatcher, query, terms, phraseHelper, automata, queryHasUnrecognizedPart, highlightFlags);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n        return super.getOffsetStrategy(offsetSource, components);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","sourceOld":"  /**\n   * This test is for maintaining the extensibility of the UnifiedHighlighter\n   * for customizations out of package.\n   */\n  @Test\n  public void testUnifiedHighlighterExtensibility() {\n    final int maxLength = 1000;\n    UnifiedHighlighter uh = new UnifiedHighlighter(null, new MockAnalyzer(random())){\n\n      @Override\n      protected Map<String, Object[]> highlightFieldsAsObjects(String[] fieldsIn, Query query, int[] docIdsIn, int[] maxPassagesIn) throws IOException {\n        return super.highlightFieldsAsObjects(fieldsIn, query, docIdsIn, maxPassagesIn);\n      }\n\n      @Override\n      protected OffsetSource getOffsetSource(String field) {\n        return super.getOffsetSource(field);\n      }\n\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return super.getBreakIterator(field);\n      }\n\n      @Override\n      protected PassageScorer getScorer(String field) {\n        return super.getScorer(field);\n      }\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return super.getFormatter(field);\n      }\n\n      @Override\n      public Analyzer getIndexAnalyzer() {\n        return super.getIndexAnalyzer();\n      }\n\n      @Override\n      public IndexSearcher getIndexSearcher() {\n        return super.getIndexSearcher();\n      }\n\n      @Override\n      protected int getMaxNoHighlightPassages(String field) {\n        return super.getMaxNoHighlightPassages(field);\n      }\n\n      @Override\n      protected Boolean requiresRewrite(SpanQuery spanQuery) {\n        return super.requiresRewrite(spanQuery);\n      }\n\n      @Override\n      protected LimitedStoredFieldVisitor newLimitedStoredFieldsVisitor(String[] fields) {\n        return super.newLimitedStoredFieldsVisitor(fields);\n      }\n\n      @Override\n      protected List<CharSequence[]> loadFieldValues(String[] fields, DocIdSetIterator docIter, int cacheCharsThreshold) throws IOException {\n        return super.loadFieldValues(fields, docIter, cacheCharsThreshold);\n      }\n\n      @Override\n      protected FieldHighlighter getFieldHighlighter(String field, Query query, Set<Term> allTerms, int maxPassages) {\n        // THIS IS A COPY of the superclass impl; but use CustomFieldHighlighter\n        UHComponents components = getHighlightComponents(field, query, allTerms);\n        OffsetSource offsetSource = getOptimizedOffsetSource(components);\n\n        // test all is accessible\n        components.getField();\n        components.getFieldMatcher();\n        components.getQuery();\n        components.getTerms();\n        components.getPhraseHelper();\n        components.getAutomata();\n        components.hasUnrecognizedQueryPart();\n        components.getHighlightFlags();\n\n        return new CustomFieldHighlighter(field,\n            getOffsetStrategy(offsetSource, components),\n            new SplittingBreakIterator(getBreakIterator(field), UnifiedHighlighter.MULTIVAL_SEP_CHAR),\n            getScorer(field),\n            maxPassages,\n            getMaxNoHighlightPassages(field),\n            getFormatter(field));\n      }\n\n      @Override\n      protected UHComponents getHighlightComponents(String field, Query query, Set<Term> allTerms) {\n        Predicate<String> fieldMatcher = getFieldMatcher(field);\n        BytesRef[] terms = filterExtractedTerms(fieldMatcher, allTerms);\n        Set<HighlightFlag> highlightFlags = getFlags(field);\n        PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n        CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n        boolean queryHasUnrecognizedPart = false;\n        return new UHComponents(field, fieldMatcher, query, terms, phraseHelper, automata, queryHasUnrecognizedPart, highlightFlags);\n      }\n\n      @Override\n      protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n        return super.getOffsetStrategy(offsetSource, components);\n      }\n\n      @Override\n      public int getMaxLength() {\n        return maxLength;\n      }\n    };\n    assertEquals(uh.getMaxLength(), maxLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"7b617b6c660071491e5781addba61cf29dcfa97a":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["f2e9861e4a2b724d9fc51b618714c579491b78d7","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["9856095f7afb5a607bf5e65077615ed91273508c","7b617b6c660071491e5781addba61cf29dcfa97a"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["7b617b6c660071491e5781addba61cf29dcfa97a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d35c63123a7e255b58f8cf3948eb9a6128100a32"]},"commit2Childs":{"c2a55d7ebf9e9ced797f40d5154d602029a9791d":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","5675b3bced0b155f0ff8001ce2e1e502be7c92f6","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"7b617b6c660071491e5781addba61cf29dcfa97a":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["7b617b6c660071491e5781addba61cf29dcfa97a","9856095f7afb5a607bf5e65077615ed91273508c"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["c2a55d7ebf9e9ced797f40d5154d602029a9791d"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["9856095f7afb5a607bf5e65077615ed91273508c"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["f2e9861e4a2b724d9fc51b618714c579491b78d7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}