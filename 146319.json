{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key = MetricRegistry.name(labelId, metricName, f.getName());\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrRegister(registry, key, new AggregateMetric());\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key;\n        if (doc.size() == 1 && f.getName().equals(MetricUtils.VALUE)) {\n          // only one \"value\" field - skip the unnecessary field name\n          key = MetricRegistry.name(labelId, metricName);\n        } else {\n          key = MetricRegistry.name(labelId, metricName, f.getName());\n        }\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrCreate(registry, key);\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key = MetricRegistry.name(labelId, metricName, f.getName());\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrRegister(registry, key, new AggregateMetric());\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key;\n        if (doc.size() == 1 && f.getName().equals(MetricUtils.VALUE)) {\n          // only one \"value\" field - skip the unnecessary field name\n          key = MetricRegistry.name(labelId, metricName);\n        } else {\n          key = MetricRegistry.name(labelId, metricName, f.getName());\n        }\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrCreate(registry, key);\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key = MetricRegistry.name(labelId, metricName, f.getName());\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrRegister(registry, key, new AggregateMetric());\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsCollectorHandler.MetricUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing {} field in document, skipping: {}\", MetricUtils.METRIC_NAME, doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing {}  field in document, skipping: {}\", SolrReporter.GROUP_ID, doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing {} field in document, skipping: {}\", SolrReporter.REPORTER_ID, doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key;\n        if (doc.size() == 1 && f.getName().equals(MetricUtils.VALUE)) {\n          // only one \"value\" field - skip the unnecessary field name\n          key = MetricRegistry.name(labelId, metricName);\n        } else {\n          key = MetricRegistry.name(labelId, metricName, f.getName());\n        }\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrCreate(registry, key);\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      SolrInputDocument doc = cmd.solrDoc;\n      if (doc == null) {\n        return;\n      }\n      String metricName = (String)doc.getFieldValue(MetricUtils.METRIC_NAME);\n      if (metricName == null) {\n        log.warn(\"Missing \" + MetricUtils.METRIC_NAME + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(MetricUtils.METRIC_NAME);\n      // XXX we could modify keys by using this original registry name\n      doc.remove(SolrReporter.REGISTRY_ID);\n      String groupId = (String)doc.getFieldValue(SolrReporter.GROUP_ID);\n      if (groupId == null) {\n        log.warn(\"Missing \" + SolrReporter.GROUP_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.GROUP_ID);\n      String reporterId = (String)doc.getFieldValue(SolrReporter.REPORTER_ID);\n      if (reporterId == null) {\n        log.warn(\"Missing \" + SolrReporter.REPORTER_ID + \" field in document, skipping: \" + doc);\n        return;\n      }\n      doc.remove(SolrReporter.REPORTER_ID);\n      String labelId = (String)doc.getFieldValue(SolrReporter.LABEL_ID);\n      doc.remove(SolrReporter.LABEL_ID);\n      doc.forEach(f -> {\n        String key;\n        if (doc.size() == 1 && f.getName().equals(MetricUtils.VALUE)) {\n          // only one \"value\" field - skip the unnecessary field name\n          key = MetricRegistry.name(labelId, metricName);\n        } else {\n          key = MetricRegistry.name(labelId, metricName, f.getName());\n        }\n        MetricRegistry registry = metricManager.registry(groupId);\n        AggregateMetric metric = getOrCreate(registry, key);\n        Object o = f.getFirstValue();\n        if (o != null) {\n          metric.set(reporterId, o);\n        } else {\n          // remove missing values\n          metric.clear(reporterId);\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}