{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerMultiConstructorTest#testWithChroot().mjava","commits":[{"id":"471d806b28fa8f148222eb0c300dcab1047a391d","date":1413210204,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerMultiConstructorTest#testWithChroot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrServer client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrServer(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrServer(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerMultiConstructorTest#testWithChroot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrServer client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrServer(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrServer(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientMultiConstructorTest#testWithChroot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerMultiConstructorTest#testWithChroot().mjava","sourceNew":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrClient client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrClient(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrClient(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testWithChroot() {\n    boolean setOrList = random().nextBoolean();\n    int numOfZKServers = TestUtil.nextInt(random(), 1, 5);\n    boolean withChroot = random().nextBoolean();\n\n    final String chroot = \"/mychroot\";\n\n    StringBuilder sb = new StringBuilder();\n    CloudSolrServer client;\n\n    if(setOrList) {\n      /*\n        A LinkedHashSet is required here for testing, or we can't guarantee\n        the order of entries in the final string.\n       */\n      hosts = new LinkedHashSet<>();\n    } else {\n      hosts = new ArrayList<>();\n    }\n\n    for(int i=0; i<numOfZKServers; i++) {\n      String ZKString = \"host\" + i + \":2181\";\n      hosts.add(ZKString);\n      sb.append(ZKString);\n      if(i<numOfZKServers -1) sb.append(\",\");\n    }\n\n    if(withChroot) {\n      sb.append(chroot);\n      client = new CloudSolrServer(hosts, \"/mychroot\");\n    } else {\n      client = new CloudSolrServer(hosts, null);\n    }\n\n    assertEquals(sb.toString(), client.getZkHost());\n    client.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","471d806b28fa8f148222eb0c300dcab1047a391d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["471d806b28fa8f148222eb0c300dcab1047a391d"],"471d806b28fa8f148222eb0c300dcab1047a391d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","471d806b28fa8f148222eb0c300dcab1047a391d"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"471d806b28fa8f148222eb0c300dcab1047a391d":["55980207f1977bd1463465de1659b821347e2fa8","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}