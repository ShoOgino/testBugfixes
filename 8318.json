{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","commits":[{"id":"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","date":1482864726,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    for (String name : names) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a212ea42cce3c5d136142c538cc9a06294c3695","date":1483213592,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    for (String name : names) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4062c48c67245d14e4c4d776cb7b290822ddbcb","date":1483428214,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    for (String name : names) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertEquals(1, reporters.size());\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    assumeWorkingMockito();\n    \n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":"  @Test\n  public void testReporter() throws Exception {\n    assumeWorkingMockito();\n    \n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9","date":1555607300,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrGangliaReporterTest#testReporter().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReporter() throws Exception {\n    assumeWorkingMockito();\n    \n    Path home = Paths.get(TEST_HOME());\n    // define these properties, they are used in solrconfig.xml\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    GMetric ganglia = mock(GMetric.class);\n    final List<String> names = new ArrayList<>();\n    doAnswer(invocation -> {\n        final Object[] args = invocation.getArguments();\n        names.add((String)args[0]);\n        return null;\n    }).when(ganglia).announce(anyString(), anyString(), any(GMetricType.class), anyString(), any(GMetricSlope.class), anyInt(), anyInt(), anyString());\n    String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), \"solr-gangliareporter.xml\").toFile(), \"UTF-8\");\n    NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);\n    CoreContainer cc = createCoreContainer(cfg,\n        new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), \"solrconfig.xml\", \"schema.xml\"));\n    h.coreName = DEFAULT_TEST_CORENAME;\n    SolrMetricManager metricManager = cc.getMetricManager();\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.node\");\n    assertTrue(reporters.toString(), reporters.size() >= 1);\n    SolrMetricReporter reporter = reporters.get(\"test\");\n    assertNotNull(reporter);\n    assertTrue(reporter instanceof SolrGangliaReporter);\n    SolrGangliaReporter gangliaReporter = (SolrGangliaReporter)reporter;\n    gangliaReporter.setGMetric(ganglia);\n    gangliaReporter.start();\n    Thread.sleep(5000);\n    assertTrue(names.size() >= 3);\n    String[] frozenNames = (String[])names.toArray(new String[names.size()]);\n    for (String name : frozenNames) {\n      assertTrue(name, name.startsWith(\"test.solr.node.CONTAINER.cores.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1","8a212ea42cce3c5d136142c538cc9a06294c3695"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["816521ebaad5add9cb96bb88c577394e2938c40b","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"8a212ea42cce3c5d136142c538cc9a06294c3695":["6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f03e4bed5023ec3ef93a771b8888cae991cf448d","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["816521ebaad5add9cb96bb88c577394e2938c40b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90f8f57b02301cce9a16e8ac900fb6aef3cd18a9"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["90f8f57b02301cce9a16e8ac900fb6aef3cd18a9"],"8a212ea42cce3c5d136142c538cc9a06294c3695":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"6ec5db7acd7b6e2289702f52a15f6aec3680dbf1":["b4062c48c67245d14e4c4d776cb7b290822ddbcb","8a212ea42cce3c5d136142c538cc9a06294c3695"],"90f8f57b02301cce9a16e8ac900fb6aef3cd18a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f03e4bed5023ec3ef93a771b8888cae991cf448d","6ec5db7acd7b6e2289702f52a15f6aec3680dbf1"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}