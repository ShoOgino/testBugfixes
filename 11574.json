{"path":"src/test/org/apache/lucene/analysis/BaseTokenTestCase#getTokens(TokenStream).mjava","commits":[{"id":"b26b95c804ccc233c7f7290bf5f7befe43baea94","date":1245802310,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/BaseTokenTestCase#getTokens(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  static List/*<Token>*/ getTokens(TokenStream tstream) throws IOException {\n    List/*<Token>*/ tokens = new ArrayList/*<Token>*/();\n    while (true) {\n      Token t = tstream.next();\n      if (t==null) break;\n      tokens.add(t);\n    }\n    return tokens;\n  }\n/*\n  public static class IterTokenStream extends TokenStream {\n    Iterator<Token> toks;\n    public IterTokenStream(Token... toks) {\n      this.toks = Arrays.asList(toks).iterator();\n    }\n    public IterTokenStream(Iterable<Token> toks) {\n      this.toks = toks.iterator();\n    }\n    public IterTokenStream(Iterator<Token> toks) {\n      this.toks = toks;\n    }\n    public IterTokenStream(String ... text) {\n      int off = 0;\n      ArrayList<Token> t = new ArrayList<Token>( text.length );\n      for( String txt : text ) {\n        t.add( new Token( txt, off, off+txt.length() ) );\n        off += txt.length() + 2;\n      }\n      this.toks = t.iterator();\n    }\n    @Override\n    public Token next() {\n      if (toks.hasNext()) {\n        return toks.next();\n      }\n      return null;\n    }\n  }\n*/\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3","date":1250944809,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/BaseTokenTestCase#getTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/BaseTokenTestCase#getTokens(TokenStream).mjava","sourceNew":"  static List/*<Token>*/ getTokens(TokenStream tstream) throws IOException {\n    List/*<Token>*/ tokens = new ArrayList/*<Token>*/();\n    tstream.reset();\n    while (tstream.incrementToken()) {\n      final Token t = new Token();\n      for (Iterator it = tstream.getAttributeImplsIterator(); it.hasNext();) {\n        final AttributeImpl att = (AttributeImpl) it.next();\n        try {\n          att.copyTo(t);\n        } catch (ClassCastException ce) {\n          // ignore Attributes unsupported by Token\n        }\n      }\n      tokens.add(t);\n    }\n    tstream.close();\n    \n    return tokens;\n  }\n\n","sourceOld":"  static List/*<Token>*/ getTokens(TokenStream tstream) throws IOException {\n    List/*<Token>*/ tokens = new ArrayList/*<Token>*/();\n    while (true) {\n      Token t = tstream.next();\n      if (t==null) break;\n      tokens.add(t);\n    }\n    return tokens;\n  }\n/*\n  public static class IterTokenStream extends TokenStream {\n    Iterator<Token> toks;\n    public IterTokenStream(Token... toks) {\n      this.toks = Arrays.asList(toks).iterator();\n    }\n    public IterTokenStream(Iterable<Token> toks) {\n      this.toks = toks.iterator();\n    }\n    public IterTokenStream(Iterator<Token> toks) {\n      this.toks = toks;\n    }\n    public IterTokenStream(String ... text) {\n      int off = 0;\n      ArrayList<Token> t = new ArrayList<Token>( text.length );\n      for( String txt : text ) {\n        t.add( new Token( txt, off, off+txt.length() ) );\n        off += txt.length() + 2;\n      }\n      this.toks = t.iterator();\n    }\n    @Override\n    public Token next() {\n      if (toks.hasNext()) {\n        return toks.next();\n      }\n      return null;\n    }\n  }\n*/\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/BaseTokenTestCase#getTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  static List/*<Token>*/ getTokens(TokenStream tstream) throws IOException {\n    List/*<Token>*/ tokens = new ArrayList/*<Token>*/();\n    tstream.reset();\n    while (tstream.incrementToken()) {\n      final Token t = new Token();\n      for (Iterator it = tstream.getAttributeImplsIterator(); it.hasNext();) {\n        final AttributeImpl att = (AttributeImpl) it.next();\n        try {\n          att.copyTo(t);\n        } catch (ClassCastException ce) {\n          // ignore Attributes unsupported by Token\n        }\n      }\n      tokens.add(t);\n    }\n    tstream.close();\n    \n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b26b95c804ccc233c7f7290bf5f7befe43baea94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3":["b26b95c804ccc233c7f7290bf5f7befe43baea94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"b26b95c804ccc233c7f7290bf5f7befe43baea94":["31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3"],"31141e8d8b7422f85e58a0745bdaed5fa8b4b0b3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26b95c804ccc233c7f7290bf5f7befe43baea94"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}