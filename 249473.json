{"path":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","commits":[{"id":"f76ccdfca879f9e8881676ce0fb611f44c0f07a2","date":1322905997,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((NumericField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJoinQuery = new BlockJoinQuery(childQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((StoredField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((NumericField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["6bd4a7478aca8c3880512b730b28bf3239340635"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3548d95924aea5ee6d88499a7d166498a8e49","date":1328909332,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((StoredField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((StoredField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba540f2bbd05538ead776efa6ccbabd725c68b2","date":1331205650,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((StoredField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, ((StoredField) childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random.nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, false);\n\n    s.search(fullQuery, c);\n    \n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n\n    //assertEquals(1, results.totalHitCount);\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n\n    final GroupDocs<Integer> group = results.groups[0];\n    assertEquals(1, group.totalHits);\n\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    //System.out.println(\"TEST: now test up\");\n\n    // Now join \"up\" (map parent hits to child docs) instead...:\n    ToChildBlockJoinQuery parentJoinQuery = new ToChildBlockJoinQuery(parentQuery, parentsFilter, random().nextBoolean());\n    BooleanQuery fullChildQuery = new BooleanQuery();\n    fullChildQuery.add(new BooleanClause(parentJoinQuery, Occur.MUST));\n    fullChildQuery.add(new BooleanClause(childQuery, Occur.MUST));\n    \n    //System.out.println(\"FULL: \" + fullChildQuery);\n    TopDocs hits = s.search(fullChildQuery, 10);\n    assertEquals(1, hits.totalHits);\n    childDoc = s.doc(hits.scoreDocs[0].doc);\n    //System.out.println(\"CHILD = \" + childDoc + \" docID=\" + hits.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertEquals(2007, (childDoc.getField(\"year\")).numericValue());\n    assertEquals(\"Lisa\", getParentDoc(r, parentsFilter, hits.scoreDocs[0].doc).get(\"name\"));\n\n    // Test with filter on child docs:\n    assertEquals(0, s.search(fullChildQuery,\n                             new QueryWrapperFilter(new TermQuery(new Term(\"skill\", \"foosball\"))),\n                             1).totalHits);\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["b5a3548d95924aea5ee6d88499a7d166498a8e49","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["fa0f44f887719e97183771e977cfc4bfb485b766"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["6bd4a7478aca8c3880512b730b28bf3239340635"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba540f2bbd05538ead776efa6ccbabd725c68b2"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["b5a3548d95924aea5ee6d88499a7d166498a8e49"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["fa0f44f887719e97183771e977cfc4bfb485b766"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b5a3548d95924aea5ee6d88499a7d166498a8e49":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["6bd4a7478aca8c3880512b730b28bf3239340635","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"],"fa0f44f887719e97183771e977cfc4bfb485b766":["b5a3548d95924aea5ee6d88499a7d166498a8e49"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}