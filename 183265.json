{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(SolrDocument,int,String,FvhContainer,Query,IndexReader,SolrQueryRequest).mjava","commits":[{"id":"1a9aeb4a98b03660f065aa31f6b3f2251a12b613","date":1581405488,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(SolrDocument,int,String,FvhContainer,Query,IndexReader,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(Document,int,String,FvhContainer,Query,IndexReader,SolrQueryRequest).mjava","sourceNew":"  /** Returns the alternate highlight object for this field -- a String[] by default.  Null if none. */\n  @SuppressWarnings(\"unchecked\")\n  protected Object alternateField(SolrDocument doc, int docId, String fieldName, FvhContainer fvhContainer, Query query,\n                                  IndexReader reader, SolrQueryRequest req) throws IOException {\n    IndexSchema schema = req.getSearcher().getSchema();\n    SolrParams params = req.getParams();\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH, 0);\n    if (alternateField == null || alternateField.length() == 0) {\n      return null;\n    }\n\n    if (params.getFieldBool(fieldName, HighlightParams.HIGHLIGHT_ALTERNATE, true) && !alternateField.equals(fieldName)) {\n      // Try to highlight alternate field\n      Object fieldHighlights = null;\n      SchemaField schemaField = schema.getFieldOrNull(alternateField);\n      if (schemaField != null) {\n        HashMap<String, String> invariants = new HashMap<>();\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.SNIPPETS, \"1\");\n        // Enforce maxAlternateFieldLength by FRAGSIZE. Minimum 18 due to FVH limitations\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.FRAGSIZE,\n            alternateFieldLen > 0 ? String.valueOf(Math.max(18, alternateFieldLen)) : String.valueOf(Integer.MAX_VALUE));\n        SolrParams origParams = req.getParams();\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(invariants), origParams));\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n        req.setParams(origParams);\n        if (fieldHighlights != null) {\n          return fieldHighlights;\n        }\n      }\n    }\n\n\n    // Fallback to static non-highlighted\n    List<String> listFields = getFieldValues(doc, alternateField, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n    if (listFields.isEmpty()) {\n      // The alternate field did not exist, treat the original field as fallback instead\n      listFields = getFieldValues(doc, fieldName, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n      if (listFields.isEmpty()) {\n        return null;\n      }\n    }\n\n    String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n    Encoder encoder = getEncoder(fieldName, params);\n    List<String> altList = new ArrayList<>();\n    int len = 0;\n    for( String altText: altTexts ){\n      if( alternateFieldLen <= 0 ){\n        altList.add(encoder.encodeText(altText));\n      } else{\n        altList.add( len + altText.length() > alternateFieldLen ?\n            encoder.encodeText(altText.substring(0, alternateFieldLen - len)) :\n            encoder.encodeText(altText) );\n        len += altText.length();\n        if( len >= alternateFieldLen ) break;\n      }\n    }\n    return altList;\n  }\n\n","sourceOld":"  /** Returns the alternate highlight object for this field -- a String[] by default.  Null if none. */\n  @SuppressWarnings(\"unchecked\")\n  protected Object alternateField(Document doc, int docId, String fieldName, FvhContainer fvhContainer, Query query,\n                                  IndexReader reader, SolrQueryRequest req) throws IOException {\n    IndexSchema schema = req.getSearcher().getSchema();\n    SolrParams params = req.getParams();\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH, 0);\n    if (alternateField == null || alternateField.length() == 0) {\n      return null;\n    }\n\n    if (params.getFieldBool(fieldName, HighlightParams.HIGHLIGHT_ALTERNATE, true) && !alternateField.equals(fieldName)) {\n      // Try to highlight alternate field\n      Object fieldHighlights = null;\n      SchemaField schemaField = schema.getFieldOrNull(alternateField);\n      if (schemaField != null) {\n        HashMap<String, String> invariants = new HashMap<>();\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.SNIPPETS, \"1\");\n        // Enforce maxAlternateFieldLength by FRAGSIZE. Minimum 18 due to FVH limitations\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.FRAGSIZE,\n            alternateFieldLen > 0 ? String.valueOf(Math.max(18, alternateFieldLen)) : String.valueOf(Integer.MAX_VALUE));\n        SolrParams origParams = req.getParams();\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(invariants), origParams));\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n        req.setParams(origParams);\n        if (fieldHighlights != null) {\n          return fieldHighlights;\n        }\n      }\n    }\n\n\n    // Fallback to static non-highlighted\n    IndexableField[] docFields = doc.getFields(alternateField);\n    if (docFields.length == 0) {\n      // The alternate field did not exist, treat the original field as fallback instead\n      docFields = doc.getFields(fieldName);\n    }\n    List<String> listFields = new ArrayList<>();\n    for (IndexableField field : docFields) {\n      if (field.binaryValue() == null)\n        listFields.add(field.stringValue());\n    }\n\n    if (listFields.isEmpty()) {\n      return null;\n    }\n    String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n    Encoder encoder = getEncoder(fieldName, params);\n    List<String> altList = new ArrayList<>();\n    int len = 0;\n    for( String altText: altTexts ){\n      if( alternateFieldLen <= 0 ){\n        altList.add(encoder.encodeText(altText));\n      } else{\n        altList.add( len + altText.length() > alternateFieldLen ?\n            encoder.encodeText(altText.substring(0, alternateFieldLen - len)) :\n            encoder.encodeText(altText) );\n        len += altText.length();\n        if( len >= alternateFieldLen ) break;\n      }\n    }\n    return altList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(SolrDocument,int,String,FvhContainer,Query,IndexReader,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#alternateField(SolrDocument,int,String,FvhContainer,Query,IndexReader,SolrQueryRequest).mjava","sourceNew":"  /** Returns the alternate highlight object for this field -- a String[] by default.  Null if none. */\n  @SuppressWarnings(\"unchecked\")\n  protected Object alternateField(SolrDocument doc, int docId, String fieldName, FvhContainer fvhContainer, Query query,\n                                  IndexReader reader, SolrQueryRequest req) throws IOException {\n    IndexSchema schema = req.getSearcher().getSchema();\n    SolrParams params = req.getParams();\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH, 0);\n    if (alternateField == null || alternateField.length() == 0) {\n      return null;\n    }\n\n    if (params.getFieldBool(fieldName, HighlightParams.HIGHLIGHT_ALTERNATE, true) && !alternateField.equals(fieldName)) {\n      // Try to highlight alternate field\n      Object fieldHighlights = null;\n      SchemaField schemaField = schema.getFieldOrNull(alternateField);\n      if (schemaField != null) {\n        HashMap<String, String> invariants = new HashMap<>();\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.SNIPPETS, \"1\");\n        // Enforce maxAlternateFieldLength by FRAGSIZE. Minimum 18 due to FVH limitations\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.FRAGSIZE,\n                alternateFieldLen > 0 ? String.valueOf(Math.max(18, alternateFieldLen)) : String.valueOf(Integer.MAX_VALUE));\n        SolrParams origParams = req.getParams();\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(invariants), origParams));\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n        req.setParams(origParams);\n        if (fieldHighlights != null) {\n          return fieldHighlights;\n        }\n      }\n    }\n\n\n    // Fallback to static non-highlighted\n    List<String> listFields = getFieldValues(doc, alternateField, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n    if (listFields.isEmpty()) {\n      // The alternate field did not exist, treat the original field as fallback instead\n      listFields = getFieldValues(doc, fieldName, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n      if (listFields.isEmpty()) {\n        return null;\n      }\n    }\n\n    String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n    Encoder encoder = getEncoder(fieldName, params);\n    List<String> altList = new ArrayList<>();\n    int len = 0;\n    for (String altText : altTexts) {\n      if (alternateFieldLen <= 0) {\n        altList.add(encoder.encodeText(altText));\n      } else {\n        altList.add(len + altText.length() > alternateFieldLen ?\n                encoder.encodeText(altText.substring(0, alternateFieldLen - len)) :\n                encoder.encodeText(altText));\n        len += altText.length();\n        if (len >= alternateFieldLen) break;\n      }\n    }\n    return altList;\n  }\n\n","sourceOld":"  /** Returns the alternate highlight object for this field -- a String[] by default.  Null if none. */\n  @SuppressWarnings(\"unchecked\")\n  protected Object alternateField(SolrDocument doc, int docId, String fieldName, FvhContainer fvhContainer, Query query,\n                                  IndexReader reader, SolrQueryRequest req) throws IOException {\n    IndexSchema schema = req.getSearcher().getSchema();\n    SolrParams params = req.getParams();\n    String alternateField = params.getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n    int alternateFieldLen = params.getFieldInt(fieldName, HighlightParams.ALTERNATE_FIELD_LENGTH, 0);\n    if (alternateField == null || alternateField.length() == 0) {\n      return null;\n    }\n\n    if (params.getFieldBool(fieldName, HighlightParams.HIGHLIGHT_ALTERNATE, true) && !alternateField.equals(fieldName)) {\n      // Try to highlight alternate field\n      Object fieldHighlights = null;\n      SchemaField schemaField = schema.getFieldOrNull(alternateField);\n      if (schemaField != null) {\n        HashMap<String, String> invariants = new HashMap<>();\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.SNIPPETS, \"1\");\n        // Enforce maxAlternateFieldLength by FRAGSIZE. Minimum 18 due to FVH limitations\n        invariants.put(\"f.\" + alternateField + \".\" + HighlightParams.FRAGSIZE,\n            alternateFieldLen > 0 ? String.valueOf(Math.max(18, alternateFieldLen)) : String.valueOf(Integer.MAX_VALUE));\n        SolrParams origParams = req.getParams();\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(invariants), origParams));\n        fieldHighlights = doHighlightingOfField(doc, docId, schemaField, fvhContainer, query, reader, req, params);\n        req.setParams(origParams);\n        if (fieldHighlights != null) {\n          return fieldHighlights;\n        }\n      }\n    }\n\n\n    // Fallback to static non-highlighted\n    List<String> listFields = getFieldValues(doc, alternateField, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n    if (listFields.isEmpty()) {\n      // The alternate field did not exist, treat the original field as fallback instead\n      listFields = getFieldValues(doc, fieldName, Integer.MAX_VALUE, Integer.MAX_VALUE, req);\n      if (listFields.isEmpty()) {\n        return null;\n      }\n    }\n\n    String[] altTexts = listFields.toArray(new String[listFields.size()]);\n\n    Encoder encoder = getEncoder(fieldName, params);\n    List<String> altList = new ArrayList<>();\n    int len = 0;\n    for( String altText: altTexts ){\n      if( alternateFieldLen <= 0 ){\n        altList.add(encoder.encodeText(altText));\n      } else{\n        altList.add( len + altText.length() > alternateFieldLen ?\n            encoder.encodeText(altText.substring(0, alternateFieldLen - len)) :\n            encoder.encodeText(altText) );\n        len += altText.length();\n        if( len >= alternateFieldLen ) break;\n      }\n    }\n    return altList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}