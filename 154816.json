{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#computeIfAbsent(K,Function[#-super-K,#-extends-V]).mjava","commits":[{"id":"bfa27be7bde9d711ce2b418fadc555654849383f","date":1573652589,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#computeIfAbsent(K,Function[#-super-K,#-extends-V]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n    synchronized (map) {\n      if (getState() == State.LIVE) {\n        lookups++;\n        stats.lookups.increment();\n      }\n      AtomicBoolean newEntry = new AtomicBoolean();\n      CacheValue<V> entry = map.computeIfAbsent(key, k -> {\n        V value = mappingFunction.apply(k);\n        // preserve the semantics of computeIfAbsent\n        if (value == null) {\n          return null;\n        }\n        CacheValue<V> cacheValue = new CacheValue<>(value, timeSource.getEpochTimeNs());\n        if (getState() == State.LIVE) {\n          stats.inserts.increment();\n        }\n        if (syntheticEntries) {\n          if (cacheValue.createTime < oldestEntry) {\n            oldestEntry = cacheValue.createTime;\n          }\n        }\n        // increment local inserts regardless of state???\n        // it does make it more consistent with the current size...\n        inserts++;\n\n        // important to calc and add new ram bytes first so that removeEldestEntry can compare correctly\n        long keySize = RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n        long valueSize = RamUsageEstimator.sizeOfObject(cacheValue, QUERY_DEFAULT_RAM_BYTES_USED);\n        ramBytesUsed += keySize + valueSize + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n        newEntry.set(true);\n        return cacheValue;\n      });\n      if (!newEntry.get()) {\n        if (getState() == State.LIVE) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return entry != null ? entry.value : null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#computeIfAbsent(K,Function[#-super-K,#-extends-V]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n    synchronized (map) {\n      if (getState() == State.LIVE) {\n        lookups++;\n        stats.lookups.increment();\n      }\n      AtomicBoolean newEntry = new AtomicBoolean();\n      CacheValue<V> entry = map.computeIfAbsent(key, k -> {\n        V value = mappingFunction.apply(k);\n        // preserve the semantics of computeIfAbsent\n        if (value == null) {\n          return null;\n        }\n        CacheValue<V> cacheValue = new CacheValue<>(value, timeSource.getEpochTimeNs());\n        if (getState() == State.LIVE) {\n          stats.inserts.increment();\n        }\n        if (syntheticEntries) {\n          if (cacheValue.createTime < oldestEntry) {\n            oldestEntry = cacheValue.createTime;\n          }\n        }\n        // increment local inserts regardless of state???\n        // it does make it more consistent with the current size...\n        inserts++;\n\n        // important to calc and add new ram bytes first so that removeEldestEntry can compare correctly\n        long keySize = RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n        long valueSize = RamUsageEstimator.sizeOfObject(cacheValue, QUERY_DEFAULT_RAM_BYTES_USED);\n        ramBytesUsed += keySize + valueSize + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n        newEntry.set(true);\n        return cacheValue;\n      });\n      if (!newEntry.get()) {\n        if (getState() == State.LIVE) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return entry != null ? entry.value : null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfa27be7bde9d711ce2b418fadc555654849383f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["bfa27be7bde9d711ce2b418fadc555654849383f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"bfa27be7bde9d711ce2b418fadc555654849383f":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfa27be7bde9d711ce2b418fadc555654849383f"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}