{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","sourceNew":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4, ShingleFilter.TOKEN_SEPARATOR, false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","sourceOld":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4, ShingleFilter.TOKEN_SEPARATOR, false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","sourceNew":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4, ShingleFilter.TOKEN_SEPARATOR, false, false);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","sourceOld":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4, ShingleFilter.TOKEN_SEPARATOR, false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6237bacfd44ad16661121d7d8a604a57f78978e9","date":1391038488,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","sourceNew":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR, false, false, ShingleFilter.DEFAULT_FILLER_TOKEN);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","sourceOld":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4, ShingleFilter.TOKEN_SEPARATOR, false, false);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","sourceNew":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n    analyzer.close();\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR, false, false, ShingleFilter.DEFAULT_FILLER_TOKEN);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR, false, false, ShingleFilter.DEFAULT_FILLER_TOKEN);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNonDefaultMinShingleSize().mjava","sourceNew":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n    analyzer.close();\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR, false, false, ShingleFilter.DEFAULT_FILLER_TOKEN);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testNonDefaultMinShingleSize() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please\",   \"please divide this\",   \"please divide this sentence\", \n                                         \"divide\",   \"divide this sentence\", \"divide this sentence into\", \n                                         \"this\",     \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence\", \"sentence into shingles\",\n                                         \"into\",\n                                         \"shingles\" },\n                          new int[] { 0,  0,  0,  7,  7,  7, 14, 14, 14, 19, 19, 28, 33 },\n                          new int[] { 6, 18, 27, 13, 27, 32, 18, 32, 41, 27, 41, 32, 41 },\n                          new int[] { 1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  1,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 3, 4,\n        ShingleFilter.DEFAULT_TOKEN_SEPARATOR, false, false, ShingleFilter.DEFAULT_FILLER_TOKEN);\n    assertAnalyzesTo(analyzer, \"please divide this sentence into shingles\",\n                          new String[] { \"please divide this\",   \"please divide this sentence\", \n                                         \"divide this sentence\", \"divide this sentence into\", \n                                         \"this sentence into\",   \"this sentence into shingles\",\n                                         \"sentence into shingles\" },\n                          new int[] {  0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 18, 27, 27, 32, 32, 41, 41 },\n                          new int[] {  1,  0,  1,  0,  1,  0,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6237bacfd44ad16661121d7d8a604a57f78978e9","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["6237bacfd44ad16661121d7d8a604a57f78978e9"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["6237bacfd44ad16661121d7d8a604a57f78978e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6237bacfd44ad16661121d7d8a604a57f78978e9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}