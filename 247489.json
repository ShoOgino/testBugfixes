{"path":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8","date":1333047008,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new StringIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==-1 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==-1 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return null;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==-1 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==-1 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return null;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? def  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        return ord==0 ? null  : NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == 0) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              mval.value = NumberUtils.SortableStr2long(termsIndex.lookup(ord, spare),0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","1a1f2fd9c5ec6d68e6c57de139a66673b613e13b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return termsIndex.getOrd(doc) >= 0;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc) ? longVal(doc) : null;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return null;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return termsIndex.getOrd(doc) >= 0;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc) ? longVal(doc) : null;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return null;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/SortableLongFieldSource[SortableLongField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final long def = defVal;\n\n    return new DocTermsIndexDocValues(this, readerContext, field) {\n      private final BytesRef spare = new BytesRef();\n\n      @Override\n      protected String toTerm(String readableValue) {\n        return NumberUtils.long2sortableStr(readableValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return termsIndex.getOrd(doc) >= 0;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float)longVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int)longVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        int ord=termsIndex.getOrd(doc);\n        if (ord==-1) {\n          return def;\n        } else {\n          termsIndex.lookupOrd(ord, spare);\n          return NumberUtils.SortableStr2long(spare,0,5);\n        }\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double)longVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Long.toString(longVal(doc));\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return exists(doc) ? longVal(doc) : null;\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + longVal(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueLong mval = new MutableValueLong();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord=termsIndex.getOrd(doc);\n            if (ord == -1) {\n              mval.value = def;\n              mval.exists = false;\n            } else {\n              termsIndex.lookupOrd(ord, spare);\n              mval.value = NumberUtils.SortableStr2long(spare,0,5);\n              mval.exists = true;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2893fd5349134af382d33ccc3d84840394c6c1":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"],"73bb5a57dc75b54a39494f99986599cae7dff417":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"6e2893fd5349134af382d33ccc3d84840394c6c1":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"c26f00b574427b55127e869b935845554afde1fa":["d638301ad1cfcae567b681b893bc8781f0ee48a5","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8":["6e2893fd5349134af382d33ccc3d84840394c6c1","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["9b5937bd5a9c4cfdd2dbea83e1247d2f471cb3c8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","2106271e380c198349e0f6eac0395bb462913fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}