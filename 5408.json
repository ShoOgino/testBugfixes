{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","commits":[{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","sourceNew":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs and field updates for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created new _X_N.del and field updates files.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","sourceOld":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e4e08ceec867127dcd9913a5ebbc46cf85a28d","date":1379651991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","sourceNew":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.release: \" + rld.info);\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs and field updates for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created new _X_N.del and field updates files.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.release: drop readers \" + rld.info);\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","sourceOld":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs and field updates for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created new _X_N.del and field updates files.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","sourceNew":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n      release(rld, true);\n    }\n\n","sourceOld":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n\n      // Matches incRef in get:\n      rld.decRef();\n\n      // Pool still holds a ref:\n      assert rld.refCount() >= 1;\n\n      if (!poolReaders && rld.refCount() == 1) {\n        // This is the last ref to this RLD, and we're not\n        // pooling, so remove it:\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.release: \" + rld.info);\n        if (rld.writeLiveDocs(directory)) {\n          // Make sure we only write del docs and field updates for a live segment:\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created new _X_N.del and field updates files.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n//        System.out.println(\"[\" + Thread.currentThread().getName() + \"] ReaderPool.release: drop readers \" + rld.info);\n        rld.dropReaders();\n        readerMap.remove(rld.info);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#release(ReadersAndLiveDocs).mjava","sourceNew":null,"sourceOld":"    public synchronized void release(ReadersAndLiveDocs rld) throws IOException {\n      release(rld, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["e072d0b1fc19e0533d8ce432eed245196bca6fde","38e3b736c7ca086d61b7dbb841c905ee115490da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}