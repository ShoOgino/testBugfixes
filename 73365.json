{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public TermWeightPayloadIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039","date":1382209267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      this.relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      this.hasPayloads = hasPayloads;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      this.relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      this.hasPayloads = hasPayloads;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      this.relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads, boolean hasContexts) throws IOException {\n      this.hasPayloads = hasPayloads;\n      this.hasContexts = hasContexts;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField, contextsField});\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      this.hasPayloads = hasPayloads;\n      docCount = reader.maxDoc() - 1;\n      weightValues = (weightField != null) ? MultiDocValues.getNumericValues(reader, weightField) : null;\n      liveDocs = (reader.leaves().size() > 0) ? MultiFields.getLiveDocs(reader) : null;\n      relevantFields = getRelevantFields(new String [] {field, weightField, payloadField});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["f6ff8992b4de8c3e2f3e4e363868e5f87eb19039"],"f6ff8992b4de8c3e2f3e4e363868e5f87eb19039":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}