{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","commits":[{"id":"059062eb4071e7bbb5a38b6513158f2f87ede135","date":1163808719,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c86a85bad36cce1f63303b1e515590eec6e1b9","date":1164109784,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#_testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void _testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae2e3479e918a138a16fa9ff2c269113eaa15a8","date":1164214891,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#_testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void _testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s0\",\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0ce5f4b07366fc8a697347439179a273c8fcff","date":1164215220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir, true);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc9931b60a4b1618b9f7cb9c176883390697b1b","date":1173207152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(outputDir);\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n      \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected = {\"_0.cfs\",\n                             \"_0_1.del\",\n                             \"_1.cfs\",\n                             \"_2.cfs\",\n                             \"_2_1.s\" + contentFieldIndex,\n                             \"_3.cfs\",\n                             \"segments_a\",\n                             \"segments.gen\"};\n        if (!autoCommit) {\n          expected[6] = \"segments_3\";\n        }\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  // disable until hardcoded file names are fixes:\n  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    for(int i=0;i<35;i++) {\n      addDoc(writer, i);\n    }\n    assertEquals(\"wrong doc count\", 35, writer.docCount());\n    writer.close();\n\n    // Delete one doc so we get a .del file:\n    IndexReader reader = IndexReader.open(dir);\n    Term searchTerm = new Term(\"id\", \"7\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n    // Set one norm so we get a .s0 file:\n    reader.setNorm(21, \"content\", (float) 1.5);\n    reader.close();\n\n    // The numbering of fields can vary depending on which\n    // JRE is in use.  On some JREs we see content bound to\n    // field 0; on others, field 1.  So, here we have to\n    // figure out which field number corresponds to\n    // \"content\", and then set our expected file names below\n    // accordingly:\n    CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n    FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n    int contentFieldIndex = -1;\n    for(int i=0;i<fieldInfos.size();i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.name.equals(\"content\")) {\n        contentFieldIndex = i;\n        break;\n      }\n    }\n    cfsReader.close();\n    assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n    // Now verify file names:\n    String[] expected = {\"_0.cfs\",\n                         \"_0_1.del\",\n                         \"_1.cfs\",\n                         \"_2.cfs\",\n                         \"_2_1.s\" + contentFieldIndex,\n                         \"_3.cfs\",\n                         \"segments_a\",\n                         \"segments.gen\"};\n\n    String[] actual = dir.list();\n    Arrays.sort(expected);\n    Arrays.sort(actual);\n    if (!Arrays.equals(expected, actual)) {\n      fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n    }\n    dir.close();\n\n    rmDir(outputDir);\n  }\n\n","bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adabb461edd9894ec460711a27f45364ec5f1464","date":1173867824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n      \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected = {\"_0.cfs\",\n                             \"_0_1.del\",\n                             \"_1.cfs\",\n                             \"_2.cfs\",\n                             \"_2_1.s\" + contentFieldIndex,\n                             \"_3.cfs\",\n                             \"segments_a\",\n                             \"segments.gen\"};\n        if (!autoCommit) {\n          expected[6] = \"segments_3\";\n        }\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n      \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected = {\"_0.cfs\",\n                             \"_0_1.del\",\n                             \"_1.cfs\",\n                             \"_2.cfs\",\n                             \"_2_1.s\" + contentFieldIndex,\n                             \"_3.cfs\",\n                             \"segments_a\",\n                             \"segments.gen\"};\n        if (!autoCommit) {\n          expected[6] = \"segments_3\";\n        }\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n      \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_2.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_2.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected = {\"_0.cfs\",\n                             \"_0_1.del\",\n                             \"_1.cfs\",\n                             \"_2.cfs\",\n                             \"_2_1.s\" + contentFieldIndex,\n                             \"_3.cfs\",\n                             \"segments_a\",\n                             \"segments.gen\"};\n        if (!autoCommit) {\n          expected[6] = \"segments_3\";\n        }\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir), null, false);\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir), null, false);\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setRAMBufferSizeMB(16.0);\n        //IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_4\",\n                    \"segments.gen\"};\n\n        if (!autoCommit)\n          expected[3] = \"segments_3\";\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.list();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":null,"sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":null,"sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":null,"sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"712be41a80a289d25186217345860f2ddec4cab8","date":1254838366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      String outputDir = \"lucene.backwardscompat0.index\";\n      rmDir(outputDir);\n\n      try {\n        Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n        boolean autoCommit = 0 == pass;\n \n        IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), true);\n        writer.setRAMBufferSizeMB(16.0);\n        for(int i=0;i<35;i++) {\n          addDoc(writer, i);\n        }\n        assertEquals(\"wrong doc count\", 35, writer.docCount());\n        writer.close();\n\n        // Delete one doc so we get a .del file:\n        IndexReader reader = IndexReader.open(dir);\n        Term searchTerm = new Term(\"id\", \"7\");\n        int delCount = reader.deleteDocuments(searchTerm);\n        assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n        // Set one norm so we get a .s0 file:\n        reader.setNorm(21, \"content\", (float) 1.5);\n        reader.close();\n\n        // The numbering of fields can vary depending on which\n        // JRE is in use.  On some JREs we see content bound to\n        // field 0; on others, field 1.  So, here we have to\n        // figure out which field number corresponds to\n        // \"content\", and then set our expected file names below\n        // accordingly:\n        CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n        FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n        int contentFieldIndex = -1;\n        for(int i=0;i<fieldInfos.size();i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.name.equals(\"content\")) {\n            contentFieldIndex = i;\n            break;\n          }\n        }\n        cfsReader.close();\n        assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n        // Now verify file names:\n        String[] expected;\n        expected = new String[] {\"_0.cfs\",\n                    \"_0_1.del\",\n                    \"_0_1.s\" + contentFieldIndex,\n                    \"segments_3\",\n                    \"segments.gen\"};\n\n        String[] actual = dir.listAll();\n        Arrays.sort(expected);\n        Arrays.sort(actual);\n        if (!Arrays.equals(expected, actual)) {\n          fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n        }\n        dir.close();\n      } finally {\n        rmDir(outputDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setRAMBufferSizeMB(16.0);\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testExactFileNames().mjava","sourceNew":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","sourceOld":"  public void testExactFileNames() throws IOException {\n\n    String outputDir = \"lucene.backwardscompat0.index\";\n    rmDir(outputDir);\n\n    try {\n      Directory dir = FSDirectory.open(new File(fullDir(outputDir)));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<35;i++) {\n        addDoc(writer, i);\n      }\n      assertEquals(\"wrong doc count\", 35, writer.maxDoc());\n      writer.close();\n\n      // Delete one doc so we get a .del file:\n      IndexReader reader = IndexReader.open(dir, false);\n      Term searchTerm = new Term(\"id\", \"7\");\n      int delCount = reader.deleteDocuments(searchTerm);\n      assertEquals(\"didn't delete the right number of documents\", 1, delCount);\n\n      // Set one norm so we get a .s0 file:\n      reader.setNorm(21, \"content\", (float) 1.5);\n      reader.close();\n\n      // The numbering of fields can vary depending on which\n      // JRE is in use.  On some JREs we see content bound to\n      // field 0; on others, field 1.  So, here we have to\n      // figure out which field number corresponds to\n      // \"content\", and then set our expected file names below\n      // accordingly:\n      CompoundFileReader cfsReader = new CompoundFileReader(dir, \"_0.cfs\");\n      FieldInfos fieldInfos = new FieldInfos(cfsReader, \"_0.fnm\");\n      int contentFieldIndex = -1;\n      for(int i=0;i<fieldInfos.size();i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.name.equals(\"content\")) {\n          contentFieldIndex = i;\n          break;\n        }\n      }\n      cfsReader.close();\n      assertTrue(\"could not locate the 'content' field number in the _2.cfs segment\", contentFieldIndex != -1);\n\n      // Now verify file names:\n      String[] expected;\n      expected = new String[] {\"_0.cfs\",\n                               \"_0_1.del\",\n                               \"_0_1.s\" + contentFieldIndex,\n                               \"segments_3\",\n                               \"segments.gen\"};\n\n      String[] actual = dir.listAll();\n      Arrays.sort(expected);\n      Arrays.sort(actual);\n      if (!Arrays.equals(expected, actual)) {\n        fail(\"incorrect filenames in index: expected:\\n    \" + asString(expected) + \"\\n  actual:\\n    \" + asString(actual));\n      }\n      dir.close();\n    } finally {\n      rmDir(outputDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"da0ce5f4b07366fc8a697347439179a273c8fcff":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["adabb461edd9894ec460711a27f45364ec5f1464"],"adabb461edd9894ec460711a27f45364ec5f1464":["8b6187898fc4413ccd18229711786550a280383c"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"712be41a80a289d25186217345860f2ddec4cab8":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"8b6187898fc4413ccd18229711786550a280383c":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["e82780afe6097066eb5befb86e9432f077667e3d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["a015c55424dd37249054283bedc90388bd45358f"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"b583d3621fe173e7296abcf62f82fb707c901234":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["da0ce5f4b07366fc8a697347439179a273c8fcff"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["712be41a80a289d25186217345860f2ddec4cab8"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"da0ce5f4b07366fc8a697347439179a273c8fcff":["66b12ba4967665216eeb706b58d424c51fb3641a"],"ddc9931b60a4b1618b9f7cb9c176883390697b1b":["8b6187898fc4413ccd18229711786550a280383c"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b583d3621fe173e7296abcf62f82fb707c901234"],"adabb461edd9894ec460711a27f45364ec5f1464":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a015c55424dd37249054283bedc90388bd45358f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["059062eb4071e7bbb5a38b6513158f2f87ede135"],"dae2e3479e918a138a16fa9ff2c269113eaa15a8":["da0ce5f4b07366fc8a697347439179a273c8fcff"],"712be41a80a289d25186217345860f2ddec4cab8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"30c86a85bad36cce1f63303b1e515590eec6e1b9":["dae2e3479e918a138a16fa9ff2c269113eaa15a8"],"8b6187898fc4413ccd18229711786550a280383c":["adabb461edd9894ec460711a27f45364ec5f1464"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["712be41a80a289d25186217345860f2ddec4cab8"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"66b12ba4967665216eeb706b58d424c51fb3641a":["ddc9931b60a4b1618b9f7cb9c176883390697b1b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e82780afe6097066eb5befb86e9432f077667e3d":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"059062eb4071e7bbb5a38b6513158f2f87ede135":["30c86a85bad36cce1f63303b1e515590eec6e1b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}