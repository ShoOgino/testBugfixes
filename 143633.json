{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"/dev/null","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdb920e3a3747f686f10b316a464ba75b36b7732","date":1384217439,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379c08eb69654c02a4c8e00903032ce54db2a115","date":1384289609,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.fastSet(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.fastSet(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5","date":1396311813,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.contains(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new FixedBitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = collapsedSet.iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new FixedBitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > -1) {\n        collapsedSet.set(nullDoc);\n      }\n\n      //Handle the boosted docs.\n      if(this.boostKeys != null) {\n        int s = boostKeys.size();\n        for(int i=0; i<s; i++) {\n          int key = this.boostKeys.get(i);\n          if(key != nullValue) {\n            cmap.remove(key);\n          }\n          //Add the boosted docs to the collapsedSet\n          this.collapsedSet.set(boostDocs.get(i));\n        }\n      }\n\n      Iterator<IntLongCursor> it1 = cmap.iterator();\n\n      while(it1.hasNext()) {\n        IntLongCursor cursor = it1.next();\n        int doc = (int)cursor.value;\n        collapsedSet.set(doc);\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      collapseValues = contexts[currentContext].reader().getNumericDocValues(this.field);\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          collapseValues = contexts[currentContext].reader().getNumericDocValues(this.field);\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        int collapseValue = (int)collapseValues.get(contextDoc);\n        if(collapseValue != nullValue) {\n          long scoreDoc = cmap.get(collapseValue);\n          dummy.score = Float.intBitsToFloat((int)(scoreDoc>>32));\n        } else if(boosts && mergeBoost.boost(globalDoc)) {\n          //Ignore so boosted documents don't mess up the null scoring policies.\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":6,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingScoreCollector#finish().mjava","sourceNew":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        collapsedSet.set(nullDoc);\n      }\n\n      //Handle the boosted docs.\n      if(this.boostOrds != null) {\n        int s = boostOrds.size();\n        for(int i=0; i<s; i++) {\n          int ord = this.boostOrds.get(i);\n          if(ord > -1) {\n            //Remove any group heads that are in the same groups as boosted documents.\n            ords[ord] = -1;\n          }\n          //Add the boosted docs to the collapsedSet\n          this.collapsedSet.set(boostDocs.get(i));\n        }\n        mergeBoost.reset(); // Reset mergeBoost because we're going to use it again.\n      }\n\n      //Build the sorted DocSet of group heads.\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int index = -1;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = docId-currentDocBase;\n\n        int ord = -1;\n        if(this.ordinalMap != null) {\n          //Handle ordinalMapping case\n          ord = segmentValues.getOrd(contextDoc);\n          if(ord > -1) {\n            ord = (int)segmentOrdinalMap.get(ord);\n          }\n        } else {\n          //Handle top Level FieldCache or Single Segment Case\n          ord = segmentValues.getOrd(docId);\n        }\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(boosts && mergeBoost.boost(docId)) {\n          //Ignore so it doesn't mess up the null scoring.\n        } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(++index);\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      if(nullScore > 0) {\n        this.collapsedSet.set(nullDoc);\n      }\n\n      if(this.boostOrds != null) {\n        for(int i=0; i<this.boostOrds.length; i++) {\n          ords[boostOrds[i]] = -1;\n        }\n      }\n\n      for(int i=0; i<ords.length; i++) {\n        int doc = ords[i];\n        if(doc > -1) {\n          collapsedSet.set(doc);\n        }\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapsedSet, 0L); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        int ord = values.getOrd(docId);\n\n        if(ord > -1) {\n          dummy.score = scores[ord];\n        } else if(this.boostDocs != null && boostDocs.containsKey(docId)) {\n          //Elevated docs don't need a score.\n          dummy.score = 0F;\n        } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n          dummy.score = nullScore;\n        } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n          dummy.score = nullScores.get(nullScoreIndex++);\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379c08eb69654c02a4c8e00903032ce54db2a115":["fdb920e3a3747f686f10b316a464ba75b36b7732"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"fdb920e3a3747f686f10b316a464ba75b36b7732":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["ae73da626f97850c922c42736f808d0378e165f0"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["379c08eb69654c02a4c8e00903032ce54db2a115"],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["5eb2511ababf862ea11e10761c70ee560cd84510","ae73da626f97850c922c42736f808d0378e165f0"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"80c55596a764e2d397e982828e75fcac5ce430a0":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"]},"commit2Childs":{"379c08eb69654c02a4c8e00903032ce54db2a115":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"5eb2511ababf862ea11e10761c70ee560cd84510":["15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"fdb920e3a3747f686f10b316a464ba75b36b7732":["379c08eb69654c02a4c8e00903032ce54db2a115"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["80c55596a764e2d397e982828e75fcac5ce430a0"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["5eb2511ababf862ea11e10761c70ee560cd84510","0a72d053a3654ff5cb7da6c761dfbfbea4258aa5"],"0a72d053a3654ff5cb7da6c761dfbfbea4258aa5":["5eb2511ababf862ea11e10761c70ee560cd84510","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["fdb920e3a3747f686f10b316a464ba75b36b7732"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"ae73da626f97850c922c42736f808d0378e165f0":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}