{"path":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","commits":[{"id":"5627e15617078174dbb4df182fd7eea55dc13a53","date":1504755192,"type":0,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: \" + keystoreKey, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5116709312b934bc0896b2bfacec613e226ca0db","date":1504820111,"type":4,"author":"Mark Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","sourceNew":null,"sourceOld":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: \" + keystoreKey, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157272e74802c6a6ac491fdaa27cec01f78c3b06","date":1523329076,"type":0,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: \" + keystoreKey, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431c2627ab600554864fa78f5e76abef81faa42d","date":1523357854,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: \" + keystoreKey, e);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/configuration/providers/HadoopSSLCredentialProvider#getCredential(String).mjava","sourceNew":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: {}\", keystoreKey, e);\n      return null;\n    }\n  }\n\n","sourceOld":"  protected String getCredential(String keystoreKey) {\n    try {\n      char[] password = hadoopConfigurationProvider.getPassword(keystoreKey);\n      return password == null ? null : String.valueOf(password);\n    } catch (IOException e) {\n      log.error(\"Could not read password from Hadoop Credential Store: \" + keystoreKey, e);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["431c2627ab600554864fa78f5e76abef81faa42d"],"157272e74802c6a6ac491fdaa27cec01f78c3b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5627e15617078174dbb4df182fd7eea55dc13a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5116709312b934bc0896b2bfacec613e226ca0db":["5627e15617078174dbb4df182fd7eea55dc13a53"],"431c2627ab600554864fa78f5e76abef81faa42d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","157272e74802c6a6ac491fdaa27cec01f78c3b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"157272e74802c6a6ac491fdaa27cec01f78c3b06":["431c2627ab600554864fa78f5e76abef81faa42d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["157272e74802c6a6ac491fdaa27cec01f78c3b06","5627e15617078174dbb4df182fd7eea55dc13a53","431c2627ab600554864fa78f5e76abef81faa42d"],"5627e15617078174dbb4df182fd7eea55dc13a53":["5116709312b934bc0896b2bfacec613e226ca0db"],"5116709312b934bc0896b2bfacec613e226ca0db":[],"431c2627ab600554864fa78f5e76abef81faa42d":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5116709312b934bc0896b2bfacec613e226ca0db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}