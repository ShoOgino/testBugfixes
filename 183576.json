{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fc791afc075c00a9ce29ca03eca7a6c143c28a","date":1341671452,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private static void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private static void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertListEquality(String,List[#-extends-PackedInts.Reader]).mjava","sourceNew":"  private static void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","sourceOld":"  private void assertListEquality(\n            String message, List<? extends PackedInts.Reader> packedInts) {\n    if (packedInts.size() == 0) {\n      return;\n    }\n    PackedInts.Reader base = packedInts.get(0);\n    int valueCount = base.size();\n    for (PackedInts.Reader packedInt: packedInts) {\n      assertEquals(message + \". The number of values should be the same \",\n              valueCount, packedInt.size());\n    }\n    for (int i = 0 ; i < valueCount ; i++) {\n      for (int j = 1 ; j < packedInts.size() ; j++) {\n        assertEquals(String.format(Locale.ROOT,\n                \"%s. The value at index %d should be the same for %s and %s\",\n                message, i, base.getClass().getSimpleName(),\n                packedInts.get(j).getClass().getSimpleName()),\n                base.get(i), packedInts.get(j).get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","829d9441b99897377d279219000bb71b50c026be"],"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"829d9441b99897377d279219000bb71b50c026be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c1fc791afc075c00a9ce29ca03eca7a6c143c28a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["829d9441b99897377d279219000bb71b50c026be"],"46d8ada1fff8d18cb197c38c7983225162599948":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c1fc791afc075c00a9ce29ca03eca7a6c143c28a","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["829d9441b99897377d279219000bb71b50c026be","46d8ada1fff8d18cb197c38c7983225162599948"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}