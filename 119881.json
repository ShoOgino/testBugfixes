{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<BigDecimal>)value).stream().mapToDouble(BigDecimal::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<BigDecimal>)value).stream().mapToDouble(BigDecimal::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<BigDecimal>)value).stream().mapToDouble(BigDecimal::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<Number>)value).stream().mapToDouble(Number::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<BigDecimal>)value).stream().mapToDouble(BigDecimal::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<Number>)value).stream().mapToDouble(Number::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<Number>)value).stream().mapToDouble(Number::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/AnovaEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<Number>)value).stream().mapToDouble(Number::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Tuple tuple = new Tuple();\n    tuple.put(StreamParams.P_VALUE, p);\n    tuple.put(\"f-ratio\", f);\n    return tuple;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    \n    // at this point we know every incoming value is an array of BigDecimals\n    \n    @SuppressWarnings({\"unchecked\"})\n    List<double[]> anovaInput = Arrays.stream(values)\n        // for each List, convert to double[]\n        .map(value -> ((List<Number>)value).stream().mapToDouble(Number::doubleValue).toArray())\n        // turn into List<double[]>\n        .collect(Collectors.toList());\n    \n    OneWayAnova anova = new OneWayAnova();\n    double p = anova.anovaPValue(anovaInput);\n    double f = anova.anovaFValue(anovaInput);\n    Map<String,Number> m = new HashMap<>();\n    m.put(\"p-value\", p);\n    m.put(\"f-ratio\", f);\n    return new Tuple(m);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["804a8d5358fe7b7563b85ee7838714d720b89272"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}