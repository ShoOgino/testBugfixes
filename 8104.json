{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","commits":[{"id":"b873e6a2036c1deda886d1fcf6ba42c995dd15a0","date":1408410832,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.number);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      addressInstances.put(field.number, addresses);\n      ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    return addresses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      addressInstances.put(field.name, addresses);\n      ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.number);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      addressInstances.put(field.number, addresses);\n      ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      addressInstances.put(field.name, addresses);\n      ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      addressInstances.put(field.name, addresses);\n      ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["bc8f80fee115148a0e4a0574560be06b494de821"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}