{"path":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","commits":[{"id":"c9d6e41db27d65fefe44a81b13acf5a5097a166b","date":1144591501,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"/dev/null","sourceNew":"  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6af8262271cd1db53df95496839ffa27f984a3b1","date":1153746046,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n    setDefaultOperator(\"AND\".equals(schema.getQueryParserDefaultOperator()) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n  }\n\n","sourceOld":"  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ae0782f8714819fbf2b48737d98875f3cea82a9","date":1158171441,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   *\n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":"  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n    setDefaultOperator(\"AND\".equals(schema.getQueryParserDefaultOperator()) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be8ed1a226944f6331478d1e92b3d8713b0fceea","date":1172106023,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   *\n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n    String operator = schema.getQueryParserDefaultOperator();\n    setDefaultOperator(\"AND\".equals(operator) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1d1f748be6299a4bb58280fa1697824edc82c6","date":1172182682,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema.getSolrQueryParser\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n    String operator = schema.getQueryParserDefaultOperator();\n    setDefaultOperator(\"AND\".equals(operator) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52bc3124a8d6a8eda16d43834db32eb20af3a056","date":1176682139,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema.getSolrQueryParser\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d9d0a51c3327de369ec765bf55295b7b33641a3","date":1207691330,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd5e959b8cf5634de06d4f7b12616d64c43d8316","date":1227976688,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);    \n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbca8d36fa6e78e5f32059dc9c80da83e66470de","date":1249752043,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);    \n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getSolrQueryParser(String defaultField)\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);    \n  }\n\n","bugFix":["52bc3124a8d6a8eda16d43834db32eb20af3a056"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a","date":1252677016,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(Version.LUCENE_24, defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1156ef6aefa80fbb72a7e45b6499f5c5d8eed46","date":1268704413,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(schema.getSolrConfig().getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24), defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(Version.LUCENE_24, defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","pathOld":"src/java/org/apache/solr/search/SolrQueryParser#SolrQueryParser(IndexSchema,String).mjava","sourceNew":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(schema.getSolrConfig().getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24), defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","sourceOld":"  /**\n   * Constructs a SolrQueryParser using the schema to understand the\n   * formats and datatypes of each field.  Only the defaultSearchField\n   * will be used from the IndexSchema (unless overridden),\n   * &lt;solrQueryParser&gt; will not be used.\n   * \n   * @param schema Used for default search field name if defaultField is null and field information is used for analysis\n   * @param defaultField default field used for unspecified search terms.  if null, the schema default field is used\n   * @see IndexSchema#getDefaultSearchFieldName()\n   */\n  public SolrQueryParser(IndexSchema schema, String defaultField) {\n    super(schema.getSolrConfig().getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24), defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    this.parser  = null;\n    this.defaultField = defaultField;\n    setLowercaseExpandedTerms(false);\n    setEnablePositionIncrements(true);\n    checkAllowLeadingWildcards();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd5e959b8cf5634de06d4f7b12616d64c43d8316":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"9d9d0a51c3327de369ec765bf55295b7b33641a3":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"be8ed1a226944f6331478d1e92b3d8713b0fceea":["2ae0782f8714819fbf2b48737d98875f3cea82a9"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["52bc3124a8d6a8eda16d43834db32eb20af3a056"],"2ae0782f8714819fbf2b48737d98875f3cea82a9":["6af8262271cd1db53df95496839ffa27f984a3b1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"c9d6e41db27d65fefe44a81b13acf5a5097a166b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"52bc3124a8d6a8eda16d43834db32eb20af3a056":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"6af8262271cd1db53df95496839ffa27f984a3b1":["c9d6e41db27d65fefe44a81b13acf5a5097a166b"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["cd5e959b8cf5634de06d4f7b12616d64c43d8316"],"d1156ef6aefa80fbb72a7e45b6499f5c5d8eed46":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d1156ef6aefa80fbb72a7e45b6499f5c5d8eed46"],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["be8ed1a226944f6331478d1e92b3d8713b0fceea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cd5e959b8cf5634de06d4f7b12616d64c43d8316":["cbca8d36fa6e78e5f32059dc9c80da83e66470de"],"9d9d0a51c3327de369ec765bf55295b7b33641a3":["cd5e959b8cf5634de06d4f7b12616d64c43d8316"],"be8ed1a226944f6331478d1e92b3d8713b0fceea":["4d1d1f748be6299a4bb58280fa1697824edc82c6"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["9d9d0a51c3327de369ec765bf55295b7b33641a3"],"2ae0782f8714819fbf2b48737d98875f3cea82a9":["be8ed1a226944f6331478d1e92b3d8713b0fceea"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c9d6e41db27d65fefe44a81b13acf5a5097a166b"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["d1156ef6aefa80fbb72a7e45b6499f5c5d8eed46"],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"c9d6e41db27d65fefe44a81b13acf5a5097a166b":["6af8262271cd1db53df95496839ffa27f984a3b1"],"52bc3124a8d6a8eda16d43834db32eb20af3a056":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"6af8262271cd1db53df95496839ffa27f984a3b1":["2ae0782f8714819fbf2b48737d98875f3cea82a9"],"cbca8d36fa6e78e5f32059dc9c80da83e66470de":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"d1156ef6aefa80fbb72a7e45b6499f5c5d8eed46":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"4d1d1f748be6299a4bb58280fa1697824edc82c6":["52bc3124a8d6a8eda16d43834db32eb20af3a056"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}