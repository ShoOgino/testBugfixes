{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(tupleStream instanceof ExpressibleStream){\n      expression.addParameter(((ExpressibleStream)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    if(comp instanceof ExpressibleComparator){\n      expression.addParameter(new StreamExpressionNamedParameter(\"sort\",((ExpressibleComparator)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"sort\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(tupleStream instanceof ExpressibleStream){\n      expression.addParameter(((ExpressibleStream)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    if(comp instanceof ExpressibleComparator){\n      expression.addParameter(new StreamExpressionNamedParameter(\"sort\",((ExpressibleComparator)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(stream instanceof Expressible){\n      expression.addParameter(((Expressible)stream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(tupleStream instanceof Expressible){\n      expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    if(comp instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"sort\",((Expressible)comp).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(stream instanceof Expressible){\n      expression.addParameter(((Expressible)stream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    // stream\n    if(stream instanceof Expressible){\n      expression.addParameter(((Expressible)stream).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["0891a6931fc352fc7e61f2752ef9add758d3fb89","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}