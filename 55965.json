{"path":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#finish(UpdateLog.SyncLevel).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#finish(UpdateLog.SyncLevel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(UpdateLog.SyncLevel syncLevel) {\n    if (syncLevel == UpdateLog.SyncLevel.NONE) return;\n    try {\n      synchronized (this) {\n        fos.flushBuffer();\n        \n        // we must flush to hdfs\n        // TODO: we probably don't need to\n        // hsync below if we do this - I\n        // think they are equivalent.\n        tlogOutStream.hflush();\n      }\n\n      if (syncLevel == UpdateLog.SyncLevel.FSYNC) {\n        // Since fsync is outside of synchronized block, we can end up with a partial\n        // last record on power failure (which is OK, and does not represent an error...\n        // we just need to be aware of it when reading).\n        \n        //raf.getFD().sync();\n        tlogOutStream.hsync();\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f1fd096d09854ad0876c8474505b917b7fc807ee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#finish(UpdateLog.SyncLevel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(UpdateLog.SyncLevel syncLevel) {\n    if (syncLevel == UpdateLog.SyncLevel.NONE) return;\n    try {\n      synchronized (this) {\n        fos.flushBuffer();\n        \n        // we must flush to hdfs\n        // TODO: we probably don't need to\n        // hsync below if we do this - I\n        // think they are equivalent.\n        tlogOutStream.hflush();\n      }\n\n      if (syncLevel == UpdateLog.SyncLevel.FSYNC) {\n        // Since fsync is outside of synchronized block, we can end up with a partial\n        // last record on power failure (which is OK, and does not represent an error...\n        // we just need to be aware of it when reading).\n        \n        //raf.getFD().sync();\n        tlogOutStream.hsync();\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fd096d09854ad0876c8474505b917b7fc807ee","date":1408630567,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#finish(UpdateLog.SyncLevel).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#finish(UpdateLog.SyncLevel).mjava","sourceNew":"  @Override\n  public void finish(UpdateLog.SyncLevel syncLevel) {\n    if (syncLevel == UpdateLog.SyncLevel.NONE) return;\n    try {\n      synchronized (this) {\n        fos.flushBuffer();\n      }\n\n      if (syncLevel == UpdateLog.SyncLevel.FSYNC) {\n        tlogOutStream.hsync();\n      } else {\n        tlogOutStream.hflush();\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finish(UpdateLog.SyncLevel syncLevel) {\n    if (syncLevel == UpdateLog.SyncLevel.NONE) return;\n    try {\n      synchronized (this) {\n        fos.flushBuffer();\n        \n        // we must flush to hdfs\n        // TODO: we probably don't need to\n        // hsync below if we do this - I\n        // think they are equivalent.\n        tlogOutStream.hflush();\n      }\n\n      if (syncLevel == UpdateLog.SyncLevel.FSYNC) {\n        // Since fsync is outside of synchronized block, we can end up with a partial\n        // last record on power failure (which is OK, and does not represent an error...\n        // we just need to be aware of it when reading).\n        \n        //raf.getFD().sync();\n        tlogOutStream.hsync();\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1fd096d09854ad0876c8474505b917b7fc807ee":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1fd096d09854ad0876c8474505b917b7fc807ee"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f1fd096d09854ad0876c8474505b917b7fc807ee"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f1fd096d09854ad0876c8474505b917b7fc807ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}