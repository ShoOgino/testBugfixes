{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerTest#testDefaultsAndBackcompat().mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerTest#testDefaultsAndBackcompat().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultsAndBackcompat() throws Exception {\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"rate\", 1.0);\n    props.put(\"collection\", \"test\");\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n    try (SearchRateTrigger trigger = new SearchRateTrigger(\"search_rate_trigger2\")) {\n      trigger.configure(loader, cloudManager, props);\n      Map<String, Object> config = trigger.getConfig();\n      Set<String> collections = (Set<String>)config.get(SearchRateTrigger.COLLECTIONS_PROP);\n      assertEquals(collections.toString(), 1, collections.size());\n      assertEquals(\"test\", collections.iterator().next());\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.SHARD));\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.NODE));\n      assertEquals(1.0, config.get(SearchRateTrigger.ABOVE_RATE_PROP));\n      assertEquals(-1.0, config.get(SearchRateTrigger.BELOW_RATE_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_METRIC, config.get(SearchRateTrigger.METRIC_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_MAX_OPS, config.get(SearchRateTrigger.MAX_OPS_PROP));\n      assertNull(config.get(SearchRateTrigger.MIN_REPLICAS_PROP));\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, config.get(SearchRateTrigger.ABOVE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.MOVEREPLICA, config.get(SearchRateTrigger.ABOVE_NODE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.DELETEREPLICA, config.get(SearchRateTrigger.BELOW_OP_PROP));\n      assertNull(config.get(SearchRateTrigger.BELOW_NODE_OP_PROP));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerTest#testDefaultsAndBackcompat().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerTest#testDefaultsAndBackcompat().mjava","sourceNew":"  @Test\n  public void testDefaultsAndBackcompat() throws Exception {\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"rate\", 1.0);\n    props.put(\"collection\", \"test\");\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n    try (SearchRateTrigger trigger = new SearchRateTrigger(\"search_rate_trigger2\")) {\n      trigger.configure(loader, cloudManager, props);\n      Map<String, Object> config = trigger.getConfig();\n      @SuppressWarnings({\"unchecked\"})\n      Set<String> collections = (Set<String>)config.get(SearchRateTrigger.COLLECTIONS_PROP);\n      assertEquals(collections.toString(), 1, collections.size());\n      assertEquals(\"test\", collections.iterator().next());\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.SHARD));\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.NODE));\n      assertEquals(1.0, config.get(SearchRateTrigger.ABOVE_RATE_PROP));\n      assertEquals(-1.0, config.get(SearchRateTrigger.BELOW_RATE_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_METRIC, config.get(SearchRateTrigger.METRIC_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_MAX_OPS, config.get(SearchRateTrigger.MAX_OPS_PROP));\n      assertNull(config.get(SearchRateTrigger.MIN_REPLICAS_PROP));\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, config.get(SearchRateTrigger.ABOVE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.MOVEREPLICA, config.get(SearchRateTrigger.ABOVE_NODE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.DELETEREPLICA, config.get(SearchRateTrigger.BELOW_OP_PROP));\n      assertNull(config.get(SearchRateTrigger.BELOW_NODE_OP_PROP));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultsAndBackcompat() throws Exception {\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"rate\", 1.0);\n    props.put(\"collection\", \"test\");\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n    try (SearchRateTrigger trigger = new SearchRateTrigger(\"search_rate_trigger2\")) {\n      trigger.configure(loader, cloudManager, props);\n      Map<String, Object> config = trigger.getConfig();\n      Set<String> collections = (Set<String>)config.get(SearchRateTrigger.COLLECTIONS_PROP);\n      assertEquals(collections.toString(), 1, collections.size());\n      assertEquals(\"test\", collections.iterator().next());\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.SHARD));\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.NODE));\n      assertEquals(1.0, config.get(SearchRateTrigger.ABOVE_RATE_PROP));\n      assertEquals(-1.0, config.get(SearchRateTrigger.BELOW_RATE_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_METRIC, config.get(SearchRateTrigger.METRIC_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_MAX_OPS, config.get(SearchRateTrigger.MAX_OPS_PROP));\n      assertNull(config.get(SearchRateTrigger.MIN_REPLICAS_PROP));\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, config.get(SearchRateTrigger.ABOVE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.MOVEREPLICA, config.get(SearchRateTrigger.ABOVE_NODE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.DELETEREPLICA, config.get(SearchRateTrigger.BELOW_OP_PROP));\n      assertNull(config.get(SearchRateTrigger.BELOW_NODE_OP_PROP));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerTest#testDefaultsAndBackcompat().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDefaultsAndBackcompat() throws Exception {\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"rate\", 1.0);\n    props.put(\"collection\", \"test\");\n    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());\n    try (SearchRateTrigger trigger = new SearchRateTrigger(\"search_rate_trigger2\")) {\n      trigger.configure(loader, cloudManager, props);\n      Map<String, Object> config = trigger.getConfig();\n      @SuppressWarnings({\"unchecked\"})\n      Set<String> collections = (Set<String>)config.get(SearchRateTrigger.COLLECTIONS_PROP);\n      assertEquals(collections.toString(), 1, collections.size());\n      assertEquals(\"test\", collections.iterator().next());\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.SHARD));\n      assertEquals(\"#ANY\", config.get(AutoScalingParams.NODE));\n      assertEquals(1.0, config.get(SearchRateTrigger.ABOVE_RATE_PROP));\n      assertEquals(-1.0, config.get(SearchRateTrigger.BELOW_RATE_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_METRIC, config.get(SearchRateTrigger.METRIC_PROP));\n      assertEquals(SearchRateTrigger.DEFAULT_MAX_OPS, config.get(SearchRateTrigger.MAX_OPS_PROP));\n      assertNull(config.get(SearchRateTrigger.MIN_REPLICAS_PROP));\n      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, config.get(SearchRateTrigger.ABOVE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.MOVEREPLICA, config.get(SearchRateTrigger.ABOVE_NODE_OP_PROP));\n      assertEquals(CollectionParams.CollectionAction.DELETEREPLICA, config.get(SearchRateTrigger.BELOW_OP_PROP));\n      assertNull(config.get(SearchRateTrigger.BELOW_NODE_OP_PROP));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}