{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable \", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockDirectoryWrapper.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable\", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs == null || !delDocs.get(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testMultipleThreadsFailure(MockRAMDirectory.Failure).mjava","sourceNew":null,"sourceOld":"  // Runs test, with multiple threads, using the specific\n  // failure to trigger an IOException\n  public void _testMultipleThreadsFailure(MockRAMDirectory.Failure failure) throws Exception {\n\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<2;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setMaxBufferedDocs(2);\n      // We expect disk full exceptions in the merge threads\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, true);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      Thread.sleep(10);\n\n      dir.failOn(failure);\n      failure.setDoFail();\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i].join();\n        assertTrue(\"hit unexpected Throwable \", threads[i].error == null);\n      }\n\n      boolean success = false;\n      try {\n        writer.close(false);\n        success = true;\n      } catch (IOException ioe) {\n        failure.clearDoFail();\n        writer.close(false);\n      }\n\n      if (success) {\n        IndexReader reader = IndexReader.open(dir, true);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!reader.isDeleted(j)) {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        reader.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["d572389229127c297dd1fa5ce4758e1cec41e799"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a05409176bd65129d67a785ee70e881e238a9aef"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5ef87af8c7bd0f8429622b83aa74202383f2e757","b21422ff1d1d56499dec481f193b402e5e8def5b"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a05409176bd65129d67a785ee70e881e238a9aef"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}