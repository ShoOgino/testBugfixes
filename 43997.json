{"path":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString, AnalyticsParsers.DEFAULT_DATE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString, AnalyticsParsers.DEFAULT_DATE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString, AnalyticsParsers.DEFAULT_DATE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString, AnalyticsParsers.DEFAULT_DATE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString, FieldCache.NUMERIC_UTILS_INT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString, FieldCache.NUMERIC_UTILS_LONG_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString, FieldCache.NUMERIC_UTILS_FLOAT_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString, FieldCache.NUMERIC_UTILS_DOUBLE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString, AnalyticsParsers.DEFAULT_DATE_PARSER) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFieldSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","sourceOld":"  /**\n   *  Builds a value source for a given field, making sure that the field fits a given source type.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  private static ValueSource buildFieldSource(IndexSchema schema, String expressionString, int sourceType) {\n    SchemaField sf;\n    try {\n      sf = schema.getField(expressionString);\n    } catch (SolrException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+expressionString+\" does not exist.\",e);\n    }\n    FieldType type = sf.getType();\n    if ( type instanceof TrieIntField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new IntFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieLongField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new LongFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieFloatField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new FloatFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDoubleField) {\n      if (sourceType!=NUMBER_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DoubleFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof TrieDateField) {\n      if (sourceType!=DATE_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new DateFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    } else if (type instanceof StrField) {\n      if (sourceType!=STRING_TYPE&&sourceType!=FIELD_TYPE) {\n        return null;\n      }\n      return new BytesRefFieldSource(expressionString) {\n        public String description() {\n          return field;\n        }\n      };\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST, type.toString()+\" is not a supported field type in Solr Analytics.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ff403346522eaa9de75403763e297e83a3ea585c","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["ff403346522eaa9de75403763e297e83a3ea585c","93dd449115a9247533e44bab47e8429e5dccbc6d"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}