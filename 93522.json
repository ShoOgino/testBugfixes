{"path":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","commits":[{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","sourceNew":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner nodeToBringUp, boolean disableFingerprint)\n      throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    // if there was no replication, we should not have replication.properties file\n    String replicationProperties = nodeToBringUp.jetty.getSolrHome() + \"/cores/\" + DEFAULT_TEST_COLLECTION_NAME + \"/data/replication.properties\";\n    assertTrue(\"PeerSync failed. Had to fail back to replication\", Files.notExists(Paths.get(replicationProperties)));\n  }\n\n","sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner,CloudJettyRunner,boolean).mjava","sourceNew":null,"sourceOld":"  private void bringUpDeadNodeAndEnsureNoReplication(CloudJettyRunner leaderJetty, CloudJettyRunner nodeToBringUp,\n      boolean disableFingerprint) throws Exception {\n    // disable fingerprint check if needed\n    System.setProperty(\"solr.disableFingerprint\", String.valueOf(disableFingerprint));\n\n    long numRequestsBefore = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    indexInBackground(50);\n    \n    // bring back dead node and ensure it recovers\n    ChaosMonkey.start(nodeToBringUp.jetty);\n    \n    nodesDown.remove(nodeToBringUp);\n\n    waitTillNodesActive();\n    waitForThingsToLevelOut(30);\n\n    Set<CloudJettyRunner> jetties = new HashSet<>();\n    jetties.addAll(shardToJetty.get(\"shard1\"));\n    jetties.removeAll(nodesDown);\n    assertEquals(getShardCount() - nodesDown.size(), jetties.size());\n\n    long cloudClientDocs = cloudClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n    assertEquals(docId, cloudClientDocs);\n\n    long numRequestsAfter = (Long) leaderJetty.jetty\n        .getCoreContainer()\n        .getCores()\n        .iterator()\n        .next()\n        .getRequestHandler(ReplicationHandler.PATH)\n        .getStatistics().get(\"requests\");\n\n    assertEquals(\"PeerSync failed. Had to fail back to replication\", numRequestsBefore, numRequestsAfter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}