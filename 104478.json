{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","commits":[{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"/dev/null","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public ValueSource getValueSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return new IntFieldSource(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return new DoubleConstValueSource(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return new DoubleConstValueSource(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), null, 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public ValueSource getValueSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return new IntFieldSource(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return new DoubleConstValueSource(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return new DoubleConstValueSource(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public ValueSource getValueSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return new IntFieldSource(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return new DoubleConstValueSource(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return new DoubleConstValueSource(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), null, 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public ValueSource getValueSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return new IntFieldSource(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return new DoubleConstValueSource(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return new DoubleConstValueSource(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public ValueSource getValueSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return new IntFieldSource(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return new DoubleConstValueSource(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return new DoubleConstValueSource(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return DoubleValuesSource.constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return DoubleValuesSource.constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#testDynamicExtendedVariableExample().mjava","sourceNew":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return DoubleValuesSource.constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return DoubleValuesSource.constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","sourceOld":"  public void testDynamicExtendedVariableExample() throws Exception {\n    Expression popularity = JavascriptCompiler.compile(\"doc['popularity'].value + magicarray[0] + fourtytwo\");\n\n    // The following is an example of how to write bindings which parse the variable name into pieces.\n    // Note, however, that this requires a lot of error checking.  Each \"error case\" below should be\n    // filled in with proper error messages for a real use case.\n    Bindings bindings = new Bindings() {\n      @Override\n      public DoubleValuesSource getDoubleValuesSource(String name) {\n        VariableContext[] var = VariableContext.parse(name);\n        assert var[0].type == MEMBER;\n        String base = var[0].text;\n        if (base.equals(\"doc\")) {\n          if (var.length > 1 && var[1].type == STR_INDEX) {\n            String field = var[1].text;\n            if (var.length > 2 && var[2].type == MEMBER && var[2].text.equals(\"value\")) {\n              return DoubleValuesSource.fromIntField(field);\n            } else {\n              fail(\"member: \" + var[2].text);// error case, non/missing \"value\" member access\n            }\n          } else {\n            fail();// error case, doc should be a str indexed array\n          }\n        } else if (base.equals(\"magicarray\")) {\n          if (var.length > 1 && var[1].type == INT_INDEX) {\n            return constant(2048);\n          } else {\n            fail();// error case, magic array isn't an array\n          }\n        } else if (base.equals(\"fourtytwo\")) {\n          return constant(42);\n        } else {\n          fail();// error case (variable doesn't exist)\n        }\n        throw new IllegalArgumentException(\"Illegal reference '\" + name + \"'\");\n      }\n    };\n    Sort sort = new Sort(popularity.getSortField(bindings, false));\n    TopFieldDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc)td.scoreDocs[0];\n    assertEquals(2092D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[1];\n    assertEquals(2095D, (Double)d.fields[0], 1E-4);\n\n    d = (FieldDoc)td.scoreDocs[2];\n    assertEquals(2110D, (Double)d.fields[0], 1E-4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["501fdb8d708778ae5368dd5c44879e1d46487e43"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}