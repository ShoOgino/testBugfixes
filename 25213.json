{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(String,Fields,String,Analyzer,int).mjava","commits":[{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getTokenStream(String,Fields,String,Analyzer,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a token stream from either un-inverting a term vector if possible, or by analyzing the text.\n   *\n   * WARNING: Don't call this if there is more than one value for this field.  If there are, and if there are term\n   * vectors, then there is a single tokenstream with offsets suggesting all the field values were concatenated.\n   *\n   * @param field The field to either get term vectors from or to analyze the text from.\n   * @param tvFields from {@link IndexReader#getTermVectors(int)}. Possibly null. For performance, this instance should\n   *                 be re-used for the same document (e.g. when highlighting multiple fields).\n   * @param text the text to analyze, failing term vector un-inversion\n   * @param analyzer the analyzer to analyze {@code text} with, failing term vector un-inversion\n   * @param maxStartOffset Terms with a startOffset greater than this aren't returned.  Use -1 for no limit.\n   *                       Suggest using {@link Highlighter#getMaxDocCharsToAnalyze()} - 1.\n   *\n   * @return a token stream from either term vectors, or from analyzing the text. Never null.\n   */\n  public static TokenStream getTokenStream(String field, Fields tvFields, String text, Analyzer analyzer,\n                                           int maxStartOffset) throws IOException {\n    TokenStream tokenStream = getTermVectorTokenStreamOrNull(field, tvFields, maxStartOffset);\n    if (tokenStream != null) {\n      return tokenStream;\n    }\n    tokenStream = analyzer.tokenStream(field, text);\n    if (maxStartOffset >= 0 && maxStartOffset < text.length() - 1) {\n      tokenStream = new LimitTokenOffsetFilter(tokenStream, maxStartOffset);\n    }\n    return tokenStream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d62e4938659e263e96ae8188e11aea8a940aea5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}