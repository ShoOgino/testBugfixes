{"path":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#getCurrentSearcher().mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#getCurrentSearcher().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#getCurrentSearcher().mjava","sourceNew":"  @Override\n  protected IndexSearcher getCurrentSearcher() throws Exception {\n    if (random.nextInt(10) == 7) {\n      // NOTE: not best practice to call maybeReopen\n      // synchronous to your search threads, but still we\n      // test as apps will presumably do this for\n      // simplicity:\n      if (mgr.maybeReopen()) {\n        lifetimeMGR.prune(pruner);\n      }\n    }\n\n    IndexSearcher s = null;\n\n    synchronized(pastSearchers) {\n      while (pastSearchers.size() != 0 && random.nextDouble() < 0.25) {\n        // 1/4 of the time pull an old searcher, ie, simulate\n        // a user doing a follow-on action on a previous\n        // search (drilling down/up, clicking next/prev page,\n        // etc.)\n        final Long token = pastSearchers.get(random.nextInt(pastSearchers.size()));\n        s = lifetimeMGR.acquire(token);\n        if (s == null) {\n          // Searcher was pruned\n          pastSearchers.remove(token);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (s == null) {\n      s = mgr.acquire();\n      if (s.getIndexReader().numDocs() != 0) {\n        Long token = lifetimeMGR.record(s);\n        synchronized(pastSearchers) {\n          if (!pastSearchers.contains(token)) {\n            pastSearchers.add(token);\n          }\n        }\n      }\n    }\n\n    return s;\n  }\n\n","sourceOld":"  @Override\n  protected IndexSearcher getCurrentSearcher() throws Exception {\n    if (random.nextInt(10) == 7) {\n      // NOTE: not best practice to call maybeReopen\n      // synchronous to your search threads, but still we\n      // test as apps will presumably do this for\n      // simplicity:\n      if (mgr.maybeReopen()) {\n        lifetimeMGR.prune(pruner);\n      }\n    }\n\n    IndexSearcher s = null;\n\n    synchronized(pastSearchers) {\n      while (pastSearchers.size() != 0 && random.nextDouble() < 0.25) {\n        // 1/4 of the time pull an old searcher, ie, simulate\n        // a user doing a follow-on action on a previous\n        // search (drilling down/up, clicking next/prev page,\n        // etc.)\n        final Long token = pastSearchers.get(random.nextInt(pastSearchers.size()));\n        s = lifetimeMGR.acquire(token);\n        if (s == null) {\n          // Searcher was pruned\n          pastSearchers.remove(token);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (s == null) {\n      s = mgr.acquire();\n      if (s.getIndexReader().numDocs() != 0) {\n        Long token = lifetimeMGR.record(s);\n        synchronized(pastSearchers) {\n          if (!pastSearchers.contains(token)) {\n            pastSearchers.add(token);\n          }\n        }\n      }\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#getCurrentSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#getCurrentSearcher().mjava","sourceNew":"  @Override\n  protected IndexSearcher getCurrentSearcher() throws Exception {\n    if (random.nextInt(10) == 7) {\n      // NOTE: not best practice to call maybeReopen\n      // synchronous to your search threads, but still we\n      // test as apps will presumably do this for\n      // simplicity:\n      if (mgr.maybeReopen()) {\n        lifetimeMGR.prune(pruner);\n      }\n    }\n\n    IndexSearcher s = null;\n\n    synchronized(pastSearchers) {\n      while (pastSearchers.size() != 0 && random.nextDouble() < 0.25) {\n        // 1/4 of the time pull an old searcher, ie, simulate\n        // a user doing a follow-on action on a previous\n        // search (drilling down/up, clicking next/prev page,\n        // etc.)\n        final Long token = pastSearchers.get(random.nextInt(pastSearchers.size()));\n        s = lifetimeMGR.acquire(token);\n        if (s == null) {\n          // Searcher was pruned\n          pastSearchers.remove(token);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (s == null) {\n      s = mgr.acquire();\n      if (s.getIndexReader().numDocs() != 0) {\n        Long token = lifetimeMGR.record(s);\n        synchronized(pastSearchers) {\n          if (!pastSearchers.contains(token)) {\n            pastSearchers.add(token);\n          }\n        }\n      }\n    }\n\n    return s;\n  }\n\n","sourceOld":"  @Override\n  protected IndexSearcher getCurrentSearcher() throws Exception {\n    if (random.nextInt(10) == 7) {\n      // NOTE: not best practice to call maybeReopen\n      // synchronous to your search threads, but still we\n      // test as apps will presumably do this for\n      // simplicity:\n      if (mgr.maybeReopen()) {\n        lifetimeMGR.prune(pruner);\n      }\n    }\n\n    IndexSearcher s = null;\n\n    synchronized(pastSearchers) {\n      while (pastSearchers.size() != 0 && random.nextDouble() < 0.25) {\n        // 1/4 of the time pull an old searcher, ie, simulate\n        // a user doing a follow-on action on a previous\n        // search (drilling down/up, clicking next/prev page,\n        // etc.)\n        final Long token = pastSearchers.get(random.nextInt(pastSearchers.size()));\n        s = lifetimeMGR.acquire(token);\n        if (s == null) {\n          // Searcher was pruned\n          pastSearchers.remove(token);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (s == null) {\n      s = mgr.acquire();\n      if (s.getIndexReader().numDocs() != 0) {\n        Long token = lifetimeMGR.record(s);\n        synchronized(pastSearchers) {\n          if (!pastSearchers.contains(token)) {\n            pastSearchers.add(token);\n          }\n        }\n      }\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}