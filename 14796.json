{"path":"src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","commits":[{"id":"7adea379ca28e367e6726634db1cebeb14483ee9","date":1260658827,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"/dev/null","sourceNew":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7adea379ca28e367e6726634db1cebeb14483ee9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["7adea379ca28e367e6726634db1cebeb14483ee9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7adea379ca28e367e6726634db1cebeb14483ee9"],"7adea379ca28e367e6726634db1cebeb14483ee9":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}