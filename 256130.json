{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   */\n  private String discardEscapeChar(String input) {\n    char[] caSource = input.toCharArray();\n    char[] caDest = new char[caSource.length];\n    int j = 0;\n    for (int i = 0; i < caSource.length; i++) {\n      if ((caSource[i] != '\\\\') || (i > 0 && caSource[i-1] == '\\\\')) {\n        caDest[j++]=caSource[i];\n      }\n    }\n    return new String(caDest, 0, j);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}