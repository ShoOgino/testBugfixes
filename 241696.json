{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","commits":[{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@linkl BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0c6e4414687dfe62ccb281a46e68186228d2cb5","date":1474893506,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","sourceNew":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@link BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","sourceOld":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@linkl BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","sourceNew":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@link BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","sourceOld":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@linkl BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRefBuilder,BytesRef,long,int).mjava","sourceNew":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@link BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","sourceOld":"  /** Fill the provided {@link BytesRef} with the bytes at the specified offset/length slice.\n   *  This will avoid copying the bytes, if the slice fits into a single block; otherwise, it uses\n   *  the provided {@linkl BytesRefBuilder} to copy bytes over. */\n  void setBytesRef(BytesRefBuilder builder, BytesRef result, long offset, int length) {\n    result.length = length;\n\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    if (pos + length <= BYTE_BLOCK_SIZE) {\n      // common case where the slice lives in a single block: just reference the buffer directly without copying\n      result.bytes = buffer;\n      result.offset = pos;\n    } else {\n      // uncommon case: the slice spans at least 2 blocks, so we must copy the bytes:\n      builder.grow(length);\n      result.bytes = builder.get().bytes;\n      result.offset = 0;\n      readBytes(offset, result.bytes, 0, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0c6e4414687dfe62ccb281a46e68186228d2cb5":["73860c1174109b7d888d50a10088afb18293b153"],"73860c1174109b7d888d50a10088afb18293b153":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["73860c1174109b7d888d50a10088afb18293b153","a0c6e4414687dfe62ccb281a46e68186228d2cb5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73860c1174109b7d888d50a10088afb18293b153","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0c6e4414687dfe62ccb281a46e68186228d2cb5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"73860c1174109b7d888d50a10088afb18293b153":["a0c6e4414687dfe62ccb281a46e68186228d2cb5","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73860c1174109b7d888d50a10088afb18293b153"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}