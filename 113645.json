{"path":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StopAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbdcd094e2f9e4815621e4b813461caabc9546a","date":1091569764,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println((i+1) + \". \" + path);\n              String title = doc.get(\"title\");\n\t      if (title != null) {\n\t\tSystem.out.println(\"   Title: \" + doc.get(\"title\"));\n\t      }\n\t    } else {\n\t      System.out.println((i+1) + \". \" + \"No path for this document\");\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println(i + \". \" + path);\n\t    } else {\n              String url = doc.get(\"url\");\n\t      if (url != null) {\n\t\tSystem.out.println(i + \". \" + url);\n\t\tSystem.out.println(\"   - \" + doc.get(\"title\"));\n\t      } else {\n\t\tSystem.out.println(i + \". \" + \"No path nor URL for this document\");\n\t      }\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f337b9ae29cb76acfb4db13e340f181deb7171","date":1095368225,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] \";\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      }\n    }\n    \n    Searcher searcher = new IndexSearcher(index);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Searcher searcher = new IndexSearcher(\"index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n      while (true) {\n\tSystem.out.print(\"Query: \");\n\tString line = in.readLine();\n\n\tif (line.length() == -1)\n\t  break;\n\n\tQuery query = QueryParser.parse(line, \"contents\", analyzer);\n\tSystem.out.println(\"Searching for: \" + query.toString(\"contents\"));\n\n\tHits hits = searcher.search(query);\n\tSystem.out.println(hits.length() + \" total matching documents\");\n\n\tfinal int HITS_PER_PAGE = 10;\n\tfor (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n\t  int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n\t  for (int i = start; i < end; i++) {\n\t    Document doc = hits.doc(i);\n\t    String path = doc.get(\"path\");\n\t    if (path != null) {\n              System.out.println((i+1) + \". \" + path);\n              String title = doc.get(\"title\");\n\t      if (title != null) {\n\t\tSystem.out.println(\"   Title: \" + doc.get(\"title\"));\n\t      }\n\t    } else {\n\t      System.out.println((i+1) + \". \" + \"No path for this document\");\n\t    }\n\t  }\n\n\t  if (hits.length() > end) {\n\t    System.out.print(\"more (y/n) ? \");\n\t    line = in.readLine();\n\t    if (line.length() == 0 || line.charAt(0) == 'n')\n\t      break;\n\t  }\n\t}\n      }\n      searcher.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d7096371cb280a7c1afcbc72e36f26fa0c86f51","date":1097173156,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] \";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      }\n    }\n    \n    Searcher searcher = new IndexSearcher(index);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] \";\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      }\n    }\n    \n    Searcher searcher = new IndexSearcher(index);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15666f5852d756d0f3f7cfc97ccb1204befa80ef","date":1097688794,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] \";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      }\n    }\n    \n    Searcher searcher = new IndexSearcher(index);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8316ff0ad2d8d5a130c67520cfd281b0b88063f6","date":1106714133,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e09a4dc614e8287732862ee5edf64d7199909c1e","date":1106747861,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a862b582eb65bb20bb71a7b3890193c3bc02ad99","date":1141070662,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = QueryParser.parse(line, field, analyzer);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7ec94fab9b51178ba2ec1d13ef9afbad07a7ca2","date":1181087525,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.println(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.print(\"Query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.print(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage: java org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field]\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n      Hits hits = searcher.search(query);\n      \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          hits = searcher.search(query);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      System.out.println(hits.length() + \" total matching documents\");\n\n      final int HITS_PER_PAGE = 10;\n      for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n        int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n        for (int i = start; i < end; i++) {\n\n          if (raw) {                              // output raw format\n            System.out.println(\"doc=\"+hits.id(i)+\" score=\"+hits.score(i));\n            continue;\n          }\n\n          Document doc = hits.doc(i);\n          String path = doc.get(\"path\");\n          if (path != null) {\n            System.out.println((i+1) + \". \" + path);\n            String title = doc.get(\"title\");\n            if (title != null) {\n              System.out.println(\"   Title: \" + doc.get(\"title\"));\n            }\n          } else {\n            System.out.println((i+1) + \". \" + \"No path for this document\");\n          }\n        }\n\n        if (queries != null)                      // non-interactive\n          break;\n        \n        if (hits.length() > end) {\n          System.out.println(\"more (y/n) ? \");\n          line = in.readLine();\n          if (line.length() == 0 || line.charAt(0) == 'n')\n            break;\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6880911c836817ac2521251b88f85d02c450ecb","date":1251223725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(index);\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n      QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8316ff0ad2d8d5a130c67520cfd281b0b88063f6":["15666f5852d756d0f3f7cfc97ccb1204befa80ef"],"84f337b9ae29cb76acfb4db13e340f181deb7171":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"15666f5852d756d0f3f7cfc97ccb1204befa80ef":["0d7096371cb280a7c1afcbc72e36f26fa0c86f51"],"f6880911c836817ac2521251b88f85d02c450ecb":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e7ec94fab9b51178ba2ec1d13ef9afbad07a7ca2":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"0d7096371cb280a7c1afcbc72e36f26fa0c86f51":["84f337b9ae29cb76acfb4db13e340f181deb7171"],"ba1116b3450a9c1642c89445d131b37344055245":["f6880911c836817ac2521251b88f85d02c450ecb"],"e09a4dc614e8287732862ee5edf64d7199909c1e":["8316ff0ad2d8d5a130c67520cfd281b0b88063f6"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e7ec94fab9b51178ba2ec1d13ef9afbad07a7ca2"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["e09a4dc614e8287732862ee5edf64d7199909c1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba1116b3450a9c1642c89445d131b37344055245"]},"commit2Childs":{"8316ff0ad2d8d5a130c67520cfd281b0b88063f6":["e09a4dc614e8287732862ee5edf64d7199909c1e"],"84f337b9ae29cb76acfb4db13e340f181deb7171":["0d7096371cb280a7c1afcbc72e36f26fa0c86f51"],"15666f5852d756d0f3f7cfc97ccb1204befa80ef":["8316ff0ad2d8d5a130c67520cfd281b0b88063f6"],"f6880911c836817ac2521251b88f85d02c450ecb":["ba1116b3450a9c1642c89445d131b37344055245"],"e7ec94fab9b51178ba2ec1d13ef9afbad07a7ca2":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0d7096371cb280a7c1afcbc72e36f26fa0c86f51":["15666f5852d756d0f3f7cfc97ccb1204befa80ef"],"ba1116b3450a9c1642c89445d131b37344055245":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e09a4dc614e8287732862ee5edf64d7199909c1e":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["84f337b9ae29cb76acfb4db13e340f181deb7171"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["e7ec94fab9b51178ba2ec1d13ef9afbad07a7ca2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["f6880911c836817ac2521251b88f85d02c450ecb"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}