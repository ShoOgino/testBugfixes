{"path":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final BitSetIterator iter = new BitSetIterator(bits);\n      private int pos = iter.next();\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.next();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final BitSetIterator iter = new BitSetIterator(bits);\n      private int pos = iter.next();\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.next();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/BitDocSet#iterator().mjava","pathOld":"src/java/org/apache/solr/search/BitDocSet#iterator().mjava","sourceNew":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","sourceOld":"  /*** DocIterator using nextSetBit()\n  public DocIterator iterator() {\n    return new DocIterator() {\n      int pos=bits.nextSetBit(0);\n      public boolean hasNext() {\n        return pos>=0;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=bits.nextSetBit(old+1);\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n  ***/\n\n  public DocIterator iterator() {\n    return new DocIterator() {\n      private final OpenBitSetIterator iter = new OpenBitSetIterator(bits);\n      private int pos = iter.nextDoc();\n      public boolean hasNext() {\n        return pos != DocIdSetIterator.NO_MORE_DOCS;\n      }\n\n      public Integer next() {\n        return nextDoc();\n      }\n\n      public void remove() {\n        bits.clear(pos);\n      }\n\n      public int nextDoc() {\n        int old=pos;\n        pos=iter.nextDoc();\n        return old;\n      }\n\n      public float score() {\n        return 0.0f;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["5108097d840f85a1779a41d0e412efb8130546e6"],"21400778a0bf704d187a4848279049f5d90276c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["21400778a0bf704d187a4848279049f5d90276c8"],"ad94625fb8d088209f46650c8097196fec67f00c":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["ad94625fb8d088209f46650c8097196fec67f00c"],"21400778a0bf704d187a4848279049f5d90276c8":["5108097d840f85a1779a41d0e412efb8130546e6"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["21400778a0bf704d187a4848279049f5d90276c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}