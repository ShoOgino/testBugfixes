{"path":"lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue#topList().mjava","commits":[{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue#topList().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScorerPriorityQueue#topList().mjava","sourceNew":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper<Iter> topList() {\n    final DisiWrapper<Iter>[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper<Iter> list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","sourceOld":"  /** Get the list of scorers which are on the current doc. */\n  ScorerWrapper topList() {\n    final ScorerWrapper[] heap = this.heap;\n    final int size = this.size;\n    ScorerWrapper list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue#topList().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisiPriorityQueue#topList().mjava","sourceNew":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper topList() {\n    final DisiWrapper[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","sourceOld":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper<Iter> topList() {\n    final DisiWrapper<Iter>[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper<Iter> list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}