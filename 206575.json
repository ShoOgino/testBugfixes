{"path":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilter#testLanguageSet().mjava","commits":[{"id":"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","date":1325088052,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilter#testLanguageSet().mjava","pathOld":"/dev/null","sourceNew":"  /** restrict the output to a set of possible origin languages */\n  public void testLanguageSet() throws Exception {\n    final LanguageSet languages = LanguageSet.from(new HashSet<String>() {{\n      add(\"italian\"); add(\"greek\"); add(\"spanish\");\n    }});\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, \n            new BeiderMorseFilter(tokenizer, \n                new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true), languages));\n      }\n    };\n    assertAnalyzesTo(analyzer, \"Angelo\",\n        new String[] { \"andZelo\", \"angelo\", \"anxelo\" },\n        new int[] { 0, 0, 0, },\n        new int[] { 6, 6, 6, },\n        new int[] { 1, 0, 0, });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilter#testLanguageSet().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilter#testLanguageSet().mjava","sourceNew":"  /** restrict the output to a set of possible origin languages */\n  public void testLanguageSet() throws Exception {\n    final LanguageSet languages = LanguageSet.from(new HashSet<String>() {{\n      add(\"italian\"); add(\"greek\"); add(\"spanish\");\n    }});\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, \n            new BeiderMorseFilter(tokenizer, \n                new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true), languages));\n      }\n    };\n    assertAnalyzesTo(analyzer, \"Angelo\",\n        new String[] { \"andZelo\", \"angelo\", \"anxelo\" },\n        new int[] { 0, 0, 0, },\n        new int[] { 6, 6, 6, },\n        new int[] { 1, 0, 0, });\n  }\n\n","sourceOld":"  /** restrict the output to a set of possible origin languages */\n  public void testLanguageSet() throws Exception {\n    final LanguageSet languages = LanguageSet.from(new HashSet<String>() {{\n      add(\"italian\"); add(\"greek\"); add(\"spanish\");\n    }});\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, \n            new BeiderMorseFilter(tokenizer, \n                new PhoneticEngine(NameType.GENERIC, RuleType.EXACT, true), languages));\n      }\n    };\n    assertAnalyzesTo(analyzer, \"Angelo\",\n        new String[] { \"andZelo\", \"angelo\", \"anxelo\" },\n        new int[] { 0, 0, 0, },\n        new int[] { 6, 6, 6, },\n        new int[] { 1, 0, 0, });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}