{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","commits":[{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetAll().mjava","sourceNew":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","sourceOld":"  public void testGetAll() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = params.getAll(null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      params.required().getAll(null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","sourceNew":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n    });\n    assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","sourceNew":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n    });\n    assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","sourceNew":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n    });\n    assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"129e5b874f99ae4e04f39c337c940dda690f2d38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["129e5b874f99ae4e04f39c337c940dda690f2d38","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["129e5b874f99ae4e04f39c337c940dda690f2d38","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"129e5b874f99ae4e04f39c337c940dda690f2d38":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}