{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":["1ee41a444cd904f922cebbaa1d52c166447e46d7","893d07555f01912f57b453a320e4d46363a31b50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1","date":1347448687,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c","date":1365073478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doOpenNoWriter(IndexCommit).mjava","sourceNew":"  private DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return doOpenFromCommit(commit);\n  }\n\n","sourceOld":"  private DirectoryReader doOpenNoWriter(IndexCommit commit) throws IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getSegmentsFileName())) {\n        return null;\n      }\n    }\n\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, null);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c":["ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["438e995b4e32916f631722aab36254146830fefb","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aef49b0f5a8baba3aec5efd1b59ff4f54515a48c"]},"commit2Childs":{"aef49b0f5a8baba3aec5efd1b59ff4f54515a48c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1":["aef49b0f5a8baba3aec5efd1b59ff4f54515a48c"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1"],"438e995b4e32916f631722aab36254146830fefb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}