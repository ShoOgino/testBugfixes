{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","commits":[{"id":"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","date":1412358952,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"/dev/null","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    checkFiles(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fdbe2eaead2f006baf78dfb8ec586ab712d858f","date":1414161033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {}\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testListAll().mjava","sourceNew":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Just tests that we can open all files returned by listAll\n  public void testListAll() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // test lists files manually and tries to verify every .cfs it finds,\n      // but a virus scanner could leave some trash.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // riw should sometimes create docvalues fields, etc\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // these fields should sometimes get term vectors, etc\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field bodyField = newTextField(\"body\", \"\", Field.Store.NO);\n    doc.add(idField);\n    doc.add(bodyField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(i));\n      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));\n      riw.addDocument(doc);\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n    }\n    riw.close();\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : infos) {\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            try (IndexInput cfsIn = cfsDir.openInput(cfsFile, IOContext.DEFAULT)) {\n              assert cfsIn != null;\n            }\n          }\n        }\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fdbe2eaead2f006baf78dfb8ec586ab712d858f":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["4fdbe2eaead2f006baf78dfb8ec586ab712d858f","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["4fdbe2eaead2f006baf78dfb8ec586ab712d858f","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["4fdbe2eaead2f006baf78dfb8ec586ab712d858f","b470f36a9372c97283360b1304eacbde22df6c0d"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["4fdbe2eaead2f006baf78dfb8ec586ab712d858f"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"4fdbe2eaead2f006baf78dfb8ec586ab712d858f":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","9bb9a29a5e71a90295f175df8919802993142c9a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4fdbe2eaead2f006baf78dfb8ec586ab712d858f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}