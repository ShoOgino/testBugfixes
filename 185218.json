{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,int).mjava","sourceNew":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader     The {@link IndexReader} which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param maxDocFreq The maximum number of index documents which can contain a term, after which\n   *                   the term is considered to be a stop word\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, int maxDocFreq) throws IOException {\n    int numStopWords = 0;\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator<String> iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxDocFreq);\n    }\n    return numStopWords;\n  }\n\n","sourceOld":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader     The {@link IndexReader} which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param maxDocFreq The maximum number of index documents which can contain a term, after which\n   *                   the term is considered to be a stop word\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, int maxDocFreq) throws IOException {\n    int numStopWords = 0;\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator<String> iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxDocFreq);\n    }\n    return numStopWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"193a8346fc41165af561d084bb5f40a62125a878","date":1315971230,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader     The {@link IndexReader} which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param maxDocFreq The maximum number of index documents which can contain a term, after which\n   *                   the term is considered to be a stop word\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, int maxDocFreq) throws IOException {\n    int numStopWords = 0;\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator<String> iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxDocFreq);\n    }\n    return numStopWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"193a8346fc41165af561d084bb5f40a62125a878":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["193a8346fc41165af561d084bb5f40a62125a878"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"193a8346fc41165af561d084bb5f40a62125a878":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["193a8346fc41165af561d084bb5f40a62125a878"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}