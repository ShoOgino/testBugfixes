{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithNaNInField().mjava","commits":[{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithNaNInField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithNaNInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_NAN_FIELDS, w/o updating the sanity check\",\n        12, HAS_NAN_FIELDS.size());\n    for (String f : HAS_NAN_FIELDS) {\n      // for all of these fields, field:* should NOT be equivalent to field:[* TO *]\n      assertJQ(req(\"q\", f + \":*\")\n          , \"/response/numFound==1\"\n          , \"/response/docs/[0]/id=='999'\"\n      );\n      assertJQ(req(\"q\", f + \":[* TO *]\")\n          , \"/response/numFound==0\"\n      );\n      assertJQ(req(\"q\", f + \":[-Infinity TO Infinity]\")\n          , \"/response/numFound==0\"\n      );\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\", f + \":[-Infinity TO Infinity]\" )) {\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q)\n            , \"/response/numFound==0\"\n        );\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c7ba457c7f2595139254fab54362be336c5c355":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c7ba457c7f2595139254fab54362be336c5c355"],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}