{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExplanation(StreamFactory).mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n\n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n\n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n\n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n\n    explanation.addChild(child);\n\n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n\n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n\n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n\n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n\n    explanation.addChild(child);\n\n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n\n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n\n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n\n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n\n    child.setExpression(params.stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), Arrays.toString(e.getValue()))).collect(Collectors.joining(\",\")));\n\n    explanation.addChild(child);\n\n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n\n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n\n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection));\n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n\n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n\n    explanation.addChild(child);\n\n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c35d3c01114129fff707f0777080210fa9deb2a7"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["c35d3c01114129fff707f0777080210fa9deb2a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129e5b874f99ae4e04f39c337c940dda690f2d38"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c35d3c01114129fff707f0777080210fa9deb2a7":["e9017cf144952056066919f1ebc7897ff9bd71b1","129e5b874f99ae4e04f39c337c940dda690f2d38"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}