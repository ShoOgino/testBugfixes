{"path":"solr/core/src/test/org/apache/solr/util/TestExportTool#assertJsonDocsCount(ExportTool.Info,int,Predicate[Map[String,Object]]).mjava","commits":[{"id":"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51","date":1582784911,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestExportTool#assertJsonDocsCount(ExportTool.Info,int,Predicate[Map[String,Object]]).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestExportTool#assertJsonDocsCount(ExportTool.Info,int).mjava","sourceNew":"    private void assertJsonDocsCount(ExportTool.Info info, int expected, Predicate<Map<String,Object>> predicate) throws IOException {\n    assertTrue(\"\" + info.docsWritten.get() + \" expected \" + expected, info.docsWritten.get() >= expected);\n\n    JsonRecordReader jsonReader;\n    Reader rdr;\n    jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n    rdr = new InputStreamReader(new FileInputStream(info.out), StandardCharsets.UTF_8);\n    try {\n      int[] count = new int[]{0};\n      jsonReader.streamRecords(rdr, (record, path) -> {\n        if(predicate != null){\n          assertTrue(predicate.test(record));\n        }\n        count[0]++;\n      });\n      assertTrue(count[0] >= expected);\n    } finally {\n      rdr.close();\n    }\n  }\n\n","sourceOld":"  private void assertJsonDocsCount(ExportTool.Info info, int expected) throws IOException {\n    assertTrue(\"\" + info.docsWritten.get() + \" expected \" + expected, info.docsWritten.get() >= expected);\n\n    JsonRecordReader jsonReader;\n    Reader rdr;\n    jsonReader = JsonRecordReader.getInst(\"/\", Arrays.asList(\"$FQN:/**\"));\n    rdr = new InputStreamReader(new FileInputStream(info.out), StandardCharsets.UTF_8);\n    try {\n      int[] count = new int[]{0};\n      jsonReader.streamRecords(rdr, (record, path) -> count[0]++);\n      assertTrue(count[0] >= expected);\n    } finally {\n      rdr.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51"]},"commit2Childs":{"b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3fba3dcc5d2c31b4652c425cc1cbada9dff4a51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}