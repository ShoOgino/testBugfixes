{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal)\n        throw (MergePolicy.MergeAbortedException) t;\n    } else if (t instanceof IOException)\n      throw (IOException) t;\n    else if (t instanceof RuntimeException)\n      throw (RuntimeException) t;\n    else if (t instanceof Error)\n      throw (Error) t;\n    else\n      // Should not get here\n      throw new RuntimeException(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // close(false) or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      IOUtils.reThrow(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","date":1521393811,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) { // TODO can we simplify this and just throw all the time? this would simplify this a lot\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) { // TODO can we simplify this and just throw all the time? this would simplify this a lot\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) {\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#handleMergeException(Throwable,MergePolicy.OneMerge).mjava","sourceNew":"  private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) { // TODO can we simplify this and just throw all the time? this would simplify this a lot\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","sourceOld":"  final private void handleMergeException(Throwable t, MergePolicy.OneMerge merge) throws IOException {\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"handleMergeException: merge=\" + segString(merge.segments) + \" exc=\" + t);\n    }\n\n    // Set the exception on the merge, so if\n    // forceMerge is waiting on us it sees the root\n    // cause exception:\n    merge.setException(t);\n    addMergeException(merge);\n\n    if (t instanceof MergePolicy.MergeAbortedException) {\n      // We can ignore this exception (it happens when\n      // deleteAll or rollback is called), unless the\n      // merge involves segments from external directories,\n      // in which case we must throw it so, for example, the\n      // rollbackTransaction code in addIndexes* is\n      // executed.\n      if (merge.isExternal) { // TODO can we simplify this and just throw all the time? this would simplify this a lot\n        throw (MergePolicy.MergeAbortedException) t;\n      }\n    } else {\n      assert t != null;\n      throw IOUtils.rethrowAlways(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","e9017cf144952056066919f1ebc7897ff9bd71b1","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}