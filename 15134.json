{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","commits":[{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    dir.setEnableVirusScanner(false); // we have our own to make test reproduce always\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    dir.setEnableVirusScanner(false); // we have our own to make test reproduce always\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    VirusCheckingFS fs = new VirusCheckingFS(path.getFileSystem(), random());\n    FileSystem filesystem = fs.getFileSystem(URI.create(\"file:///\"));\n    fs.disable();\n\n    Path path2 = new FilterPath(path, filesystem);\n\n    Directory dir = newFSDirectory(path2);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    fs.enable();\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    fs.disable();\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    VirusCheckingFS fs = new VirusCheckingFS(path.getFileSystem(), random().nextLong());\n    FileSystem filesystem = fs.getFileSystem(URI.create(\"file:///\"));\n    fs.disable();\n\n    Path path2 = new FilterPath(path, filesystem);\n\n    Directory dir = newFSDirectory(path2);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    fs.enable();\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    fs.disable();\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    VirusCheckingFS fs = new VirusCheckingFS(path.getFileSystem(), random());\n    FileSystem filesystem = fs.getFileSystem(URI.create(\"file:///\"));\n    fs.disable();\n\n    Path path2 = new FilterPath(path, filesystem);\n\n    Directory dir = newFSDirectory(path2);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    fs.enable();\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    fs.disable();\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    Directory dir = newFSDirectory(addVirusChecker(path));\n    TestUtil.disableVirusChecker(dir);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    TestUtil.enableVirusChecker(dir);\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    TestUtil.disableVirusChecker(dir);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    VirusCheckingFS fs = new VirusCheckingFS(path.getFileSystem(), random().nextLong());\n    FileSystem filesystem = fs.getFileSystem(URI.create(\"file:///\"));\n    fs.disable();\n\n    Path path2 = new FilterPath(path, filesystem);\n\n    Directory dir = newFSDirectory(path2);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    fs.enable();\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    fs.disable();\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    Directory dir = newFSDirectory(addVirusChecker(path));\n    TestUtil.disableVirusChecker(dir);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    TestUtil.enableVirusChecker(dir);\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    TestUtil.disableVirusChecker(dir);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    dir.setEnableVirusScanner(false); // we have our own to make test reproduce always\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    Directory dir = newFSDirectory(addVirusChecker(path));\n    TestUtil.disableVirusChecker(dir);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    TestUtil.enableVirusChecker(dir);\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    TestUtil.disableVirusChecker(dir);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    dir.setEnableVirusScanner(false); // we have our own to make test reproduce always\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexFileDeleter#testVirusScannerDoesntCorruptIndex().mjava","sourceNew":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    Path path = createTempDir();\n    Directory dir = newFSDirectory(addVirusChecker(path));\n    TestUtil.disableVirusChecker(dir);\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    TestUtil.enableVirusChecker(dir);\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    TestUtil.disableVirusChecker(dir);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testVirusScannerDoesntCorruptIndex() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setPreventDoubleWrite(false); // we arent trying to test this\n    dir.setEnableVirusScanner(false); // we have our own to make test reproduce always\n    \n    // add empty commit\n    new IndexWriter(dir, new IndexWriterConfig(null)).close();\n    // add a trash unreferenced file\n    dir.createOutput(\"_0.si\", IOContext.DEFAULT).close();\n\n    // start virus scanner\n    final AtomicBoolean stopScanning = new AtomicBoolean();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (stopScanning.get()) {\n          return;\n        }\n        for (StackTraceElement f : new Exception().getStackTrace()) {\n          if (\"deleteFile\".equals(f.getMethodName())) {\n            throw new IOException(\"temporarily cannot delete file\");\n          }\n        }\n      }\n    });\n    \n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    iw.addDocument(new Document());\n    // stop virus scanner\n    stopScanning.set(true);\n    iw.commit();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}