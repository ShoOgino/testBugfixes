{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rm(LinkedHashMap[Path,Throwable],Path...).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#rm(LinkedHashMap[Path,Throwable],Path...).mjava","pathOld":"/dev/null","sourceNew":"  private static LinkedHashMap<Path,Throwable> rm(final LinkedHashMap<Path,Throwable> unremoved, Path... locations) {\n    if (locations != null) {\n      for (Path location : locations) {\n        // TODO: remove this leniency!\n        if (location != null && Files.exists(location)) {\n          try {\n            Files.walkFileTree(location, new FileVisitor<Path>() {            \n              @Override\n              public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n                return FileVisitResult.CONTINUE;\n              }\n              \n              @Override\n              public FileVisitResult postVisitDirectory(Path dir, IOException impossible) throws IOException {\n                assert impossible == null;\n                \n                try {\n                  Files.delete(dir);\n                } catch (IOException e) {\n                  unremoved.put(dir, e);\n                }\n                return FileVisitResult.CONTINUE;\n              }\n              \n              @Override\n              public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                try {\n                  Files.delete(file);\n                } catch (IOException exc) {\n                  unremoved.put(file, exc);\n                }\n                return FileVisitResult.CONTINUE;\n              }\n              \n              @Override\n              public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n                if (exc != null) {\n                  unremoved.put(file, exc);\n                }\n                return FileVisitResult.CONTINUE;\n              }\n            });\n          } catch (IOException impossible) {\n            throw new AssertionError(\"visitor threw exception\", impossible);\n          }\n        }\n      }\n    }\n    return unremoved;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}