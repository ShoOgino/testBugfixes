{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2da200553d43622ccbeef29f3c1b6223fec4d83","date":1331145186,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    int docCount = 0;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n\n    assert field != null;\n\n    for(LeafReaderContext ctx : reader.leaves()) {\n      Terms terms = ctx.reader().fields().terms(field);\n      if (terms != null) {\n        int subDocCount = terms.getDocCount();\n        if (subDocCount == -1) {\n          docCount = -1;\n        } else if (docCount != -1) {\n          docCount += subDocCount;\n        }\n        long subSumDocFreq = terms.getSumDocFreq();\n        if (subSumDocFreq == -1) {\n          sumDocFreq = -1;\n        } else if (sumDocFreq != -1) {\n          sumDocFreq += subSumDocFreq;\n        }\n        long subSumTotalTermFreq = terms.getSumTotalTermFreq();\n        if (subSumTotalTermFreq == -1) {\n          sumTotalTermFreq = -1;\n        } else if (sumTotalTermFreq != -1) {\n          sumTotalTermFreq += subSumTotalTermFreq;\n        }\n      }\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"815972da4a13279b8e975d2e32ca450649d6c295","date":1462635959,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    int docCount = 0;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n\n    assert field != null;\n\n    for(LeafReaderContext ctx : reader.leaves()) {\n      Terms terms = ctx.reader().fields().terms(field);\n      if (terms != null) {\n        int subDocCount = terms.getDocCount();\n        if (subDocCount == -1) {\n          docCount = -1;\n        } else if (docCount != -1) {\n          docCount += subDocCount;\n        }\n        long subSumDocFreq = terms.getSumDocFreq();\n        if (subSumDocFreq == -1) {\n          sumDocFreq = -1;\n        } else if (sumDocFreq != -1) {\n          sumDocFreq += subSumDocFreq;\n        }\n        long subSumTotalTermFreq = terms.getSumTotalTermFreq();\n        if (subSumTotalTermFreq == -1) {\n          sumTotalTermFreq = -1;\n        } else if (sumTotalTermFreq != -1) {\n          sumTotalTermFreq += subSumTotalTermFreq;\n        }\n      }\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field, or {@code null} if\n   * the field does not exist (has no indexed terms)\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      return null;\n    }\n\n    docCount = terms.getDocCount();\n    sumTotalTermFreq = terms.getSumTotalTermFreq();\n    sumDocFreq = terms.getSumDocFreq();\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field.\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      docCount = 0;\n      sumTotalTermFreq = 0;\n      sumDocFreq = 0;\n    } else {\n      docCount = terms.getDocCount();\n      sumTotalTermFreq = terms.getSumTotalTermFreq();\n      sumDocFreq = terms.getSumDocFreq();\n    }\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":["07d5ffcfd6079f307f8761e28519766a9ad27f2c","815972da4a13279b8e975d2e32ca450649d6c295"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"823f97df675aea44842e47ff8d198060f55318bc","date":1510754267,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#collectionStatistics(String).mjava","sourceNew":"  /**\n   * Returns {@link CollectionStatistics} for a field, or {@code null} if\n   * the field does not exist (has no indexed terms)\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    assert field != null;\n    long docCount = 0;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n    for (LeafReaderContext leaf : reader.leaves()) {\n      final Terms terms = leaf.reader().terms(field);\n      if (terms == null) {\n        continue;\n      }\n      docCount += terms.getDocCount();\n      sumTotalTermFreq += terms.getSumTotalTermFreq();\n      sumDocFreq += terms.getSumDocFreq();\n    }\n    if (docCount == 0) {\n      return null;\n    }\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","sourceOld":"  /**\n   * Returns {@link CollectionStatistics} for a field, or {@code null} if\n   * the field does not exist (has no indexed terms)\n   * \n   * This can be overridden for example, to return a field's statistics\n   * across a distributed collection.\n   * @lucene.experimental\n   */\n  public CollectionStatistics collectionStatistics(String field) throws IOException {\n    final int docCount;\n    final long sumTotalTermFreq;\n    final long sumDocFreq;\n\n    assert field != null;\n    \n    Terms terms = MultiFields.getTerms(reader, field);\n    if (terms == null) {\n      return null;\n    }\n\n    docCount = terms.getDocCount();\n    sumTotalTermFreq = terms.getSumTotalTermFreq();\n    sumDocFreq = terms.getSumDocFreq();\n\n    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["d2da200553d43622ccbeef29f3c1b6223fec4d83","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d2da200553d43622ccbeef29f3c1b6223fec4d83","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d2da200553d43622ccbeef29f3c1b6223fec4d83","0ad30c6a479e764150a3316e57263319775f1df2"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["d2da200553d43622ccbeef29f3c1b6223fec4d83"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"815972da4a13279b8e975d2e32ca450649d6c295":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["d2da200553d43622ccbeef29f3c1b6223fec4d83","815972da4a13279b8e975d2e32ca450649d6c295"],"823f97df675aea44842e47ff8d198060f55318bc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["823f97df675aea44842e47ff8d198060f55318bc"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","d2da200553d43622ccbeef29f3c1b6223fec4d83"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["815972da4a13279b8e975d2e32ca450649d6c295"],"d2da200553d43622ccbeef29f3c1b6223fec4d83":["38e3b736c7ca086d61b7dbb841c905ee115490da","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","22aab7a3b640b0dba26cc5e9416bc7af93614b46","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"815972da4a13279b8e975d2e32ca450649d6c295":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"823f97df675aea44842e47ff8d198060f55318bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["823f97df675aea44842e47ff8d198060f55318bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}