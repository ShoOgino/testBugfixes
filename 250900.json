{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a new block key with its corresponding block file pointer to the\n   * {@link IndexDictionary.Builder} .\n   * The block key is the MDP (see {@link TermBytes}) of the block first term.\n   */\n  protected void addBlockKey(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) {\n    assert !blockLines.isEmpty();\n    assert dictionaryBuilder != null;\n    TermBytes firstTerm = blockLines.get(0).getTermBytes();\n    assert firstTerm.getTerm().offset == 0;\n    assert scratchBytesRef.offset == 0;\n    scratchBytesRef.bytes = firstTerm.getTerm().bytes;\n    scratchBytesRef.length = firstTerm.getMdpLength();\n    dictionaryBuilder.add(scratchBytesRef, blockOutput.getFilePointer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","sourceNew":"  /**\n   * Adds a new block key with its corresponding block file pointer to the\n   * {@link IndexDictionary.Builder} .\n   * The block key is the MDP (see {@link TermBytes}) of the block first term.\n   */\n  protected void addBlockKey(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n    assert !blockLines.isEmpty();\n    assert dictionaryBuilder != null;\n    TermBytes firstTerm = blockLines.get(0).getTermBytes();\n    assert firstTerm.getTerm().offset == 0;\n    assert scratchBytesRef.offset == 0;\n    scratchBytesRef.bytes = firstTerm.getTerm().bytes;\n    scratchBytesRef.length = firstTerm.getMdpLength();\n    dictionaryBuilder.add(scratchBytesRef, blockOutput.getFilePointer());\n  }\n\n","sourceOld":"  /**\n   * Adds a new block key with its corresponding block file pointer to the\n   * {@link IndexDictionary.Builder} .\n   * The block key is the MDP (see {@link TermBytes}) of the block first term.\n   */\n  protected void addBlockKey(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) {\n    assert !blockLines.isEmpty();\n    assert dictionaryBuilder != null;\n    TermBytes firstTerm = blockLines.get(0).getTermBytes();\n    assert firstTerm.getTerm().offset == 0;\n    assert scratchBytesRef.offset == 0;\n    scratchBytesRef.bytes = firstTerm.getTerm().bytes;\n    scratchBytesRef.length = firstTerm.getMdpLength();\n    dictionaryBuilder.add(scratchBytesRef, blockOutput.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockWriter#addBlockKey(List[BlockLine],IndexDictionary.Builder).mjava","sourceNew":"  /**\n   * Adds a new block key with its corresponding block file pointer to the\n   * {@link IndexDictionary.Builder} .\n   * The block key is the MDP (see {@link TermBytes}) of the block first term.\n   */\n  protected void addBlockKey(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) throws IOException {\n    assert !blockLines.isEmpty();\n    assert dictionaryBuilder != null;\n    TermBytes firstTerm = blockLines.get(0).getTermBytes();\n    assert firstTerm.getTerm().offset == 0;\n    assert scratchBytesRef.offset == 0;\n    scratchBytesRef.bytes = firstTerm.getTerm().bytes;\n    scratchBytesRef.length = firstTerm.getMdpLength();\n    dictionaryBuilder.add(scratchBytesRef, blockOutput.getFilePointer());\n  }\n\n","sourceOld":"  /**\n   * Adds a new block key with its corresponding block file pointer to the\n   * {@link IndexDictionary.Builder} .\n   * The block key is the MDP (see {@link TermBytes}) of the block first term.\n   */\n  protected void addBlockKey(List<BlockLine> blockLines, IndexDictionary.Builder dictionaryBuilder) {\n    assert !blockLines.isEmpty();\n    assert dictionaryBuilder != null;\n    TermBytes firstTerm = blockLines.get(0).getTermBytes();\n    assert firstTerm.getTerm().offset == 0;\n    assert scratchBytesRef.offset == 0;\n    scratchBytesRef.bytes = firstTerm.getTerm().bytes;\n    scratchBytesRef.length = firstTerm.getMdpLength();\n    dictionaryBuilder.add(scratchBytesRef, blockOutput.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}