{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            dv.setDocument(currentDoc);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            if (currentDoc > dv.docID()) {\n              dv.advance(currentDoc);\n            }\n            if (currentDoc != dv.docID()) {\n              continue;\n            }\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            dv.setDocument(currentDoc);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            if (currentDoc > dv.docID()) {\n              dv.advance(currentDoc);\n            }\n            if (currentDoc != dv.docID()) {\n              continue;\n            }\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            dv.setDocument(currentDoc);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.SlowMinShouldMatchScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            if (currentDoc > dv.docID()) {\n              dv.advance(currentDoc);\n            }\n            if (currentDoc != dv.docID()) {\n              continue;\n            }\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          assert currentDoc != NO_MORE_DOCS;\n          for (currentDoc = currentDoc+1; currentDoc < maxDoc; currentDoc++) {\n            currentMatched = 0;\n            score = 0;\n            dv.setDocument(currentDoc);\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              if (ords.contains(ord)) {\n                currentMatched++;\n                score += sims[(int)ord].score(currentDoc, 1);\n              }\n            }\n            if (currentMatched >= minNrShouldMatch) {\n              return currentDoc;\n            }\n          }\n          return currentDoc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          int doc;\n          while ((doc = nextDoc()) < target) {\n          }\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n        \n        @Override\n        public int docID() {\n          return currentDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7dd748bb245633a8195281556bb0e68a6ea97d18","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}