{"path":"lucene/luke/src/test/org/apache/lucene/luke/models/documents/DocumentsImplTest#testGetDocumentFields().mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/test/org/apache/lucene/luke/models/documents/DocumentsImplTest#testGetDocumentFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetDocumentFields() {\n    DocumentsImpl documents = new DocumentsImpl(reader);\n    List<DocumentField> fields = documents.getDocumentFields(0);\n    assertEquals(5, fields.size());\n\n    DocumentField f1 = fields.get(0);\n    assertEquals(\"title\", f1.getName());\n    assertEquals(IndexOptions.DOCS_AND_FREQS, f1.getIdxOptions());\n    assertFalse(f1.hasTermVectors());\n    assertFalse(f1.hasPayloads());\n    assertFalse(f1.hasNorms());\n    assertEquals(0, f1.getNorm());\n    assertTrue(f1.isStored());\n    assertEquals(\"Pride and Prejudice\", f1.getStringValue());\n    assertNull(f1.getBinaryValue());\n    assertNull(f1.getNumericValue());\n    assertEquals(DocValuesType.NONE, f1.getDvType());\n    assertEquals(0, f1.getPointDimensionCount());\n    assertEquals(0, f1.getPointNumBytes());\n\n    DocumentField f2 = fields.get(1);\n    assertEquals(\"author\", f2.getName());\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, f2.getIdxOptions());\n    assertFalse(f2.hasTermVectors());\n    assertFalse(f2.hasPayloads());\n    assertTrue(f2.hasNorms());\n    assertTrue(f2.getNorm() > 0);\n    assertTrue(f2.isStored());\n    assertEquals(\"Jane Austen\", f2.getStringValue());\n    assertNull(f2.getBinaryValue());\n    assertNull(f2.getNumericValue());\n    assertEquals(DocValuesType.NONE, f2.getDvType());\n    assertEquals(0, f2.getPointDimensionCount());\n    assertEquals(0, f2.getPointNumBytes());\n\n    DocumentField f3 = fields.get(2);\n    assertEquals(\"text\", f3.getName());\n    assertEquals(IndexOptions.DOCS_AND_FREQS, f3.getIdxOptions());\n    assertTrue(f3.hasTermVectors());\n    assertFalse(f3.hasPayloads());\n    assertTrue(f3.hasNorms());\n    assertTrue(f3.getNorm() > 0);\n    assertFalse(f3.isStored());\n    assertNull(f3.getStringValue());\n    assertNull(f3.getBinaryValue());\n    assertNull(f3.getNumericValue());\n    assertEquals(DocValuesType.NONE, f3.getDvType());\n    assertEquals(0, f3.getPointDimensionCount());\n    assertEquals(0, f3.getPointNumBytes());\n\n    DocumentField f4 = fields.get(3);\n    assertEquals(\"subject\", f4.getName());\n    assertEquals(IndexOptions.NONE, f4.getIdxOptions());\n    assertFalse(f4.hasTermVectors());\n    assertFalse(f4.hasPayloads());\n    assertFalse(f4.hasNorms());\n    assertEquals(0, f4.getNorm());\n    assertFalse(f4.isStored());\n    assertNull(f4.getStringValue());\n    assertNull(f4.getBinaryValue());\n    assertNull(f4.getNumericValue());\n    assertEquals(DocValuesType.SORTED_SET, f4.getDvType());\n    assertEquals(0, f4.getPointDimensionCount());\n    assertEquals(0, f4.getPointNumBytes());\n\n    DocumentField f5 = fields.get(4);\n    assertEquals(\"downloads\", f5.getName());\n    assertEquals(IndexOptions.NONE, f5.getIdxOptions());\n    assertFalse(f5.hasTermVectors());\n    assertFalse(f5.hasPayloads());\n    assertFalse(f5.hasNorms());\n    assertEquals(0, f5.getNorm());\n    assertTrue(f5.isStored());\n    assertNull(f5.getStringValue());\n    assertEquals(28533, NumericUtils.sortableBytesToInt(f5.getBinaryValue().bytes, 0));\n    assertNull(f5.getNumericValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}