{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(SolrZkClient,Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState by reading the current state from zookeeper. \n\t */\n\tpublic static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState by reading the current state from zookeeper. \n\t */\n\tpublic static CloudState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState by reading the current state from zookeeper. \n\t */\n\tpublic static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(SolrZkClient,Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState by reading the current state from zookeeper. \n\t */\n\tpublic static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState by reading the current state from zookeeper. \n\t */\n\tpublic static CloudState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState by reading the current state from zookeeper. \n\t */\n\tpublic static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, null, true);\n    return load(state, liveNodes);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes, ZkStateReader stateReader) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes, stateReader);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(SolrZkClient,Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState by reading the current state from zookeeper. \n   */\n  public static ClusterState load(SolrZkClient zkClient, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    byte[] state = zkClient.getData(ZkStateReader.CLUSTER_STATE,\n        null, stat, true);\n    return load(stat.getVersion(), state, liveNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["da94fd5fcff99442877e118f00fb42094b59f497"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["da94fd5fcff99442877e118f00fb42094b59f497","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}