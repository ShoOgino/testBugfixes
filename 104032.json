{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see NumericUtils#floatToSortableInt(float)\n     * @see NumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","sourceNew":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see org.apache.lucene.util.LegacyNumericUtils#floatToSortableInt(float)\n     * @see org.apache.lucene.util.LegacyNumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","sourceOld":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see NumericUtils#floatToSortableInt(float)\n     * @see NumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","sourceNew":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see org.apache.lucene.util.NumericUtils#floatToSortableInt(float)\n     * @see org.apache.lucene.util.NumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","sourceOld":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see org.apache.lucene.util.LegacyNumericUtils#floatToSortableInt(float)\n     * @see org.apache.lucene.util.LegacyNumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets.FacetInterval#includes(long).mjava","sourceNew":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see org.apache.lucene.util.NumericUtils#floatToSortableInt(float)\n     * @see org.apache.lucene.util.NumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","sourceOld":"    /**\n     * Method to use to check whether a document should be counted for\n     * an interval or not. Before calling this method on a multi-valued\n     * and/or non-numeric field make sure you call {@link #updateContext(SortedDocValues)}\n     * or {@link #updateContext(SortedSetDocValues)} (depending on the DV type). It\n     * is OK to call this method without other previous calls on numeric fields\n     * (with {@link NumericDocValues})\n     *\n     * @param value For numeric single value fields, this {@code value}\n     *              should be the {@code long} representation of the value of the document\n     *              in the specified field. For multi-valued and/or non-numeric fields, {@code value}\n     *              should be the ordinal of the term in the current segment\n     * @return <ul><li>{@link IntervalCompareResult#INCLUDED} if the value is included in the interval\n     * <li>{@link IntervalCompareResult#GREATER_THAN_END} if the value is greater than {@code endLimit}\n     * <li>{@link IntervalCompareResult#LOWER_THAN_START} if the value is lower than {@code startLimit}\n     * </ul>\n     * @see org.apache.lucene.util.LegacyNumericUtils#floatToSortableInt(float)\n     * @see org.apache.lucene.util.LegacyNumericUtils#doubleToSortableLong(double)\n     */\n    public IntervalCompareResult includes(long value) {\n      if (startLimit > value) {\n        return IntervalCompareResult.LOWER_THAN_START;\n      }\n      if (endLimit < value) {\n        return IntervalCompareResult.GREATER_THAN_END;\n      }\n      return IntervalCompareResult.INCLUDED;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}