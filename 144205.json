{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n     \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n     \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a568183b091ca52e6a2c0f9b615be5f3a0974a","date":1399311632,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,DIHWriter,DIHProperties,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","sourceNew":"  public DocBuilder(DataImporter dataImporter, DIHWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n     \n    writer = solrWriter;\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n     \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"]},"commit2Childs":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["68a568183b091ca52e6a2c0f9b615be5f3a0974a","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}