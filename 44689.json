{"path":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#assertUpdateTolerantErrors(String,UpdateResponse,ExpectedErr...).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#assertUpdateTolerantErrors(String,UpdateResponse,ExpectedErr...).mjava","pathOld":"/dev/null","sourceNew":"  /** Asserts that the UpdateResponse contains the specified expectedErrs and no others */\n  public static void assertUpdateTolerantErrors(String assertionMsgPrefix,\n                                                UpdateResponse response,\n                                                ExpectedErr... expectedErrs) {\n    @SuppressWarnings(\"unchecked\")\n    List<SimpleOrderedMap<String>> errors = (List<SimpleOrderedMap<String>>)\n      response.getResponseHeader().get(\"errors\");\n    \n    assertNotNull(assertionMsgPrefix + \": Null errors: \" + response.toString(), errors);\n    assertEquals(assertionMsgPrefix + \": Num error ids: \" + errors.toString(),\n                 expectedErrs.length, errors.size());\n\n    for (SimpleOrderedMap<String> err : errors) {\n      String assertErrPre = assertionMsgPrefix + \": \" + err.toString();\n\n      String id = err.get(\"id\");\n      assertNotNull(assertErrPre + \" ... null id\", id);\n      String type = err.get(\"type\");\n      assertNotNull(assertErrPre + \" ... null type\", type);\n      String message = err.get(\"message\");\n      assertNotNull(assertErrPre + \" ... null message\", message);\n\n      // inefficient scan, but good nough for the size of sets we're dealing with\n      boolean found = false;\n      for (ExpectedErr expected : expectedErrs) {\n        if (expected.type.equals(type) && expected.id.equals(id)\n            && (null == expected.msgSubStr || message.contains(expected.msgSubStr))) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(assertErrPre + \" ... unexpected err in: \" + response.toString(), found);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}