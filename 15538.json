{"path":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"/dev/null","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\r\n    public void testPayloadsEncoding() throws Exception {\r\n        // first perform the test using a RAMDirectory\r\n        Directory dir = new RAMDirectory();\r\n        performTest(dir);\r\n        \r\n        // now use a FSDirectory and repeat same test\r\n        String dirName = \"test_payloads\"; \r\n        dir = FSDirectory.getDirectory(dirName);\r\n        performTest(dir);\r\n        rmDir(dirName);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.getDirectory(dirName);\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\r\n    public void testPayloadsEncoding() throws Exception {\r\n        // first perform the test using a RAMDirectory\r\n        Directory dir = new RAMDirectory();\r\n        performTest(dir);\r\n        \r\n        // now use a FSDirectory and repeat same test\r\n        String dirName = \"test_payloads\"; \r\n        dir = FSDirectory.getDirectory(dirName);\r\n        performTest(dir);\r\n        rmDir(dirName);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.getDirectory(dirName);\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.getDirectory(dirName);\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.open(new File(dirName));\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.getDirectory(dirName);\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e","date":1244664919,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        String dirName = \"test_payloads\"; \n        dir = FSDirectory.open(new File(dirName));\n        performTest(dir);\n        rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayloadsEncoding().mjava","sourceNew":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","sourceOld":"    // Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory\n    public void testPayloadsEncoding() throws Exception {\n        rnd = newRandom();\n        // first perform the test using a RAMDirectory\n        Directory dir = new RAMDirectory();\n        performTest(dir);\n        \n        // now use a FSDirectory and repeat same test\n        File dirName = _TestUtil.getTempDir(\"test_payloads\");\n        dir = FSDirectory.open(dirName);\n        performTest(dir);\n       _TestUtil.rmDir(dirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cb1066f2afe9450585d0d10063ea4450085236f1":["2123bddbd65dea198cac380540636ce43a880403"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9f1405cedaef6ce1e1b563d7b35ee26c6518c81e"]},"commit2Childs":{"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cb1066f2afe9450585d0d10063ea4450085236f1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["2123bddbd65dea198cac380540636ce43a880403"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["9f1405cedaef6ce1e1b563d7b35ee26c6518c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"2123bddbd65dea198cac380540636ce43a880403":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}