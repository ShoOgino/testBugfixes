{"path":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de65fb6e86ba37c5409efafefe587d0c897c2764","date":1445143934,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(groupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, false, needScores, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, false, needScores, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      topCollector = newCollector(withinGroupSort, needScores);\n      collector = new FilterCollector(groupFilt, topCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, needScores, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, false, needScores, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, needScores, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandQuery#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect, Integer.MAX_VALUE);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, Integer.MAX_VALUE);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","sourceOld":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      DocSet groupFilt = searcher.getDocSet(query);\n      int groupDocsToCollect = getMax(groupOffset, docsPerGroup, maxDoc);\n      Collector subCollector;\n      if (withinGroupSort == null || withinGroupSort.equals(Sort.RELEVANCE)) {\n        subCollector = topCollector = TopScoreDocCollector.create(groupDocsToCollect);\n      } else {\n        topCollector = TopFieldCollector.create(searcher.weightSort(withinGroupSort), groupDocsToCollect, true);\n        if (needScores) {\n          maxScoreCollector = new MaxScoreCollector();\n          subCollector = MultiCollector.wrap(topCollector, maxScoreCollector);\n        } else {\n          subCollector = topCollector;\n        }\n      }\n      collector = new FilterCollector(groupFilt, subCollector);\n      return collector;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de65fb6e86ba37c5409efafefe587d0c897c2764":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["de65fb6e86ba37c5409efafefe587d0c897c2764","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["de65fb6e86ba37c5409efafefe587d0c897c2764"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"]},"commit2Childs":{"de65fb6e86ba37c5409efafefe587d0c897c2764":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["de65fb6e86ba37c5409efafefe587d0c897c2764","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}