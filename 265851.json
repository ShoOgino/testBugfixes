{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","commits":[{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. The given document IDs\n   * are treated as local to the reader given to\n   * {@link #setNextReader(AtomicReaderContext)}.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    if (curDocID > docID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < docID) {\n      curDocID = dpe.advance(docID);\n      if (curDocID != docID) { // requested document does not have a payload\n        if (curDocID == DocIdSetIterator.NO_MORE_DOCS) { // no more docs in this reader\n          hasMore = false;\n        }\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert dpe.freq() == 1 : \"expecting freq=1 (got \" + dpe.freq() + \") term=\" + term + \" doc=\" + curDocID;\n    int pos = dpe.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + curDocID;\n    return dpe.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. The given document IDs\n   * are treated as local to the reader given to\n   * {@link #setNextReader(AtomicReaderContext)}.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    if (curDocID > docID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < docID) {\n      curDocID = dpe.advance(docID);\n      if (curDocID != docID) { // requested document does not have a payload\n        if (curDocID == DocIdSetIterator.NO_MORE_DOCS) { // no more docs in this reader\n          hasMore = false;\n        }\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert dpe.freq() == 1 : \"expecting freq=1 (got \" + dpe.freq() + \") term=\" + term + \" doc=\" + curDocID;\n    int pos = dpe.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + curDocID;\n    return dpe.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. The given document IDs\n   * are treated as local to the reader given to\n   * {@link #setNextReader(AtomicReaderContext)}.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    if (curDocID > docID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < docID) {\n      curDocID = dpe.advance(docID);\n      if (curDocID != docID) { // requested document does not have a payload\n        if (curDocID == DocIdSetIterator.NO_MORE_DOCS) { // no more docs in this reader\n          hasMore = false;\n        }\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert dpe.freq() == 1 : \"expecting freq=1 (got \" + dpe.freq() + \") term=\" + term + \" doc=\" + curDocID;\n    int pos = dpe.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + curDocID;\n    return dpe.getPayload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. The given document IDs\n   * are treated as local to the reader given to\n   * {@link #setNextReader(AtomicReaderContext)}.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    if (curDocID > docID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < docID) {\n      curDocID = dpe.advance(docID);\n      if (curDocID != docID) { // requested document does not have a payload\n        if (curDocID == DocIdSetIterator.NO_MORE_DOCS) { // no more docs in this reader\n          hasMore = false;\n        }\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert dpe.freq() == 1 : \"expecting freq=1 (got \" + dpe.freq() + \") term=\" + term + \" doc=\" + curDocID;\n    int pos = dpe.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + curDocID;\n    return dpe.getPayload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}