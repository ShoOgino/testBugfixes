{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","commits":[{"id":"35a328e6f64355319d0b316956c260b0be251aca","date":1513957730,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","pathOld":"/dev/null","sourceNew":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      if (preferredOp != null)  {\n        properties.put(PREFERRED_OP, preferredOp);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","sourceNew":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.setHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.setHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.setHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","sourceOld":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      if (preferredOp != null)  {\n        properties.put(PREFERRED_OP, preferredOp);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","sourceNew":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.setHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.setHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.setHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","sourceOld":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      if (preferredOp != null)  {\n        properties.put(PREFERRED_OP, preferredOp);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","sourceNew":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.addHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.addHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.addHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","sourceOld":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.setHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.setHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.setHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","sourceNew":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.addHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.addHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.addHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","sourceOld":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.setHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.setHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.setHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger.MetricBreachedEvent#MetricBreachedEvent(String,String,String,String,long,String,Map[String,Number]).mjava","sourceNew":null,"sourceOld":"    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {\n      super(TriggerEventType.METRIC, source, eventTime, null);\n      properties.put(METRIC, metric);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      if (!collection.equals(Policy.ANY)) {\n        properties.put(AutoScalingParams.COLLECTION, collection);\n      }\n      if (!shard.equals(Policy.ANY))  {\n        properties.put(AutoScalingParams.SHARD, shard);\n      }\n      properties.put(PREFERRED_OP, preferredOp);\n\n      // specify requested ops\n      List<Op> ops = new ArrayList<>(hotNodes.size());\n      for (String n : hotNodes.keySet()) {\n        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));\n        op.addHint(Suggester.Hint.SRC_NODE, n);\n        if (!collection.equals(Policy.ANY)) {\n          if (!shard.equals(Policy.ANY)) {\n            op.addHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));\n          } else {\n            op.addHint(Suggester.Hint.COLL, collection);\n          }\n        }\n        ops.add(op);\n      }\n      properties.put(TriggerEvent.REQUESTED_OPS, ops);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35a328e6f64355319d0b316956c260b0be251aca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["35a328e6f64355319d0b316956c260b0be251aca","d9ccfe45460d496c5e5e1b70396521dac842d966"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["35a328e6f64355319d0b316956c260b0be251aca"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35a328e6f64355319d0b316956c260b0be251aca"],"35a328e6f64355319d0b316956c260b0be251aca":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3f504512a03d978990cbff30db0522b354e846db"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}