{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    return LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    return LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof WrapperModel) {\n      initWrapperModel(solrResourceLoader, (WrapperModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    return LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof WrapperModel) {\n      initWrapperModel(solrResourceLoader, (WrapperModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    return LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cc001d50b8d065e0e2f2cbbaf0a075bcf07bc81","date":1518547765,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof AdapterModel) {\n      initAdapterModel(solrResourceLoader, (AdapterModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof WrapperModel) {\n      initWrapperModel(solrResourceLoader, (WrapperModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1432848f7bd6a04b7c8439fce9c8b72fe836626","date":1518559234,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/store/rest/ManagedModelStore#fromLTRScoringModelMap(SolrResourceLoader,Map[String,Object],ManagedFeatureStore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof AdapterModel) {\n      initAdapterModel(solrResourceLoader, (AdapterModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static LTRScoringModel fromLTRScoringModelMap(SolrResourceLoader solrResourceLoader,\n      Map<String,Object> modelMap, ManagedFeatureStore managedFeatureStore) {\n\n    final FeatureStore featureStore =\n        managedFeatureStore.getFeatureStore((String) modelMap.get(STORE_KEY));\n\n    final List<Feature> features = new ArrayList<>();\n    final List<Normalizer> norms = new ArrayList<>();\n\n    final List<Object> featureList = (List<Object>) modelMap.get(FEATURES_KEY);\n    if (featureList != null) {\n      for (final Object feature : featureList) {\n        final Map<String,Object> featureMap = (Map<String,Object>) feature;\n        features.add(lookupFeatureFromFeatureMap(featureMap, featureStore));\n        norms.add(createNormalizerFromFeatureMap(solrResourceLoader, featureMap));\n      }\n    }\n\n    final LTRScoringModel ltrScoringModel = LTRScoringModel.getInstance(solrResourceLoader,\n        (String) modelMap.get(CLASS_KEY), // modelClassName\n        (String) modelMap.get(NAME_KEY), // modelName\n        features,\n        norms,\n        featureStore.getName(),\n        featureStore.getFeatures(),\n        (Map<String,Object>) modelMap.get(PARAMS_KEY));\n\n    if (ltrScoringModel instanceof WrapperModel) {\n      initWrapperModel(solrResourceLoader, (WrapperModel)ltrScoringModel, managedFeatureStore);\n    }\n\n    return ltrScoringModel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","a03034a121f635bebacef74693404e3273b614a6"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1432848f7bd6a04b7c8439fce9c8b72fe836626":["1aad05eeff7818b0833c02ac6b743aa72054963b","2cc001d50b8d065e0e2f2cbbaf0a075bcf07bc81"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cc001d50b8d065e0e2f2cbbaf0a075bcf07bc81":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a03034a121f635bebacef74693404e3273b614a6":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1432848f7bd6a04b7c8439fce9c8b72fe836626"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["e1432848f7bd6a04b7c8439fce9c8b72fe836626","2cc001d50b8d065e0e2f2cbbaf0a075bcf07bc81"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["1aad05eeff7818b0833c02ac6b743aa72054963b","9720b151fde2073f4e401450f4574e5f31c2d0ff","a03034a121f635bebacef74693404e3273b614a6"],"e1432848f7bd6a04b7c8439fce9c8b72fe836626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"2cc001d50b8d065e0e2f2cbbaf0a075bcf07bc81":["e1432848f7bd6a04b7c8439fce9c8b72fe836626"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}